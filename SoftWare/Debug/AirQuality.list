
AirQuality.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032ac  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08003364  08003364  00013364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003418  08003418  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  08003418  08003418  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003418  08003418  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003418  08003418  00013418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800341c  0800341c  0001341c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08003420  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  2000009c  080034bc  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  080034bc  0002022c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc2f  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002456  00000000  00000000  0002fcf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c58  00000000  00000000  00032150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b50  00000000  00000000  00032da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015ee9  00000000  00000000  000338f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011841  00000000  00000000  000497e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000848e9  00000000  00000000  0005b022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000df90b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e84  00000000  00000000  000df95c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000009c 	.word	0x2000009c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800334c 	.word	0x0800334c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200000a0 	.word	0x200000a0
 80000fc:	0800334c 	.word	0x0800334c

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f806 	bl	8000228 <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__aeabi_idiv0>:
 8000228:	4770      	bx	lr
 800022a:	46c0      	nop			; (mov r8, r8)

0800022c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800022c:	b590      	push	{r4, r7, lr}
 800022e:	b089      	sub	sp, #36	; 0x24
 8000230:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000232:	240c      	movs	r4, #12
 8000234:	193b      	adds	r3, r7, r4
 8000236:	0018      	movs	r0, r3
 8000238:	2314      	movs	r3, #20
 800023a:	001a      	movs	r2, r3
 800023c:	2100      	movs	r1, #0
 800023e:	f002 fc13 	bl	8002a68 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000242:	4b1a      	ldr	r3, [pc, #104]	; (80002ac <MX_GPIO_Init+0x80>)
 8000244:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000246:	4b19      	ldr	r3, [pc, #100]	; (80002ac <MX_GPIO_Init+0x80>)
 8000248:	2101      	movs	r1, #1
 800024a:	430a      	orrs	r2, r1
 800024c:	635a      	str	r2, [r3, #52]	; 0x34
 800024e:	4b17      	ldr	r3, [pc, #92]	; (80002ac <MX_GPIO_Init+0x80>)
 8000250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000252:	2201      	movs	r2, #1
 8000254:	4013      	ands	r3, r2
 8000256:	60bb      	str	r3, [r7, #8]
 8000258:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800025a:	4b14      	ldr	r3, [pc, #80]	; (80002ac <MX_GPIO_Init+0x80>)
 800025c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800025e:	4b13      	ldr	r3, [pc, #76]	; (80002ac <MX_GPIO_Init+0x80>)
 8000260:	2102      	movs	r1, #2
 8000262:	430a      	orrs	r2, r1
 8000264:	635a      	str	r2, [r3, #52]	; 0x34
 8000266:	4b11      	ldr	r3, [pc, #68]	; (80002ac <MX_GPIO_Init+0x80>)
 8000268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800026a:	2202      	movs	r2, #2
 800026c:	4013      	ands	r3, r2
 800026e:	607b      	str	r3, [r7, #4]
 8000270:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_12, GPIO_PIN_RESET);
 8000272:	490f      	ldr	r1, [pc, #60]	; (80002b0 <MX_GPIO_Init+0x84>)
 8000274:	4b0f      	ldr	r3, [pc, #60]	; (80002b4 <MX_GPIO_Init+0x88>)
 8000276:	2200      	movs	r2, #0
 8000278:	0018      	movs	r0, r3
 800027a:	f000 fe0f 	bl	8000e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12;
 800027e:	0021      	movs	r1, r4
 8000280:	187b      	adds	r3, r7, r1
 8000282:	4a0b      	ldr	r2, [pc, #44]	; (80002b0 <MX_GPIO_Init+0x84>)
 8000284:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000286:	187b      	adds	r3, r7, r1
 8000288:	2201      	movs	r2, #1
 800028a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800028c:	187b      	adds	r3, r7, r1
 800028e:	2200      	movs	r2, #0
 8000290:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000292:	187b      	adds	r3, r7, r1
 8000294:	2200      	movs	r2, #0
 8000296:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000298:	187b      	adds	r3, r7, r1
 800029a:	4a06      	ldr	r2, [pc, #24]	; (80002b4 <MX_GPIO_Init+0x88>)
 800029c:	0019      	movs	r1, r3
 800029e:	0010      	movs	r0, r2
 80002a0:	f000 fc98 	bl	8000bd4 <HAL_GPIO_Init>

}
 80002a4:	46c0      	nop			; (mov r8, r8)
 80002a6:	46bd      	mov	sp, r7
 80002a8:	b009      	add	sp, #36	; 0x24
 80002aa:	bd90      	pop	{r4, r7, pc}
 80002ac:	40021000 	.word	0x40021000
 80002b0:	00001001 	.word	0x00001001
 80002b4:	50000400 	.word	0x50000400

080002b8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002bc:	4b1b      	ldr	r3, [pc, #108]	; (800032c <MX_I2C1_Init+0x74>)
 80002be:	4a1c      	ldr	r2, [pc, #112]	; (8000330 <MX_I2C1_Init+0x78>)
 80002c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80002c2:	4b1a      	ldr	r3, [pc, #104]	; (800032c <MX_I2C1_Init+0x74>)
 80002c4:	4a1b      	ldr	r2, [pc, #108]	; (8000334 <MX_I2C1_Init+0x7c>)
 80002c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002c8:	4b18      	ldr	r3, [pc, #96]	; (800032c <MX_I2C1_Init+0x74>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002ce:	4b17      	ldr	r3, [pc, #92]	; (800032c <MX_I2C1_Init+0x74>)
 80002d0:	2201      	movs	r2, #1
 80002d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002d4:	4b15      	ldr	r3, [pc, #84]	; (800032c <MX_I2C1_Init+0x74>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002da:	4b14      	ldr	r3, [pc, #80]	; (800032c <MX_I2C1_Init+0x74>)
 80002dc:	2200      	movs	r2, #0
 80002de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002e0:	4b12      	ldr	r3, [pc, #72]	; (800032c <MX_I2C1_Init+0x74>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002e6:	4b11      	ldr	r3, [pc, #68]	; (800032c <MX_I2C1_Init+0x74>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002ec:	4b0f      	ldr	r3, [pc, #60]	; (800032c <MX_I2C1_Init+0x74>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002f2:	4b0e      	ldr	r3, [pc, #56]	; (800032c <MX_I2C1_Init+0x74>)
 80002f4:	0018      	movs	r0, r3
 80002f6:	f000 fdef 	bl	8000ed8 <HAL_I2C_Init>
 80002fa:	1e03      	subs	r3, r0, #0
 80002fc:	d001      	beq.n	8000302 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80002fe:	f000 f939 	bl	8000574 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000302:	4b0a      	ldr	r3, [pc, #40]	; (800032c <MX_I2C1_Init+0x74>)
 8000304:	2100      	movs	r1, #0
 8000306:	0018      	movs	r0, r3
 8000308:	f000 ffd6 	bl	80012b8 <HAL_I2CEx_ConfigAnalogFilter>
 800030c:	1e03      	subs	r3, r0, #0
 800030e:	d001      	beq.n	8000314 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000310:	f000 f930 	bl	8000574 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000314:	4b05      	ldr	r3, [pc, #20]	; (800032c <MX_I2C1_Init+0x74>)
 8000316:	2100      	movs	r1, #0
 8000318:	0018      	movs	r0, r3
 800031a:	f001 f819 	bl	8001350 <HAL_I2CEx_ConfigDigitalFilter>
 800031e:	1e03      	subs	r3, r0, #0
 8000320:	d001      	beq.n	8000326 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000322:	f000 f927 	bl	8000574 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000326:	46c0      	nop			; (mov r8, r8)
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}
 800032c:	200000b8 	.word	0x200000b8
 8000330:	40005400 	.word	0x40005400
 8000334:	00303d5b 	.word	0x00303d5b

08000338 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000338:	b590      	push	{r4, r7, lr}
 800033a:	b091      	sub	sp, #68	; 0x44
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000340:	232c      	movs	r3, #44	; 0x2c
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	0018      	movs	r0, r3
 8000346:	2314      	movs	r3, #20
 8000348:	001a      	movs	r2, r3
 800034a:	2100      	movs	r1, #0
 800034c:	f002 fb8c 	bl	8002a68 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000350:	2414      	movs	r4, #20
 8000352:	193b      	adds	r3, r7, r4
 8000354:	0018      	movs	r0, r3
 8000356:	2318      	movs	r3, #24
 8000358:	001a      	movs	r2, r3
 800035a:	2100      	movs	r1, #0
 800035c:	f002 fb84 	bl	8002a68 <memset>
  if(i2cHandle->Instance==I2C1)
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a23      	ldr	r2, [pc, #140]	; (80003f4 <HAL_I2C_MspInit+0xbc>)
 8000366:	4293      	cmp	r3, r2
 8000368:	d13f      	bne.n	80003ea <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800036a:	193b      	adds	r3, r7, r4
 800036c:	2220      	movs	r2, #32
 800036e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000370:	193b      	adds	r3, r7, r4
 8000372:	2200      	movs	r2, #0
 8000374:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000376:	193b      	adds	r3, r7, r4
 8000378:	0018      	movs	r0, r3
 800037a:	f001 fd3b 	bl	8001df4 <HAL_RCCEx_PeriphCLKConfig>
 800037e:	1e03      	subs	r3, r0, #0
 8000380:	d001      	beq.n	8000386 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000382:	f000 f8f7 	bl	8000574 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000386:	4b1c      	ldr	r3, [pc, #112]	; (80003f8 <HAL_I2C_MspInit+0xc0>)
 8000388:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800038a:	4b1b      	ldr	r3, [pc, #108]	; (80003f8 <HAL_I2C_MspInit+0xc0>)
 800038c:	2101      	movs	r1, #1
 800038e:	430a      	orrs	r2, r1
 8000390:	635a      	str	r2, [r3, #52]	; 0x34
 8000392:	4b19      	ldr	r3, [pc, #100]	; (80003f8 <HAL_I2C_MspInit+0xc0>)
 8000394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000396:	2201      	movs	r2, #1
 8000398:	4013      	ands	r3, r2
 800039a:	613b      	str	r3, [r7, #16]
 800039c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800039e:	212c      	movs	r1, #44	; 0x2c
 80003a0:	187b      	adds	r3, r7, r1
 80003a2:	22c0      	movs	r2, #192	; 0xc0
 80003a4:	00d2      	lsls	r2, r2, #3
 80003a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80003a8:	187b      	adds	r3, r7, r1
 80003aa:	2212      	movs	r2, #18
 80003ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ae:	187b      	adds	r3, r7, r1
 80003b0:	2200      	movs	r2, #0
 80003b2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b4:	187b      	adds	r3, r7, r1
 80003b6:	2200      	movs	r2, #0
 80003b8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80003ba:	187b      	adds	r3, r7, r1
 80003bc:	2206      	movs	r2, #6
 80003be:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003c0:	187a      	adds	r2, r7, r1
 80003c2:	23a0      	movs	r3, #160	; 0xa0
 80003c4:	05db      	lsls	r3, r3, #23
 80003c6:	0011      	movs	r1, r2
 80003c8:	0018      	movs	r0, r3
 80003ca:	f000 fc03 	bl	8000bd4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80003ce:	4b0a      	ldr	r3, [pc, #40]	; (80003f8 <HAL_I2C_MspInit+0xc0>)
 80003d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80003d2:	4b09      	ldr	r3, [pc, #36]	; (80003f8 <HAL_I2C_MspInit+0xc0>)
 80003d4:	2180      	movs	r1, #128	; 0x80
 80003d6:	0389      	lsls	r1, r1, #14
 80003d8:	430a      	orrs	r2, r1
 80003da:	63da      	str	r2, [r3, #60]	; 0x3c
 80003dc:	4b06      	ldr	r3, [pc, #24]	; (80003f8 <HAL_I2C_MspInit+0xc0>)
 80003de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80003e0:	2380      	movs	r3, #128	; 0x80
 80003e2:	039b      	lsls	r3, r3, #14
 80003e4:	4013      	ands	r3, r2
 80003e6:	60fb      	str	r3, [r7, #12]
 80003e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80003ea:	46c0      	nop			; (mov r8, r8)
 80003ec:	46bd      	mov	sp, r7
 80003ee:	b011      	add	sp, #68	; 0x44
 80003f0:	bd90      	pop	{r4, r7, pc}
 80003f2:	46c0      	nop			; (mov r8, r8)
 80003f4:	40005400 	.word	0x40005400
 80003f8:	40021000 	.word	0x40021000

080003fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003fc:	b590      	push	{r4, r7, lr}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000402:	f000 fa89 	bl	8000918 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000406:	f000 f86d 	bl	80004e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800040a:	f7ff ff0f 	bl	800022c <MX_GPIO_Init>
  MX_I2C1_Init();
 800040e:	f7ff ff53 	bl	80002b8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000412:	f000 f8b5 	bl	8000580 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000416:	f000 f9d7 	bl	80007c8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800041a:	2380      	movs	r3, #128	; 0x80
 800041c:	015b      	lsls	r3, r3, #5
 800041e:	4828      	ldr	r0, [pc, #160]	; (80004c0 <main+0xc4>)
 8000420:	2201      	movs	r2, #1
 8000422:	0019      	movs	r1, r3
 8000424:	f000 fd3a 	bl	8000e9c <HAL_GPIO_WritePin>
  uint8_t i = 0, ret;
 8000428:	1dfb      	adds	r3, r7, #7
 800042a:	2200      	movs	r2, #0
 800042c:	701a      	strb	r2, [r3, #0]

  HAL_Delay(1000);
 800042e:	23fa      	movs	r3, #250	; 0xfa
 8000430:	009b      	lsls	r3, r3, #2
 8000432:	0018      	movs	r0, r3
 8000434:	f000 faf6 	bl	8000a24 <HAL_Delay>

  /*-[ I2C Bus Scanning ]-*/
  HAL_UART_Transmit(&huart2, StartMSG, sizeof(StartMSG), 10000);
 8000438:	4b22      	ldr	r3, [pc, #136]	; (80004c4 <main+0xc8>)
 800043a:	4923      	ldr	r1, [pc, #140]	; (80004c8 <main+0xcc>)
 800043c:	4823      	ldr	r0, [pc, #140]	; (80004cc <main+0xd0>)
 800043e:	221a      	movs	r2, #26
 8000440:	f001 ff0c 	bl	800225c <HAL_UART_Transmit>
  for(i=1; i<128; i++)
 8000444:	1dfb      	adds	r3, r7, #7
 8000446:	2201      	movs	r2, #1
 8000448:	701a      	strb	r2, [r3, #0]
 800044a:	e02d      	b.n	80004a8 <main+0xac>
  {
      ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5);
 800044c:	1dfb      	adds	r3, r7, #7
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	b29b      	uxth	r3, r3
 8000452:	18db      	adds	r3, r3, r3
 8000454:	b299      	uxth	r1, r3
 8000456:	1dbc      	adds	r4, r7, #6
 8000458:	481d      	ldr	r0, [pc, #116]	; (80004d0 <main+0xd4>)
 800045a:	2305      	movs	r3, #5
 800045c:	2203      	movs	r2, #3
 800045e:	f000 fdd1 	bl	8001004 <HAL_I2C_IsDeviceReady>
 8000462:	0003      	movs	r3, r0
 8000464:	7023      	strb	r3, [r4, #0]
      if (ret != HAL_OK) /* No ACK Received At That Address */
 8000466:	1dbb      	adds	r3, r7, #6
 8000468:	781b      	ldrb	r3, [r3, #0]
 800046a:	2b00      	cmp	r3, #0
 800046c:	d006      	beq.n	800047c <main+0x80>
      {
          HAL_UART_Transmit(&huart2, Space, sizeof(Space), 10000);
 800046e:	4b15      	ldr	r3, [pc, #84]	; (80004c4 <main+0xc8>)
 8000470:	4918      	ldr	r1, [pc, #96]	; (80004d4 <main+0xd8>)
 8000472:	4816      	ldr	r0, [pc, #88]	; (80004cc <main+0xd0>)
 8000474:	2204      	movs	r2, #4
 8000476:	f001 fef1 	bl	800225c <HAL_UART_Transmit>
 800047a:	e010      	b.n	800049e <main+0xa2>
      }
      else if(ret == HAL_OK)
 800047c:	1dbb      	adds	r3, r7, #6
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d10c      	bne.n	800049e <main+0xa2>
      {
          sprintf(Buffer, "0x%X", i);
 8000484:	1dfb      	adds	r3, r7, #7
 8000486:	781a      	ldrb	r2, [r3, #0]
 8000488:	4913      	ldr	r1, [pc, #76]	; (80004d8 <main+0xdc>)
 800048a:	4b14      	ldr	r3, [pc, #80]	; (80004dc <main+0xe0>)
 800048c:	0018      	movs	r0, r3
 800048e:	f002 faf3 	bl	8002a78 <siprintf>
          HAL_UART_Transmit(&huart2, Buffer, sizeof(Buffer), 10000);
 8000492:	4b0c      	ldr	r3, [pc, #48]	; (80004c4 <main+0xc8>)
 8000494:	4911      	ldr	r1, [pc, #68]	; (80004dc <main+0xe0>)
 8000496:	480d      	ldr	r0, [pc, #52]	; (80004cc <main+0xd0>)
 8000498:	2219      	movs	r2, #25
 800049a:	f001 fedf 	bl	800225c <HAL_UART_Transmit>
  for(i=1; i<128; i++)
 800049e:	1dfb      	adds	r3, r7, #7
 80004a0:	781a      	ldrb	r2, [r3, #0]
 80004a2:	1dfb      	adds	r3, r7, #7
 80004a4:	3201      	adds	r2, #1
 80004a6:	701a      	strb	r2, [r3, #0]
 80004a8:	1dfb      	adds	r3, r7, #7
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	b25b      	sxtb	r3, r3
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	dacc      	bge.n	800044c <main+0x50>
      }
  }
  HAL_UART_Transmit(&huart2, EndMSG, sizeof(EndMSG), 10000);
 80004b2:	4b04      	ldr	r3, [pc, #16]	; (80004c4 <main+0xc8>)
 80004b4:	490a      	ldr	r1, [pc, #40]	; (80004e0 <main+0xe4>)
 80004b6:	4805      	ldr	r0, [pc, #20]	; (80004cc <main+0xd0>)
 80004b8:	220b      	movs	r2, #11
 80004ba:	f001 fecf 	bl	800225c <HAL_UART_Transmit>
  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004be:	e7fe      	b.n	80004be <main+0xc2>
 80004c0:	50000400 	.word	0x50000400
 80004c4:	00002710 	.word	0x00002710
 80004c8:	20000004 	.word	0x20000004
 80004cc:	20000188 	.word	0x20000188
 80004d0:	200000b8 	.word	0x200000b8
 80004d4:	20000000 	.word	0x20000000
 80004d8:	08003364 	.word	0x08003364
 80004dc:	20000104 	.word	0x20000104
 80004e0:	20000020 	.word	0x20000020

080004e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e4:	b590      	push	{r4, r7, lr}
 80004e6:	b093      	sub	sp, #76	; 0x4c
 80004e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ea:	2414      	movs	r4, #20
 80004ec:	193b      	adds	r3, r7, r4
 80004ee:	0018      	movs	r0, r3
 80004f0:	2334      	movs	r3, #52	; 0x34
 80004f2:	001a      	movs	r2, r3
 80004f4:	2100      	movs	r1, #0
 80004f6:	f002 fab7 	bl	8002a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fa:	1d3b      	adds	r3, r7, #4
 80004fc:	0018      	movs	r0, r3
 80004fe:	2310      	movs	r3, #16
 8000500:	001a      	movs	r2, r3
 8000502:	2100      	movs	r1, #0
 8000504:	f002 fab0 	bl	8002a68 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000508:	2380      	movs	r3, #128	; 0x80
 800050a:	009b      	lsls	r3, r3, #2
 800050c:	0018      	movs	r0, r3
 800050e:	f000 ff6b 	bl	80013e8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000512:	193b      	adds	r3, r7, r4
 8000514:	2202      	movs	r2, #2
 8000516:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000518:	193b      	adds	r3, r7, r4
 800051a:	2280      	movs	r2, #128	; 0x80
 800051c:	0052      	lsls	r2, r2, #1
 800051e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000520:	193b      	adds	r3, r7, r4
 8000522:	2200      	movs	r2, #0
 8000524:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000526:	193b      	adds	r3, r7, r4
 8000528:	2240      	movs	r2, #64	; 0x40
 800052a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800052c:	193b      	adds	r3, r7, r4
 800052e:	2200      	movs	r2, #0
 8000530:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000532:	193b      	adds	r3, r7, r4
 8000534:	0018      	movs	r0, r3
 8000536:	f000 ffa3 	bl	8001480 <HAL_RCC_OscConfig>
 800053a:	1e03      	subs	r3, r0, #0
 800053c:	d001      	beq.n	8000542 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800053e:	f000 f819 	bl	8000574 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	2207      	movs	r2, #7
 8000546:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000548:	1d3b      	adds	r3, r7, #4
 800054a:	2200      	movs	r2, #0
 800054c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	2200      	movs	r2, #0
 8000552:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	2200      	movs	r2, #0
 8000558:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	2100      	movs	r1, #0
 800055e:	0018      	movs	r0, r3
 8000560:	f001 fa9e 	bl	8001aa0 <HAL_RCC_ClockConfig>
 8000564:	1e03      	subs	r3, r0, #0
 8000566:	d001      	beq.n	800056c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000568:	f000 f804 	bl	8000574 <Error_Handler>
  }
}
 800056c:	46c0      	nop			; (mov r8, r8)
 800056e:	46bd      	mov	sp, r7
 8000570:	b013      	add	sp, #76	; 0x4c
 8000572:	bd90      	pop	{r4, r7, pc}

08000574 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000578:	b672      	cpsid	i
}
 800057a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800057c:	e7fe      	b.n	800057c <Error_Handler+0x8>
	...

08000580 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000584:	4b1b      	ldr	r3, [pc, #108]	; (80005f4 <MX_SPI1_Init+0x74>)
 8000586:	4a1c      	ldr	r2, [pc, #112]	; (80005f8 <MX_SPI1_Init+0x78>)
 8000588:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800058a:	4b1a      	ldr	r3, [pc, #104]	; (80005f4 <MX_SPI1_Init+0x74>)
 800058c:	2282      	movs	r2, #130	; 0x82
 800058e:	0052      	lsls	r2, r2, #1
 8000590:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000592:	4b18      	ldr	r3, [pc, #96]	; (80005f4 <MX_SPI1_Init+0x74>)
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000598:	4b16      	ldr	r3, [pc, #88]	; (80005f4 <MX_SPI1_Init+0x74>)
 800059a:	22e0      	movs	r2, #224	; 0xe0
 800059c:	00d2      	lsls	r2, r2, #3
 800059e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005a0:	4b14      	ldr	r3, [pc, #80]	; (80005f4 <MX_SPI1_Init+0x74>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005a6:	4b13      	ldr	r3, [pc, #76]	; (80005f4 <MX_SPI1_Init+0x74>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80005ac:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <MX_SPI1_Init+0x74>)
 80005ae:	2280      	movs	r2, #128	; 0x80
 80005b0:	0092      	lsls	r2, r2, #2
 80005b2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80005b4:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <MX_SPI1_Init+0x74>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005ba:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <MX_SPI1_Init+0x74>)
 80005bc:	2200      	movs	r2, #0
 80005be:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005c0:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <MX_SPI1_Init+0x74>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005c6:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <MX_SPI1_Init+0x74>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80005cc:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <MX_SPI1_Init+0x74>)
 80005ce:	2207      	movs	r2, #7
 80005d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80005d2:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <MX_SPI1_Init+0x74>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <MX_SPI1_Init+0x74>)
 80005da:	2208      	movs	r2, #8
 80005dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005de:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <MX_SPI1_Init+0x74>)
 80005e0:	0018      	movs	r0, r3
 80005e2:	f001 fd2d 	bl	8002040 <HAL_SPI_Init>
 80005e6:	1e03      	subs	r3, r0, #0
 80005e8:	d001      	beq.n	80005ee <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80005ea:	f7ff ffc3 	bl	8000574 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000120 	.word	0x20000120
 80005f8:	40013000 	.word	0x40013000

080005fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80005fc:	b590      	push	{r4, r7, lr}
 80005fe:	b08b      	sub	sp, #44	; 0x2c
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000604:	2414      	movs	r4, #20
 8000606:	193b      	adds	r3, r7, r4
 8000608:	0018      	movs	r0, r3
 800060a:	2314      	movs	r3, #20
 800060c:	001a      	movs	r2, r3
 800060e:	2100      	movs	r1, #0
 8000610:	f002 fa2a 	bl	8002a68 <memset>
  if(spiHandle->Instance==SPI1)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a2c      	ldr	r2, [pc, #176]	; (80006cc <HAL_SPI_MspInit+0xd0>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d151      	bne.n	80006c2 <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800061e:	4b2c      	ldr	r3, [pc, #176]	; (80006d0 <HAL_SPI_MspInit+0xd4>)
 8000620:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000622:	4b2b      	ldr	r3, [pc, #172]	; (80006d0 <HAL_SPI_MspInit+0xd4>)
 8000624:	2180      	movs	r1, #128	; 0x80
 8000626:	0149      	lsls	r1, r1, #5
 8000628:	430a      	orrs	r2, r1
 800062a:	641a      	str	r2, [r3, #64]	; 0x40
 800062c:	4b28      	ldr	r3, [pc, #160]	; (80006d0 <HAL_SPI_MspInit+0xd4>)
 800062e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000630:	2380      	movs	r3, #128	; 0x80
 8000632:	015b      	lsls	r3, r3, #5
 8000634:	4013      	ands	r3, r2
 8000636:	613b      	str	r3, [r7, #16]
 8000638:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800063a:	4b25      	ldr	r3, [pc, #148]	; (80006d0 <HAL_SPI_MspInit+0xd4>)
 800063c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800063e:	4b24      	ldr	r3, [pc, #144]	; (80006d0 <HAL_SPI_MspInit+0xd4>)
 8000640:	2101      	movs	r1, #1
 8000642:	430a      	orrs	r2, r1
 8000644:	635a      	str	r2, [r3, #52]	; 0x34
 8000646:	4b22      	ldr	r3, [pc, #136]	; (80006d0 <HAL_SPI_MspInit+0xd4>)
 8000648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800064a:	2201      	movs	r2, #1
 800064c:	4013      	ands	r3, r2
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000652:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <HAL_SPI_MspInit+0xd4>)
 8000654:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000656:	4b1e      	ldr	r3, [pc, #120]	; (80006d0 <HAL_SPI_MspInit+0xd4>)
 8000658:	2102      	movs	r1, #2
 800065a:	430a      	orrs	r2, r1
 800065c:	635a      	str	r2, [r3, #52]	; 0x34
 800065e:	4b1c      	ldr	r3, [pc, #112]	; (80006d0 <HAL_SPI_MspInit+0xd4>)
 8000660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000662:	2202      	movs	r2, #2
 8000664:	4013      	ands	r3, r2
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800066a:	193b      	adds	r3, r7, r4
 800066c:	22c0      	movs	r2, #192	; 0xc0
 800066e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000670:	193b      	adds	r3, r7, r4
 8000672:	2202      	movs	r2, #2
 8000674:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	193b      	adds	r3, r7, r4
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067c:	193b      	adds	r3, r7, r4
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000682:	193b      	adds	r3, r7, r4
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000688:	193a      	adds	r2, r7, r4
 800068a:	23a0      	movs	r3, #160	; 0xa0
 800068c:	05db      	lsls	r3, r3, #23
 800068e:	0011      	movs	r1, r2
 8000690:	0018      	movs	r0, r3
 8000692:	f000 fa9f 	bl	8000bd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000696:	0021      	movs	r1, r4
 8000698:	187b      	adds	r3, r7, r1
 800069a:	2208      	movs	r2, #8
 800069c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	2202      	movs	r2, #2
 80006a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	187b      	adds	r3, r7, r1
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006aa:	187b      	adds	r3, r7, r1
 80006ac:	2200      	movs	r2, #0
 80006ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80006b0:	187b      	adds	r3, r7, r1
 80006b2:	2200      	movs	r2, #0
 80006b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	4a06      	ldr	r2, [pc, #24]	; (80006d4 <HAL_SPI_MspInit+0xd8>)
 80006ba:	0019      	movs	r1, r3
 80006bc:	0010      	movs	r0, r2
 80006be:	f000 fa89 	bl	8000bd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	46bd      	mov	sp, r7
 80006c6:	b00b      	add	sp, #44	; 0x2c
 80006c8:	bd90      	pop	{r4, r7, pc}
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	40013000 	.word	0x40013000
 80006d0:	40021000 	.word	0x40021000
 80006d4:	50000400 	.word	0x50000400

080006d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006de:	4b0f      	ldr	r3, [pc, #60]	; (800071c <HAL_MspInit+0x44>)
 80006e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <HAL_MspInit+0x44>)
 80006e4:	2101      	movs	r1, #1
 80006e6:	430a      	orrs	r2, r1
 80006e8:	641a      	str	r2, [r3, #64]	; 0x40
 80006ea:	4b0c      	ldr	r3, [pc, #48]	; (800071c <HAL_MspInit+0x44>)
 80006ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ee:	2201      	movs	r2, #1
 80006f0:	4013      	ands	r3, r2
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <HAL_MspInit+0x44>)
 80006f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <HAL_MspInit+0x44>)
 80006fc:	2180      	movs	r1, #128	; 0x80
 80006fe:	0549      	lsls	r1, r1, #21
 8000700:	430a      	orrs	r2, r1
 8000702:	63da      	str	r2, [r3, #60]	; 0x3c
 8000704:	4b05      	ldr	r3, [pc, #20]	; (800071c <HAL_MspInit+0x44>)
 8000706:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000708:	2380      	movs	r3, #128	; 0x80
 800070a:	055b      	lsls	r3, r3, #21
 800070c:	4013      	ands	r3, r2
 800070e:	603b      	str	r3, [r7, #0]
 8000710:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	46bd      	mov	sp, r7
 8000716:	b002      	add	sp, #8
 8000718:	bd80      	pop	{r7, pc}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	40021000 	.word	0x40021000

08000720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000724:	e7fe      	b.n	8000724 <NMI_Handler+0x4>

08000726 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000726:	b580      	push	{r7, lr}
 8000728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800072a:	e7fe      	b.n	800072a <HardFault_Handler+0x4>

0800072c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000730:	46c0      	nop			; (mov r8, r8)
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}

08000736 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000736:	b580      	push	{r7, lr}
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000744:	f000 f952 	bl	80009ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000748:	46c0      	nop			; (mov r8, r8)
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
	...

08000750 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000758:	4a14      	ldr	r2, [pc, #80]	; (80007ac <_sbrk+0x5c>)
 800075a:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <_sbrk+0x60>)
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000764:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <_sbrk+0x64>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d102      	bne.n	8000772 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <_sbrk+0x64>)
 800076e:	4a12      	ldr	r2, [pc, #72]	; (80007b8 <_sbrk+0x68>)
 8000770:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <_sbrk+0x64>)
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	18d3      	adds	r3, r2, r3
 800077a:	693a      	ldr	r2, [r7, #16]
 800077c:	429a      	cmp	r2, r3
 800077e:	d207      	bcs.n	8000790 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000780:	f002 f948 	bl	8002a14 <__errno>
 8000784:	0003      	movs	r3, r0
 8000786:	220c      	movs	r2, #12
 8000788:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800078a:	2301      	movs	r3, #1
 800078c:	425b      	negs	r3, r3
 800078e:	e009      	b.n	80007a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000790:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <_sbrk+0x64>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000796:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <_sbrk+0x64>)
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	18d2      	adds	r2, r2, r3
 800079e:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <_sbrk+0x64>)
 80007a0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80007a2:	68fb      	ldr	r3, [r7, #12]
}
 80007a4:	0018      	movs	r0, r3
 80007a6:	46bd      	mov	sp, r7
 80007a8:	b006      	add	sp, #24
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20002000 	.word	0x20002000
 80007b0:	00000400 	.word	0x00000400
 80007b4:	20000184 	.word	0x20000184
 80007b8:	20000230 	.word	0x20000230

080007bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007c0:	46c0      	nop			; (mov r8, r8)
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
	...

080007c8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007cc:	4b16      	ldr	r3, [pc, #88]	; (8000828 <MX_USART2_UART_Init+0x60>)
 80007ce:	4a17      	ldr	r2, [pc, #92]	; (800082c <MX_USART2_UART_Init+0x64>)
 80007d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007d2:	4b15      	ldr	r3, [pc, #84]	; (8000828 <MX_USART2_UART_Init+0x60>)
 80007d4:	22e1      	movs	r2, #225	; 0xe1
 80007d6:	0252      	lsls	r2, r2, #9
 80007d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007da:	4b13      	ldr	r3, [pc, #76]	; (8000828 <MX_USART2_UART_Init+0x60>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_USART2_UART_Init+0x60>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007e6:	4b10      	ldr	r3, [pc, #64]	; (8000828 <MX_USART2_UART_Init+0x60>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007ec:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_USART2_UART_Init+0x60>)
 80007ee:	220c      	movs	r2, #12
 80007f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f2:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <MX_USART2_UART_Init+0x60>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f8:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_USART2_UART_Init+0x60>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007fe:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <MX_USART2_UART_Init+0x60>)
 8000800:	2200      	movs	r2, #0
 8000802:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000804:	4b08      	ldr	r3, [pc, #32]	; (8000828 <MX_USART2_UART_Init+0x60>)
 8000806:	2200      	movs	r2, #0
 8000808:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800080a:	4b07      	ldr	r3, [pc, #28]	; (8000828 <MX_USART2_UART_Init+0x60>)
 800080c:	2200      	movs	r2, #0
 800080e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000810:	4b05      	ldr	r3, [pc, #20]	; (8000828 <MX_USART2_UART_Init+0x60>)
 8000812:	0018      	movs	r0, r3
 8000814:	f001 fccc 	bl	80021b0 <HAL_UART_Init>
 8000818:	1e03      	subs	r3, r0, #0
 800081a:	d001      	beq.n	8000820 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800081c:	f7ff feaa 	bl	8000574 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000820:	46c0      	nop			; (mov r8, r8)
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	20000188 	.word	0x20000188
 800082c:	40004400 	.word	0x40004400

08000830 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000830:	b590      	push	{r4, r7, lr}
 8000832:	b08b      	sub	sp, #44	; 0x2c
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000838:	2414      	movs	r4, #20
 800083a:	193b      	adds	r3, r7, r4
 800083c:	0018      	movs	r0, r3
 800083e:	2314      	movs	r3, #20
 8000840:	001a      	movs	r2, r3
 8000842:	2100      	movs	r1, #0
 8000844:	f002 f910 	bl	8002a68 <memset>
  if(uartHandle->Instance==USART2)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a1b      	ldr	r2, [pc, #108]	; (80008bc <HAL_UART_MspInit+0x8c>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d130      	bne.n	80008b4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000852:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <HAL_UART_MspInit+0x90>)
 8000854:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000856:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <HAL_UART_MspInit+0x90>)
 8000858:	2180      	movs	r1, #128	; 0x80
 800085a:	0289      	lsls	r1, r1, #10
 800085c:	430a      	orrs	r2, r1
 800085e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000860:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <HAL_UART_MspInit+0x90>)
 8000862:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000864:	2380      	movs	r3, #128	; 0x80
 8000866:	029b      	lsls	r3, r3, #10
 8000868:	4013      	ands	r3, r2
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <HAL_UART_MspInit+0x90>)
 8000870:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000872:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <HAL_UART_MspInit+0x90>)
 8000874:	2101      	movs	r1, #1
 8000876:	430a      	orrs	r2, r1
 8000878:	635a      	str	r2, [r3, #52]	; 0x34
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <HAL_UART_MspInit+0x90>)
 800087c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800087e:	2201      	movs	r2, #1
 8000880:	4013      	ands	r3, r2
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000886:	0021      	movs	r1, r4
 8000888:	187b      	adds	r3, r7, r1
 800088a:	220c      	movs	r2, #12
 800088c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088e:	187b      	adds	r3, r7, r1
 8000890:	2202      	movs	r2, #2
 8000892:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	187b      	adds	r3, r7, r1
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	187b      	adds	r3, r7, r1
 800089c:	2200      	movs	r2, #0
 800089e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80008a0:	187b      	adds	r3, r7, r1
 80008a2:	2201      	movs	r2, #1
 80008a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a6:	187a      	adds	r2, r7, r1
 80008a8:	23a0      	movs	r3, #160	; 0xa0
 80008aa:	05db      	lsls	r3, r3, #23
 80008ac:	0011      	movs	r1, r2
 80008ae:	0018      	movs	r0, r3
 80008b0:	f000 f990 	bl	8000bd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80008b4:	46c0      	nop			; (mov r8, r8)
 80008b6:	46bd      	mov	sp, r7
 80008b8:	b00b      	add	sp, #44	; 0x2c
 80008ba:	bd90      	pop	{r4, r7, pc}
 80008bc:	40004400 	.word	0x40004400
 80008c0:	40021000 	.word	0x40021000

080008c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008c4:	480d      	ldr	r0, [pc, #52]	; (80008fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008c6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80008c8:	f7ff ff78 	bl	80007bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008cc:	480c      	ldr	r0, [pc, #48]	; (8000900 <LoopForever+0x6>)
  ldr r1, =_edata
 80008ce:	490d      	ldr	r1, [pc, #52]	; (8000904 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008d0:	4a0d      	ldr	r2, [pc, #52]	; (8000908 <LoopForever+0xe>)
  movs r3, #0
 80008d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d4:	e002      	b.n	80008dc <LoopCopyDataInit>

080008d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008da:	3304      	adds	r3, #4

080008dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008e0:	d3f9      	bcc.n	80008d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008e2:	4a0a      	ldr	r2, [pc, #40]	; (800090c <LoopForever+0x12>)
  ldr r4, =_ebss
 80008e4:	4c0a      	ldr	r4, [pc, #40]	; (8000910 <LoopForever+0x16>)
  movs r3, #0
 80008e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008e8:	e001      	b.n	80008ee <LoopFillZerobss>

080008ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008ec:	3204      	adds	r2, #4

080008ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008f0:	d3fb      	bcc.n	80008ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008f2:	f002 f895 	bl	8002a20 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80008f6:	f7ff fd81 	bl	80003fc <main>

080008fa <LoopForever>:

LoopForever:
  b LoopForever
 80008fa:	e7fe      	b.n	80008fa <LoopForever>
  ldr   r0, =_estack
 80008fc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000900:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000904:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8000908:	08003420 	.word	0x08003420
  ldr r2, =_sbss
 800090c:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8000910:	2000022c 	.word	0x2000022c

08000914 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000914:	e7fe      	b.n	8000914 <ADC1_IRQHandler>
	...

08000918 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800091e:	1dfb      	adds	r3, r7, #7
 8000920:	2200      	movs	r2, #0
 8000922:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000924:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <HAL_Init+0x3c>)
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <HAL_Init+0x3c>)
 800092a:	2180      	movs	r1, #128	; 0x80
 800092c:	0049      	lsls	r1, r1, #1
 800092e:	430a      	orrs	r2, r1
 8000930:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000932:	2003      	movs	r0, #3
 8000934:	f000 f810 	bl	8000958 <HAL_InitTick>
 8000938:	1e03      	subs	r3, r0, #0
 800093a:	d003      	beq.n	8000944 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800093c:	1dfb      	adds	r3, r7, #7
 800093e:	2201      	movs	r2, #1
 8000940:	701a      	strb	r2, [r3, #0]
 8000942:	e001      	b.n	8000948 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000944:	f7ff fec8 	bl	80006d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000948:	1dfb      	adds	r3, r7, #7
 800094a:	781b      	ldrb	r3, [r3, #0]
}
 800094c:	0018      	movs	r0, r3
 800094e:	46bd      	mov	sp, r7
 8000950:	b002      	add	sp, #8
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40022000 	.word	0x40022000

08000958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000958:	b590      	push	{r4, r7, lr}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000960:	230f      	movs	r3, #15
 8000962:	18fb      	adds	r3, r7, r3
 8000964:	2200      	movs	r2, #0
 8000966:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000968:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <HAL_InitTick+0x88>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d02b      	beq.n	80009c8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000970:	4b1c      	ldr	r3, [pc, #112]	; (80009e4 <HAL_InitTick+0x8c>)
 8000972:	681c      	ldr	r4, [r3, #0]
 8000974:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <HAL_InitTick+0x88>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	0019      	movs	r1, r3
 800097a:	23fa      	movs	r3, #250	; 0xfa
 800097c:	0098      	lsls	r0, r3, #2
 800097e:	f7ff fbc9 	bl	8000114 <__udivsi3>
 8000982:	0003      	movs	r3, r0
 8000984:	0019      	movs	r1, r3
 8000986:	0020      	movs	r0, r4
 8000988:	f7ff fbc4 	bl	8000114 <__udivsi3>
 800098c:	0003      	movs	r3, r0
 800098e:	0018      	movs	r0, r3
 8000990:	f000 f913 	bl	8000bba <HAL_SYSTICK_Config>
 8000994:	1e03      	subs	r3, r0, #0
 8000996:	d112      	bne.n	80009be <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2b03      	cmp	r3, #3
 800099c:	d80a      	bhi.n	80009b4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800099e:	6879      	ldr	r1, [r7, #4]
 80009a0:	2301      	movs	r3, #1
 80009a2:	425b      	negs	r3, r3
 80009a4:	2200      	movs	r2, #0
 80009a6:	0018      	movs	r0, r3
 80009a8:	f000 f8f2 	bl	8000b90 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009ac:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <HAL_InitTick+0x90>)
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	e00d      	b.n	80009d0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80009b4:	230f      	movs	r3, #15
 80009b6:	18fb      	adds	r3, r7, r3
 80009b8:	2201      	movs	r2, #1
 80009ba:	701a      	strb	r2, [r3, #0]
 80009bc:	e008      	b.n	80009d0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009be:	230f      	movs	r3, #15
 80009c0:	18fb      	adds	r3, r7, r3
 80009c2:	2201      	movs	r2, #1
 80009c4:	701a      	strb	r2, [r3, #0]
 80009c6:	e003      	b.n	80009d0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009c8:	230f      	movs	r3, #15
 80009ca:	18fb      	adds	r3, r7, r3
 80009cc:	2201      	movs	r2, #1
 80009ce:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80009d0:	230f      	movs	r3, #15
 80009d2:	18fb      	adds	r3, r7, r3
 80009d4:	781b      	ldrb	r3, [r3, #0]
}
 80009d6:	0018      	movs	r0, r3
 80009d8:	46bd      	mov	sp, r7
 80009da:	b005      	add	sp, #20
 80009dc:	bd90      	pop	{r4, r7, pc}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	20000034 	.word	0x20000034
 80009e4:	2000002c 	.word	0x2000002c
 80009e8:	20000030 	.word	0x20000030

080009ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009f0:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <HAL_IncTick+0x1c>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	001a      	movs	r2, r3
 80009f6:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <HAL_IncTick+0x20>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	18d2      	adds	r2, r2, r3
 80009fc:	4b03      	ldr	r3, [pc, #12]	; (8000a0c <HAL_IncTick+0x20>)
 80009fe:	601a      	str	r2, [r3, #0]
}
 8000a00:	46c0      	nop			; (mov r8, r8)
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	20000034 	.word	0x20000034
 8000a0c:	20000218 	.word	0x20000218

08000a10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  return uwTick;
 8000a14:	4b02      	ldr	r3, [pc, #8]	; (8000a20 <HAL_GetTick+0x10>)
 8000a16:	681b      	ldr	r3, [r3, #0]
}
 8000a18:	0018      	movs	r0, r3
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	20000218 	.word	0x20000218

08000a24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a2c:	f7ff fff0 	bl	8000a10 <HAL_GetTick>
 8000a30:	0003      	movs	r3, r0
 8000a32:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	d005      	beq.n	8000a4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a3e:	4b0a      	ldr	r3, [pc, #40]	; (8000a68 <HAL_Delay+0x44>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	001a      	movs	r2, r3
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	189b      	adds	r3, r3, r2
 8000a48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	f7ff ffe0 	bl	8000a10 <HAL_GetTick>
 8000a50:	0002      	movs	r2, r0
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	1ad3      	subs	r3, r2, r3
 8000a56:	68fa      	ldr	r2, [r7, #12]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d8f7      	bhi.n	8000a4c <HAL_Delay+0x28>
  {
  }
}
 8000a5c:	46c0      	nop			; (mov r8, r8)
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	46bd      	mov	sp, r7
 8000a62:	b004      	add	sp, #16
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	20000034 	.word	0x20000034

08000a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a6c:	b590      	push	{r4, r7, lr}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	0002      	movs	r2, r0
 8000a74:	6039      	str	r1, [r7, #0]
 8000a76:	1dfb      	adds	r3, r7, #7
 8000a78:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a7a:	1dfb      	adds	r3, r7, #7
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	2b7f      	cmp	r3, #127	; 0x7f
 8000a80:	d828      	bhi.n	8000ad4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a82:	4a2f      	ldr	r2, [pc, #188]	; (8000b40 <__NVIC_SetPriority+0xd4>)
 8000a84:	1dfb      	adds	r3, r7, #7
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	b25b      	sxtb	r3, r3
 8000a8a:	089b      	lsrs	r3, r3, #2
 8000a8c:	33c0      	adds	r3, #192	; 0xc0
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	589b      	ldr	r3, [r3, r2]
 8000a92:	1dfa      	adds	r2, r7, #7
 8000a94:	7812      	ldrb	r2, [r2, #0]
 8000a96:	0011      	movs	r1, r2
 8000a98:	2203      	movs	r2, #3
 8000a9a:	400a      	ands	r2, r1
 8000a9c:	00d2      	lsls	r2, r2, #3
 8000a9e:	21ff      	movs	r1, #255	; 0xff
 8000aa0:	4091      	lsls	r1, r2
 8000aa2:	000a      	movs	r2, r1
 8000aa4:	43d2      	mvns	r2, r2
 8000aa6:	401a      	ands	r2, r3
 8000aa8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	019b      	lsls	r3, r3, #6
 8000aae:	22ff      	movs	r2, #255	; 0xff
 8000ab0:	401a      	ands	r2, r3
 8000ab2:	1dfb      	adds	r3, r7, #7
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	2303      	movs	r3, #3
 8000aba:	4003      	ands	r3, r0
 8000abc:	00db      	lsls	r3, r3, #3
 8000abe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ac0:	481f      	ldr	r0, [pc, #124]	; (8000b40 <__NVIC_SetPriority+0xd4>)
 8000ac2:	1dfb      	adds	r3, r7, #7
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	b25b      	sxtb	r3, r3
 8000ac8:	089b      	lsrs	r3, r3, #2
 8000aca:	430a      	orrs	r2, r1
 8000acc:	33c0      	adds	r3, #192	; 0xc0
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ad2:	e031      	b.n	8000b38 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ad4:	4a1b      	ldr	r2, [pc, #108]	; (8000b44 <__NVIC_SetPriority+0xd8>)
 8000ad6:	1dfb      	adds	r3, r7, #7
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	0019      	movs	r1, r3
 8000adc:	230f      	movs	r3, #15
 8000ade:	400b      	ands	r3, r1
 8000ae0:	3b08      	subs	r3, #8
 8000ae2:	089b      	lsrs	r3, r3, #2
 8000ae4:	3306      	adds	r3, #6
 8000ae6:	009b      	lsls	r3, r3, #2
 8000ae8:	18d3      	adds	r3, r2, r3
 8000aea:	3304      	adds	r3, #4
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	1dfa      	adds	r2, r7, #7
 8000af0:	7812      	ldrb	r2, [r2, #0]
 8000af2:	0011      	movs	r1, r2
 8000af4:	2203      	movs	r2, #3
 8000af6:	400a      	ands	r2, r1
 8000af8:	00d2      	lsls	r2, r2, #3
 8000afa:	21ff      	movs	r1, #255	; 0xff
 8000afc:	4091      	lsls	r1, r2
 8000afe:	000a      	movs	r2, r1
 8000b00:	43d2      	mvns	r2, r2
 8000b02:	401a      	ands	r2, r3
 8000b04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	019b      	lsls	r3, r3, #6
 8000b0a:	22ff      	movs	r2, #255	; 0xff
 8000b0c:	401a      	ands	r2, r3
 8000b0e:	1dfb      	adds	r3, r7, #7
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	0018      	movs	r0, r3
 8000b14:	2303      	movs	r3, #3
 8000b16:	4003      	ands	r3, r0
 8000b18:	00db      	lsls	r3, r3, #3
 8000b1a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b1c:	4809      	ldr	r0, [pc, #36]	; (8000b44 <__NVIC_SetPriority+0xd8>)
 8000b1e:	1dfb      	adds	r3, r7, #7
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	001c      	movs	r4, r3
 8000b24:	230f      	movs	r3, #15
 8000b26:	4023      	ands	r3, r4
 8000b28:	3b08      	subs	r3, #8
 8000b2a:	089b      	lsrs	r3, r3, #2
 8000b2c:	430a      	orrs	r2, r1
 8000b2e:	3306      	adds	r3, #6
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	18c3      	adds	r3, r0, r3
 8000b34:	3304      	adds	r3, #4
 8000b36:	601a      	str	r2, [r3, #0]
}
 8000b38:	46c0      	nop			; (mov r8, r8)
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	b003      	add	sp, #12
 8000b3e:	bd90      	pop	{r4, r7, pc}
 8000b40:	e000e100 	.word	0xe000e100
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	1e5a      	subs	r2, r3, #1
 8000b54:	2380      	movs	r3, #128	; 0x80
 8000b56:	045b      	lsls	r3, r3, #17
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d301      	bcc.n	8000b60 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	e010      	b.n	8000b82 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b60:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <SysTick_Config+0x44>)
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	3a01      	subs	r2, #1
 8000b66:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b68:	2301      	movs	r3, #1
 8000b6a:	425b      	negs	r3, r3
 8000b6c:	2103      	movs	r1, #3
 8000b6e:	0018      	movs	r0, r3
 8000b70:	f7ff ff7c 	bl	8000a6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <SysTick_Config+0x44>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b7a:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <SysTick_Config+0x44>)
 8000b7c:	2207      	movs	r2, #7
 8000b7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	0018      	movs	r0, r3
 8000b84:	46bd      	mov	sp, r7
 8000b86:	b002      	add	sp, #8
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	e000e010 	.word	0xe000e010

08000b90 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60b9      	str	r1, [r7, #8]
 8000b98:	607a      	str	r2, [r7, #4]
 8000b9a:	210f      	movs	r1, #15
 8000b9c:	187b      	adds	r3, r7, r1
 8000b9e:	1c02      	adds	r2, r0, #0
 8000ba0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000ba2:	68ba      	ldr	r2, [r7, #8]
 8000ba4:	187b      	adds	r3, r7, r1
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	b25b      	sxtb	r3, r3
 8000baa:	0011      	movs	r1, r2
 8000bac:	0018      	movs	r0, r3
 8000bae:	f7ff ff5d 	bl	8000a6c <__NVIC_SetPriority>
}
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	b004      	add	sp, #16
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b082      	sub	sp, #8
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	f7ff ffbf 	bl	8000b48 <SysTick_Config>
 8000bca:	0003      	movs	r3, r0
}
 8000bcc:	0018      	movs	r0, r3
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	b002      	add	sp, #8
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bde:	2300      	movs	r3, #0
 8000be0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000be2:	e147      	b.n	8000e74 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2101      	movs	r1, #1
 8000bea:	697a      	ldr	r2, [r7, #20]
 8000bec:	4091      	lsls	r1, r2
 8000bee:	000a      	movs	r2, r1
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d100      	bne.n	8000bfc <HAL_GPIO_Init+0x28>
 8000bfa:	e138      	b.n	8000e6e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	2203      	movs	r2, #3
 8000c02:	4013      	ands	r3, r2
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d005      	beq.n	8000c14 <HAL_GPIO_Init+0x40>
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	4013      	ands	r3, r2
 8000c10:	2b02      	cmp	r3, #2
 8000c12:	d130      	bne.n	8000c76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	689b      	ldr	r3, [r3, #8]
 8000c18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	2203      	movs	r2, #3
 8000c20:	409a      	lsls	r2, r3
 8000c22:	0013      	movs	r3, r2
 8000c24:	43da      	mvns	r2, r3
 8000c26:	693b      	ldr	r3, [r7, #16]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	68da      	ldr	r2, [r3, #12]
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	409a      	lsls	r2, r3
 8000c36:	0013      	movs	r3, r2
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	409a      	lsls	r2, r3
 8000c50:	0013      	movs	r3, r2
 8000c52:	43da      	mvns	r2, r3
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	4013      	ands	r3, r2
 8000c58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	091b      	lsrs	r3, r3, #4
 8000c60:	2201      	movs	r2, #1
 8000c62:	401a      	ands	r2, r3
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	409a      	lsls	r2, r3
 8000c68:	0013      	movs	r3, r2
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	2203      	movs	r2, #3
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	2b03      	cmp	r3, #3
 8000c80:	d017      	beq.n	8000cb2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	68db      	ldr	r3, [r3, #12]
 8000c86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	2203      	movs	r2, #3
 8000c8e:	409a      	lsls	r2, r3
 8000c90:	0013      	movs	r3, r2
 8000c92:	43da      	mvns	r2, r3
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	4013      	ands	r3, r2
 8000c98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	689a      	ldr	r2, [r3, #8]
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	409a      	lsls	r2, r3
 8000ca4:	0013      	movs	r3, r2
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	2203      	movs	r2, #3
 8000cb8:	4013      	ands	r3, r2
 8000cba:	2b02      	cmp	r3, #2
 8000cbc:	d123      	bne.n	8000d06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	08da      	lsrs	r2, r3, #3
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	3208      	adds	r2, #8
 8000cc6:	0092      	lsls	r2, r2, #2
 8000cc8:	58d3      	ldr	r3, [r2, r3]
 8000cca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	2207      	movs	r2, #7
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	220f      	movs	r2, #15
 8000cd6:	409a      	lsls	r2, r3
 8000cd8:	0013      	movs	r3, r2
 8000cda:	43da      	mvns	r2, r3
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	691a      	ldr	r2, [r3, #16]
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	2107      	movs	r1, #7
 8000cea:	400b      	ands	r3, r1
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	409a      	lsls	r2, r3
 8000cf0:	0013      	movs	r3, r2
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	08da      	lsrs	r2, r3, #3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3208      	adds	r2, #8
 8000d00:	0092      	lsls	r2, r2, #2
 8000d02:	6939      	ldr	r1, [r7, #16]
 8000d04:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	2203      	movs	r2, #3
 8000d12:	409a      	lsls	r2, r3
 8000d14:	0013      	movs	r3, r2
 8000d16:	43da      	mvns	r2, r3
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	2203      	movs	r2, #3
 8000d24:	401a      	ands	r2, r3
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	409a      	lsls	r2, r3
 8000d2c:	0013      	movs	r3, r2
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685a      	ldr	r2, [r3, #4]
 8000d3e:	23c0      	movs	r3, #192	; 0xc0
 8000d40:	029b      	lsls	r3, r3, #10
 8000d42:	4013      	ands	r3, r2
 8000d44:	d100      	bne.n	8000d48 <HAL_GPIO_Init+0x174>
 8000d46:	e092      	b.n	8000e6e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000d48:	4a50      	ldr	r2, [pc, #320]	; (8000e8c <HAL_GPIO_Init+0x2b8>)
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	089b      	lsrs	r3, r3, #2
 8000d4e:	3318      	adds	r3, #24
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	589b      	ldr	r3, [r3, r2]
 8000d54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	2203      	movs	r2, #3
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	00db      	lsls	r3, r3, #3
 8000d5e:	220f      	movs	r2, #15
 8000d60:	409a      	lsls	r2, r3
 8000d62:	0013      	movs	r3, r2
 8000d64:	43da      	mvns	r2, r3
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000d6c:	687a      	ldr	r2, [r7, #4]
 8000d6e:	23a0      	movs	r3, #160	; 0xa0
 8000d70:	05db      	lsls	r3, r3, #23
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d013      	beq.n	8000d9e <HAL_GPIO_Init+0x1ca>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a45      	ldr	r2, [pc, #276]	; (8000e90 <HAL_GPIO_Init+0x2bc>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d00d      	beq.n	8000d9a <HAL_GPIO_Init+0x1c6>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a44      	ldr	r2, [pc, #272]	; (8000e94 <HAL_GPIO_Init+0x2c0>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d007      	beq.n	8000d96 <HAL_GPIO_Init+0x1c2>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a43      	ldr	r2, [pc, #268]	; (8000e98 <HAL_GPIO_Init+0x2c4>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d101      	bne.n	8000d92 <HAL_GPIO_Init+0x1be>
 8000d8e:	2303      	movs	r3, #3
 8000d90:	e006      	b.n	8000da0 <HAL_GPIO_Init+0x1cc>
 8000d92:	2305      	movs	r3, #5
 8000d94:	e004      	b.n	8000da0 <HAL_GPIO_Init+0x1cc>
 8000d96:	2302      	movs	r3, #2
 8000d98:	e002      	b.n	8000da0 <HAL_GPIO_Init+0x1cc>
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e000      	b.n	8000da0 <HAL_GPIO_Init+0x1cc>
 8000d9e:	2300      	movs	r3, #0
 8000da0:	697a      	ldr	r2, [r7, #20]
 8000da2:	2103      	movs	r1, #3
 8000da4:	400a      	ands	r2, r1
 8000da6:	00d2      	lsls	r2, r2, #3
 8000da8:	4093      	lsls	r3, r2
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000db0:	4936      	ldr	r1, [pc, #216]	; (8000e8c <HAL_GPIO_Init+0x2b8>)
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	089b      	lsrs	r3, r3, #2
 8000db6:	3318      	adds	r3, #24
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000dbe:	4b33      	ldr	r3, [pc, #204]	; (8000e8c <HAL_GPIO_Init+0x2b8>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	43da      	mvns	r2, r3
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685a      	ldr	r2, [r3, #4]
 8000dd2:	2380      	movs	r3, #128	; 0x80
 8000dd4:	035b      	lsls	r3, r3, #13
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	d003      	beq.n	8000de2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000de2:	4b2a      	ldr	r3, [pc, #168]	; (8000e8c <HAL_GPIO_Init+0x2b8>)
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000de8:	4b28      	ldr	r3, [pc, #160]	; (8000e8c <HAL_GPIO_Init+0x2b8>)
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	43da      	mvns	r2, r3
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	4013      	ands	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685a      	ldr	r2, [r3, #4]
 8000dfc:	2380      	movs	r3, #128	; 0x80
 8000dfe:	039b      	lsls	r3, r3, #14
 8000e00:	4013      	ands	r3, r2
 8000e02:	d003      	beq.n	8000e0c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e0c:	4b1f      	ldr	r3, [pc, #124]	; (8000e8c <HAL_GPIO_Init+0x2b8>)
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e12:	4a1e      	ldr	r2, [pc, #120]	; (8000e8c <HAL_GPIO_Init+0x2b8>)
 8000e14:	2384      	movs	r3, #132	; 0x84
 8000e16:	58d3      	ldr	r3, [r2, r3]
 8000e18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	43da      	mvns	r2, r3
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	4013      	ands	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685a      	ldr	r2, [r3, #4]
 8000e28:	2380      	movs	r3, #128	; 0x80
 8000e2a:	029b      	lsls	r3, r3, #10
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	d003      	beq.n	8000e38 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e38:	4914      	ldr	r1, [pc, #80]	; (8000e8c <HAL_GPIO_Init+0x2b8>)
 8000e3a:	2284      	movs	r2, #132	; 0x84
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000e40:	4a12      	ldr	r2, [pc, #72]	; (8000e8c <HAL_GPIO_Init+0x2b8>)
 8000e42:	2380      	movs	r3, #128	; 0x80
 8000e44:	58d3      	ldr	r3, [r2, r3]
 8000e46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	43da      	mvns	r2, r3
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685a      	ldr	r2, [r3, #4]
 8000e56:	2380      	movs	r3, #128	; 0x80
 8000e58:	025b      	lsls	r3, r3, #9
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	d003      	beq.n	8000e66 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e66:	4909      	ldr	r1, [pc, #36]	; (8000e8c <HAL_GPIO_Init+0x2b8>)
 8000e68:	2280      	movs	r2, #128	; 0x80
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	3301      	adds	r3, #1
 8000e72:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	40da      	lsrs	r2, r3
 8000e7c:	1e13      	subs	r3, r2, #0
 8000e7e:	d000      	beq.n	8000e82 <HAL_GPIO_Init+0x2ae>
 8000e80:	e6b0      	b.n	8000be4 <HAL_GPIO_Init+0x10>
  }
}
 8000e82:	46c0      	nop			; (mov r8, r8)
 8000e84:	46c0      	nop			; (mov r8, r8)
 8000e86:	46bd      	mov	sp, r7
 8000e88:	b006      	add	sp, #24
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40021800 	.word	0x40021800
 8000e90:	50000400 	.word	0x50000400
 8000e94:	50000800 	.word	0x50000800
 8000e98:	50000c00 	.word	0x50000c00

08000e9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	0008      	movs	r0, r1
 8000ea6:	0011      	movs	r1, r2
 8000ea8:	1cbb      	adds	r3, r7, #2
 8000eaa:	1c02      	adds	r2, r0, #0
 8000eac:	801a      	strh	r2, [r3, #0]
 8000eae:	1c7b      	adds	r3, r7, #1
 8000eb0:	1c0a      	adds	r2, r1, #0
 8000eb2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000eb4:	1c7b      	adds	r3, r7, #1
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d004      	beq.n	8000ec6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ebc:	1cbb      	adds	r3, r7, #2
 8000ebe:	881a      	ldrh	r2, [r3, #0]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ec4:	e003      	b.n	8000ece <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ec6:	1cbb      	adds	r3, r7, #2
 8000ec8:	881a      	ldrh	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	b002      	add	sp, #8
 8000ed4:	bd80      	pop	{r7, pc}
	...

08000ed8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d101      	bne.n	8000eea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e082      	b.n	8000ff0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2241      	movs	r2, #65	; 0x41
 8000eee:	5c9b      	ldrb	r3, [r3, r2]
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d107      	bne.n	8000f06 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2240      	movs	r2, #64	; 0x40
 8000efa:	2100      	movs	r1, #0
 8000efc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	0018      	movs	r0, r3
 8000f02:	f7ff fa19 	bl	8000338 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2241      	movs	r2, #65	; 0x41
 8000f0a:	2124      	movs	r1, #36	; 0x24
 8000f0c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2101      	movs	r1, #1
 8000f1a:	438a      	bics	r2, r1
 8000f1c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	685a      	ldr	r2, [r3, #4]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4934      	ldr	r1, [pc, #208]	; (8000ff8 <HAL_I2C_Init+0x120>)
 8000f28:	400a      	ands	r2, r1
 8000f2a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	689a      	ldr	r2, [r3, #8]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4931      	ldr	r1, [pc, #196]	; (8000ffc <HAL_I2C_Init+0x124>)
 8000f38:	400a      	ands	r2, r1
 8000f3a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d108      	bne.n	8000f56 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	689a      	ldr	r2, [r3, #8]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2180      	movs	r1, #128	; 0x80
 8000f4e:	0209      	lsls	r1, r1, #8
 8000f50:	430a      	orrs	r2, r1
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	e007      	b.n	8000f66 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	689a      	ldr	r2, [r3, #8]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2184      	movs	r1, #132	; 0x84
 8000f60:	0209      	lsls	r1, r1, #8
 8000f62:	430a      	orrs	r2, r1
 8000f64:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	68db      	ldr	r3, [r3, #12]
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d104      	bne.n	8000f78 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2280      	movs	r2, #128	; 0x80
 8000f74:	0112      	lsls	r2, r2, #4
 8000f76:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	685a      	ldr	r2, [r3, #4]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	491f      	ldr	r1, [pc, #124]	; (8001000 <HAL_I2C_Init+0x128>)
 8000f84:	430a      	orrs	r2, r1
 8000f86:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	68da      	ldr	r2, [r3, #12]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	491a      	ldr	r1, [pc, #104]	; (8000ffc <HAL_I2C_Init+0x124>)
 8000f94:	400a      	ands	r2, r1
 8000f96:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	691a      	ldr	r2, [r3, #16]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	695b      	ldr	r3, [r3, #20]
 8000fa0:	431a      	orrs	r2, r3
 8000fa2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	430a      	orrs	r2, r1
 8000fb0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	69d9      	ldr	r1, [r3, #28]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6a1a      	ldr	r2, [r3, #32]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2101      	movs	r1, #1
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2241      	movs	r2, #65	; 0x41
 8000fdc:	2120      	movs	r1, #32
 8000fde:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2242      	movs	r2, #66	; 0x42
 8000fea:	2100      	movs	r1, #0
 8000fec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000fee:	2300      	movs	r3, #0
}
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	b002      	add	sp, #8
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	f0ffffff 	.word	0xf0ffffff
 8000ffc:	ffff7fff 	.word	0xffff7fff
 8001000:	02008000 	.word	0x02008000

08001004 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08a      	sub	sp, #40	; 0x28
 8001008:	af02      	add	r7, sp, #8
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	607a      	str	r2, [r7, #4]
 800100e:	603b      	str	r3, [r7, #0]
 8001010:	230a      	movs	r3, #10
 8001012:	18fb      	adds	r3, r7, r3
 8001014:	1c0a      	adds	r2, r1, #0
 8001016:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2241      	movs	r2, #65	; 0x41
 8001020:	5c9b      	ldrb	r3, [r3, r2]
 8001022:	b2db      	uxtb	r3, r3
 8001024:	2b20      	cmp	r3, #32
 8001026:	d000      	beq.n	800102a <HAL_I2C_IsDeviceReady+0x26>
 8001028:	e0fe      	b.n	8001228 <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	699a      	ldr	r2, [r3, #24]
 8001030:	2380      	movs	r3, #128	; 0x80
 8001032:	021b      	lsls	r3, r3, #8
 8001034:	401a      	ands	r2, r3
 8001036:	2380      	movs	r3, #128	; 0x80
 8001038:	021b      	lsls	r3, r3, #8
 800103a:	429a      	cmp	r2, r3
 800103c:	d101      	bne.n	8001042 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 800103e:	2302      	movs	r3, #2
 8001040:	e0f3      	b.n	800122a <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	2240      	movs	r2, #64	; 0x40
 8001046:	5c9b      	ldrb	r3, [r3, r2]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d101      	bne.n	8001050 <HAL_I2C_IsDeviceReady+0x4c>
 800104c:	2302      	movs	r3, #2
 800104e:	e0ec      	b.n	800122a <HAL_I2C_IsDeviceReady+0x226>
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	2240      	movs	r2, #64	; 0x40
 8001054:	2101      	movs	r1, #1
 8001056:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	2241      	movs	r2, #65	; 0x41
 800105c:	2124      	movs	r1, #36	; 0x24
 800105e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2200      	movs	r2, #0
 8001064:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d107      	bne.n	800107e <HAL_I2C_IsDeviceReady+0x7a>
 800106e:	230a      	movs	r3, #10
 8001070:	18fb      	adds	r3, r7, r3
 8001072:	881b      	ldrh	r3, [r3, #0]
 8001074:	059b      	lsls	r3, r3, #22
 8001076:	0d9b      	lsrs	r3, r3, #22
 8001078:	4a6e      	ldr	r2, [pc, #440]	; (8001234 <HAL_I2C_IsDeviceReady+0x230>)
 800107a:	431a      	orrs	r2, r3
 800107c:	e007      	b.n	800108e <HAL_I2C_IsDeviceReady+0x8a>
 800107e:	230a      	movs	r3, #10
 8001080:	18fb      	adds	r3, r7, r3
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	059b      	lsls	r3, r3, #22
 8001086:	0d9b      	lsrs	r3, r3, #22
 8001088:	22a0      	movs	r2, #160	; 0xa0
 800108a:	0192      	lsls	r2, r2, #6
 800108c:	431a      	orrs	r2, r3
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001094:	f7ff fcbc 	bl	8000a10 <HAL_GetTick>
 8001098:	0003      	movs	r3, r0
 800109a:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	699b      	ldr	r3, [r3, #24]
 80010a2:	2220      	movs	r2, #32
 80010a4:	4013      	ands	r3, r2
 80010a6:	3b20      	subs	r3, #32
 80010a8:	425a      	negs	r2, r3
 80010aa:	4153      	adcs	r3, r2
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	231f      	movs	r3, #31
 80010b0:	18fb      	adds	r3, r7, r3
 80010b2:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	2210      	movs	r2, #16
 80010bc:	4013      	ands	r3, r2
 80010be:	3b10      	subs	r3, #16
 80010c0:	425a      	negs	r2, r3
 80010c2:	4153      	adcs	r3, r2
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	231e      	movs	r3, #30
 80010c8:	18fb      	adds	r3, r7, r3
 80010ca:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80010cc:	e035      	b.n	800113a <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	3301      	adds	r3, #1
 80010d2:	d01a      	beq.n	800110a <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80010d4:	f7ff fc9c 	bl	8000a10 <HAL_GetTick>
 80010d8:	0002      	movs	r2, r0
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	683a      	ldr	r2, [r7, #0]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d302      	bcc.n	80010ea <HAL_I2C_IsDeviceReady+0xe6>
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d10f      	bne.n	800110a <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	2241      	movs	r2, #65	; 0x41
 80010ee:	2120      	movs	r1, #32
 80010f0:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f6:	2220      	movs	r2, #32
 80010f8:	431a      	orrs	r2, r3
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	2240      	movs	r2, #64	; 0x40
 8001102:	2100      	movs	r1, #0
 8001104:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e08f      	b.n	800122a <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	2220      	movs	r2, #32
 8001112:	4013      	ands	r3, r2
 8001114:	3b20      	subs	r3, #32
 8001116:	425a      	negs	r2, r3
 8001118:	4153      	adcs	r3, r2
 800111a:	b2da      	uxtb	r2, r3
 800111c:	231f      	movs	r3, #31
 800111e:	18fb      	adds	r3, r7, r3
 8001120:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	2210      	movs	r2, #16
 800112a:	4013      	ands	r3, r2
 800112c:	3b10      	subs	r3, #16
 800112e:	425a      	negs	r2, r3
 8001130:	4153      	adcs	r3, r2
 8001132:	b2da      	uxtb	r2, r3
 8001134:	231e      	movs	r3, #30
 8001136:	18fb      	adds	r3, r7, r3
 8001138:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800113a:	231f      	movs	r3, #31
 800113c:	18fb      	adds	r3, r7, r3
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d104      	bne.n	800114e <HAL_I2C_IsDeviceReady+0x14a>
 8001144:	231e      	movs	r3, #30
 8001146:	18fb      	adds	r3, r7, r3
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d0bf      	beq.n	80010ce <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	2210      	movs	r2, #16
 8001156:	4013      	ands	r3, r2
 8001158:	2b10      	cmp	r3, #16
 800115a:	d01a      	beq.n	8001192 <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800115c:	683a      	ldr	r2, [r7, #0]
 800115e:	68f8      	ldr	r0, [r7, #12]
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	0013      	movs	r3, r2
 8001166:	2200      	movs	r2, #0
 8001168:	2120      	movs	r1, #32
 800116a:	f000 f865 	bl	8001238 <I2C_WaitOnFlagUntilTimeout>
 800116e:	1e03      	subs	r3, r0, #0
 8001170:	d001      	beq.n	8001176 <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e059      	b.n	800122a <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2220      	movs	r2, #32
 800117c:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	2241      	movs	r2, #65	; 0x41
 8001182:	2120      	movs	r1, #32
 8001184:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	2240      	movs	r2, #64	; 0x40
 800118a:	2100      	movs	r1, #0
 800118c:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 800118e:	2300      	movs	r3, #0
 8001190:	e04b      	b.n	800122a <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001192:	683a      	ldr	r2, [r7, #0]
 8001194:	68f8      	ldr	r0, [r7, #12]
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	0013      	movs	r3, r2
 800119c:	2200      	movs	r2, #0
 800119e:	2120      	movs	r1, #32
 80011a0:	f000 f84a 	bl	8001238 <I2C_WaitOnFlagUntilTimeout>
 80011a4:	1e03      	subs	r3, r0, #0
 80011a6:	d001      	beq.n	80011ac <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e03e      	b.n	800122a <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2210      	movs	r2, #16
 80011b2:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2220      	movs	r2, #32
 80011ba:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d119      	bne.n	80011f8 <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	685a      	ldr	r2, [r3, #4]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2180      	movs	r1, #128	; 0x80
 80011d0:	01c9      	lsls	r1, r1, #7
 80011d2:	430a      	orrs	r2, r1
 80011d4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80011d6:	683a      	ldr	r2, [r7, #0]
 80011d8:	68f8      	ldr	r0, [r7, #12]
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	0013      	movs	r3, r2
 80011e0:	2200      	movs	r2, #0
 80011e2:	2120      	movs	r1, #32
 80011e4:	f000 f828 	bl	8001238 <I2C_WaitOnFlagUntilTimeout>
 80011e8:	1e03      	subs	r3, r0, #0
 80011ea:	d001      	beq.n	80011f0 <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e01c      	b.n	800122a <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2220      	movs	r2, #32
 80011f6:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	3301      	adds	r3, #1
 80011fc:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	429a      	cmp	r2, r3
 8001204:	d900      	bls.n	8001208 <HAL_I2C_IsDeviceReady+0x204>
 8001206:	e72e      	b.n	8001066 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2241      	movs	r2, #65	; 0x41
 800120c:	2120      	movs	r1, #32
 800120e:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001214:	2220      	movs	r2, #32
 8001216:	431a      	orrs	r2, r3
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	2240      	movs	r2, #64	; 0x40
 8001220:	2100      	movs	r1, #0
 8001222:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e000      	b.n	800122a <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 8001228:	2302      	movs	r3, #2
  }
}
 800122a:	0018      	movs	r0, r3
 800122c:	46bd      	mov	sp, r7
 800122e:	b008      	add	sp, #32
 8001230:	bd80      	pop	{r7, pc}
 8001232:	46c0      	nop			; (mov r8, r8)
 8001234:	02002000 	.word	0x02002000

08001238 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	603b      	str	r3, [r7, #0]
 8001244:	1dfb      	adds	r3, r7, #7
 8001246:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001248:	e021      	b.n	800128e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	3301      	adds	r3, #1
 800124e:	d01e      	beq.n	800128e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001250:	f7ff fbde 	bl	8000a10 <HAL_GetTick>
 8001254:	0002      	movs	r2, r0
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	683a      	ldr	r2, [r7, #0]
 800125c:	429a      	cmp	r2, r3
 800125e:	d302      	bcc.n	8001266 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d113      	bne.n	800128e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	2220      	movs	r2, #32
 800126c:	431a      	orrs	r2, r3
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	2241      	movs	r2, #65	; 0x41
 8001276:	2120      	movs	r1, #32
 8001278:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	2242      	movs	r2, #66	; 0x42
 800127e:	2100      	movs	r1, #0
 8001280:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	2240      	movs	r2, #64	; 0x40
 8001286:	2100      	movs	r1, #0
 8001288:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e00f      	b.n	80012ae <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	68ba      	ldr	r2, [r7, #8]
 8001296:	4013      	ands	r3, r2
 8001298:	68ba      	ldr	r2, [r7, #8]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	425a      	negs	r2, r3
 800129e:	4153      	adcs	r3, r2
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	001a      	movs	r2, r3
 80012a4:	1dfb      	adds	r3, r7, #7
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d0ce      	beq.n	800124a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	0018      	movs	r0, r3
 80012b0:	46bd      	mov	sp, r7
 80012b2:	b004      	add	sp, #16
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2241      	movs	r2, #65	; 0x41
 80012c6:	5c9b      	ldrb	r3, [r3, r2]
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b20      	cmp	r3, #32
 80012cc:	d138      	bne.n	8001340 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2240      	movs	r2, #64	; 0x40
 80012d2:	5c9b      	ldrb	r3, [r3, r2]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d101      	bne.n	80012dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80012d8:	2302      	movs	r3, #2
 80012da:	e032      	b.n	8001342 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2240      	movs	r2, #64	; 0x40
 80012e0:	2101      	movs	r1, #1
 80012e2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2241      	movs	r2, #65	; 0x41
 80012e8:	2124      	movs	r1, #36	; 0x24
 80012ea:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2101      	movs	r1, #1
 80012f8:	438a      	bics	r2, r1
 80012fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4911      	ldr	r1, [pc, #68]	; (800134c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001308:	400a      	ands	r2, r1
 800130a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	6819      	ldr	r1, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	683a      	ldr	r2, [r7, #0]
 8001318:	430a      	orrs	r2, r1
 800131a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2101      	movs	r1, #1
 8001328:	430a      	orrs	r2, r1
 800132a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2241      	movs	r2, #65	; 0x41
 8001330:	2120      	movs	r1, #32
 8001332:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2240      	movs	r2, #64	; 0x40
 8001338:	2100      	movs	r1, #0
 800133a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800133c:	2300      	movs	r3, #0
 800133e:	e000      	b.n	8001342 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001340:	2302      	movs	r3, #2
  }
}
 8001342:	0018      	movs	r0, r3
 8001344:	46bd      	mov	sp, r7
 8001346:	b002      	add	sp, #8
 8001348:	bd80      	pop	{r7, pc}
 800134a:	46c0      	nop			; (mov r8, r8)
 800134c:	ffffefff 	.word	0xffffefff

08001350 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2241      	movs	r2, #65	; 0x41
 800135e:	5c9b      	ldrb	r3, [r3, r2]
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b20      	cmp	r3, #32
 8001364:	d139      	bne.n	80013da <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2240      	movs	r2, #64	; 0x40
 800136a:	5c9b      	ldrb	r3, [r3, r2]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d101      	bne.n	8001374 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001370:	2302      	movs	r3, #2
 8001372:	e033      	b.n	80013dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2240      	movs	r2, #64	; 0x40
 8001378:	2101      	movs	r1, #1
 800137a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2241      	movs	r2, #65	; 0x41
 8001380:	2124      	movs	r1, #36	; 0x24
 8001382:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2101      	movs	r1, #1
 8001390:	438a      	bics	r2, r1
 8001392:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4a11      	ldr	r2, [pc, #68]	; (80013e4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80013a0:	4013      	ands	r3, r2
 80013a2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	021b      	lsls	r3, r3, #8
 80013a8:	68fa      	ldr	r2, [r7, #12]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2101      	movs	r1, #1
 80013c2:	430a      	orrs	r2, r1
 80013c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2241      	movs	r2, #65	; 0x41
 80013ca:	2120      	movs	r1, #32
 80013cc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2240      	movs	r2, #64	; 0x40
 80013d2:	2100      	movs	r1, #0
 80013d4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80013d6:	2300      	movs	r3, #0
 80013d8:	e000      	b.n	80013dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80013da:	2302      	movs	r3, #2
  }
}
 80013dc:	0018      	movs	r0, r3
 80013de:	46bd      	mov	sp, r7
 80013e0:	b004      	add	sp, #16
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	fffff0ff 	.word	0xfffff0ff

080013e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80013f0:	4b19      	ldr	r3, [pc, #100]	; (8001458 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a19      	ldr	r2, [pc, #100]	; (800145c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80013f6:	4013      	ands	r3, r2
 80013f8:	0019      	movs	r1, r3
 80013fa:	4b17      	ldr	r3, [pc, #92]	; (8001458 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	430a      	orrs	r2, r1
 8001400:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	2380      	movs	r3, #128	; 0x80
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	429a      	cmp	r2, r3
 800140a:	d11f      	bne.n	800144c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800140c:	4b14      	ldr	r3, [pc, #80]	; (8001460 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	0013      	movs	r3, r2
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	189b      	adds	r3, r3, r2
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	4912      	ldr	r1, [pc, #72]	; (8001464 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800141a:	0018      	movs	r0, r3
 800141c:	f7fe fe7a 	bl	8000114 <__udivsi3>
 8001420:	0003      	movs	r3, r0
 8001422:	3301      	adds	r3, #1
 8001424:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001426:	e008      	b.n	800143a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	3b01      	subs	r3, #1
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	e001      	b.n	800143a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e009      	b.n	800144e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800143a:	4b07      	ldr	r3, [pc, #28]	; (8001458 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800143c:	695a      	ldr	r2, [r3, #20]
 800143e:	2380      	movs	r3, #128	; 0x80
 8001440:	00db      	lsls	r3, r3, #3
 8001442:	401a      	ands	r2, r3
 8001444:	2380      	movs	r3, #128	; 0x80
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	429a      	cmp	r2, r3
 800144a:	d0ed      	beq.n	8001428 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800144c:	2300      	movs	r3, #0
}
 800144e:	0018      	movs	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	b004      	add	sp, #16
 8001454:	bd80      	pop	{r7, pc}
 8001456:	46c0      	nop			; (mov r8, r8)
 8001458:	40007000 	.word	0x40007000
 800145c:	fffff9ff 	.word	0xfffff9ff
 8001460:	2000002c 	.word	0x2000002c
 8001464:	000f4240 	.word	0x000f4240

08001468 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800146c:	4b03      	ldr	r3, [pc, #12]	; (800147c <LL_RCC_GetAPB1Prescaler+0x14>)
 800146e:	689a      	ldr	r2, [r3, #8]
 8001470:	23e0      	movs	r3, #224	; 0xe0
 8001472:	01db      	lsls	r3, r3, #7
 8001474:	4013      	ands	r3, r2
}
 8001476:	0018      	movs	r0, r3
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40021000 	.word	0x40021000

08001480 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b088      	sub	sp, #32
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d101      	bne.n	8001492 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e2f3      	b.n	8001a7a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2201      	movs	r2, #1
 8001498:	4013      	ands	r3, r2
 800149a:	d100      	bne.n	800149e <HAL_RCC_OscConfig+0x1e>
 800149c:	e07c      	b.n	8001598 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800149e:	4bc3      	ldr	r3, [pc, #780]	; (80017ac <HAL_RCC_OscConfig+0x32c>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	2238      	movs	r2, #56	; 0x38
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014a8:	4bc0      	ldr	r3, [pc, #768]	; (80017ac <HAL_RCC_OscConfig+0x32c>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	2203      	movs	r2, #3
 80014ae:	4013      	ands	r3, r2
 80014b0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	2b10      	cmp	r3, #16
 80014b6:	d102      	bne.n	80014be <HAL_RCC_OscConfig+0x3e>
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	2b03      	cmp	r3, #3
 80014bc:	d002      	beq.n	80014c4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	2b08      	cmp	r3, #8
 80014c2:	d10b      	bne.n	80014dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c4:	4bb9      	ldr	r3, [pc, #740]	; (80017ac <HAL_RCC_OscConfig+0x32c>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	2380      	movs	r3, #128	; 0x80
 80014ca:	029b      	lsls	r3, r3, #10
 80014cc:	4013      	ands	r3, r2
 80014ce:	d062      	beq.n	8001596 <HAL_RCC_OscConfig+0x116>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d15e      	bne.n	8001596 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e2ce      	b.n	8001a7a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685a      	ldr	r2, [r3, #4]
 80014e0:	2380      	movs	r3, #128	; 0x80
 80014e2:	025b      	lsls	r3, r3, #9
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d107      	bne.n	80014f8 <HAL_RCC_OscConfig+0x78>
 80014e8:	4bb0      	ldr	r3, [pc, #704]	; (80017ac <HAL_RCC_OscConfig+0x32c>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	4baf      	ldr	r3, [pc, #700]	; (80017ac <HAL_RCC_OscConfig+0x32c>)
 80014ee:	2180      	movs	r1, #128	; 0x80
 80014f0:	0249      	lsls	r1, r1, #9
 80014f2:	430a      	orrs	r2, r1
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	e020      	b.n	800153a <HAL_RCC_OscConfig+0xba>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685a      	ldr	r2, [r3, #4]
 80014fc:	23a0      	movs	r3, #160	; 0xa0
 80014fe:	02db      	lsls	r3, r3, #11
 8001500:	429a      	cmp	r2, r3
 8001502:	d10e      	bne.n	8001522 <HAL_RCC_OscConfig+0xa2>
 8001504:	4ba9      	ldr	r3, [pc, #676]	; (80017ac <HAL_RCC_OscConfig+0x32c>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	4ba8      	ldr	r3, [pc, #672]	; (80017ac <HAL_RCC_OscConfig+0x32c>)
 800150a:	2180      	movs	r1, #128	; 0x80
 800150c:	02c9      	lsls	r1, r1, #11
 800150e:	430a      	orrs	r2, r1
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	4ba6      	ldr	r3, [pc, #664]	; (80017ac <HAL_RCC_OscConfig+0x32c>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	4ba5      	ldr	r3, [pc, #660]	; (80017ac <HAL_RCC_OscConfig+0x32c>)
 8001518:	2180      	movs	r1, #128	; 0x80
 800151a:	0249      	lsls	r1, r1, #9
 800151c:	430a      	orrs	r2, r1
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	e00b      	b.n	800153a <HAL_RCC_OscConfig+0xba>
 8001522:	4ba2      	ldr	r3, [pc, #648]	; (80017ac <HAL_RCC_OscConfig+0x32c>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	4ba1      	ldr	r3, [pc, #644]	; (80017ac <HAL_RCC_OscConfig+0x32c>)
 8001528:	49a1      	ldr	r1, [pc, #644]	; (80017b0 <HAL_RCC_OscConfig+0x330>)
 800152a:	400a      	ands	r2, r1
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	4b9f      	ldr	r3, [pc, #636]	; (80017ac <HAL_RCC_OscConfig+0x32c>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	4b9e      	ldr	r3, [pc, #632]	; (80017ac <HAL_RCC_OscConfig+0x32c>)
 8001534:	499f      	ldr	r1, [pc, #636]	; (80017b4 <HAL_RCC_OscConfig+0x334>)
 8001536:	400a      	ands	r2, r1
 8001538:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d014      	beq.n	800156c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001542:	f7ff fa65 	bl	8000a10 <HAL_GetTick>
 8001546:	0003      	movs	r3, r0
 8001548:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800154c:	f7ff fa60 	bl	8000a10 <HAL_GetTick>
 8001550:	0002      	movs	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b64      	cmp	r3, #100	; 0x64
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e28d      	b.n	8001a7a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800155e:	4b93      	ldr	r3, [pc, #588]	; (80017ac <HAL_RCC_OscConfig+0x32c>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	2380      	movs	r3, #128	; 0x80
 8001564:	029b      	lsls	r3, r3, #10
 8001566:	4013      	ands	r3, r2
 8001568:	d0f0      	beq.n	800154c <HAL_RCC_OscConfig+0xcc>
 800156a:	e015      	b.n	8001598 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156c:	f7ff fa50 	bl	8000a10 <HAL_GetTick>
 8001570:	0003      	movs	r3, r0
 8001572:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001574:	e008      	b.n	8001588 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001576:	f7ff fa4b 	bl	8000a10 <HAL_GetTick>
 800157a:	0002      	movs	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b64      	cmp	r3, #100	; 0x64
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e278      	b.n	8001a7a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001588:	4b88      	ldr	r3, [pc, #544]	; (80017ac <HAL_RCC_OscConfig+0x32c>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	2380      	movs	r3, #128	; 0x80
 800158e:	029b      	lsls	r3, r3, #10
 8001590:	4013      	ands	r3, r2
 8001592:	d1f0      	bne.n	8001576 <HAL_RCC_OscConfig+0xf6>
 8001594:	e000      	b.n	8001598 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001596:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2202      	movs	r2, #2
 800159e:	4013      	ands	r3, r2
 80015a0:	d100      	bne.n	80015a4 <HAL_RCC_OscConfig+0x124>
 80015a2:	e099      	b.n	80016d8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015a4:	4b81      	ldr	r3, [pc, #516]	; (80017ac <HAL_RCC_OscConfig+0x32c>)
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	2238      	movs	r2, #56	; 0x38
 80015aa:	4013      	ands	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015ae:	4b7f      	ldr	r3, [pc, #508]	; (80017ac <HAL_RCC_OscConfig+0x32c>)
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	2203      	movs	r2, #3
 80015b4:	4013      	ands	r3, r2
 80015b6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	2b10      	cmp	r3, #16
 80015bc:	d102      	bne.n	80015c4 <HAL_RCC_OscConfig+0x144>
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d002      	beq.n	80015ca <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d135      	bne.n	8001636 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015ca:	4b78      	ldr	r3, [pc, #480]	; (80017ac <HAL_RCC_OscConfig+0x32c>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	2380      	movs	r3, #128	; 0x80
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	4013      	ands	r3, r2
 80015d4:	d005      	beq.n	80015e2 <HAL_RCC_OscConfig+0x162>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d101      	bne.n	80015e2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e24b      	b.n	8001a7a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e2:	4b72      	ldr	r3, [pc, #456]	; (80017ac <HAL_RCC_OscConfig+0x32c>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	4a74      	ldr	r2, [pc, #464]	; (80017b8 <HAL_RCC_OscConfig+0x338>)
 80015e8:	4013      	ands	r3, r2
 80015ea:	0019      	movs	r1, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	695b      	ldr	r3, [r3, #20]
 80015f0:	021a      	lsls	r2, r3, #8
 80015f2:	4b6e      	ldr	r3, [pc, #440]	; (80017ac <HAL_RCC_OscConfig+0x32c>)
 80015f4:	430a      	orrs	r2, r1
 80015f6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d112      	bne.n	8001624 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80015fe:	4b6b      	ldr	r3, [pc, #428]	; (80017ac <HAL_RCC_OscConfig+0x32c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a6e      	ldr	r2, [pc, #440]	; (80017bc <HAL_RCC_OscConfig+0x33c>)
 8001604:	4013      	ands	r3, r2
 8001606:	0019      	movs	r1, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	691a      	ldr	r2, [r3, #16]
 800160c:	4b67      	ldr	r3, [pc, #412]	; (80017ac <HAL_RCC_OscConfig+0x32c>)
 800160e:	430a      	orrs	r2, r1
 8001610:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001612:	4b66      	ldr	r3, [pc, #408]	; (80017ac <HAL_RCC_OscConfig+0x32c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	0adb      	lsrs	r3, r3, #11
 8001618:	2207      	movs	r2, #7
 800161a:	4013      	ands	r3, r2
 800161c:	4a68      	ldr	r2, [pc, #416]	; (80017c0 <HAL_RCC_OscConfig+0x340>)
 800161e:	40da      	lsrs	r2, r3
 8001620:	4b68      	ldr	r3, [pc, #416]	; (80017c4 <HAL_RCC_OscConfig+0x344>)
 8001622:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001624:	4b68      	ldr	r3, [pc, #416]	; (80017c8 <HAL_RCC_OscConfig+0x348>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	0018      	movs	r0, r3
 800162a:	f7ff f995 	bl	8000958 <HAL_InitTick>
 800162e:	1e03      	subs	r3, r0, #0
 8001630:	d051      	beq.n	80016d6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e221      	b.n	8001a7a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d030      	beq.n	80016a0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800163e:	4b5b      	ldr	r3, [pc, #364]	; (80017ac <HAL_RCC_OscConfig+0x32c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a5e      	ldr	r2, [pc, #376]	; (80017bc <HAL_RCC_OscConfig+0x33c>)
 8001644:	4013      	ands	r3, r2
 8001646:	0019      	movs	r1, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	691a      	ldr	r2, [r3, #16]
 800164c:	4b57      	ldr	r3, [pc, #348]	; (80017ac <HAL_RCC_OscConfig+0x32c>)
 800164e:	430a      	orrs	r2, r1
 8001650:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001652:	4b56      	ldr	r3, [pc, #344]	; (80017ac <HAL_RCC_OscConfig+0x32c>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	4b55      	ldr	r3, [pc, #340]	; (80017ac <HAL_RCC_OscConfig+0x32c>)
 8001658:	2180      	movs	r1, #128	; 0x80
 800165a:	0049      	lsls	r1, r1, #1
 800165c:	430a      	orrs	r2, r1
 800165e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001660:	f7ff f9d6 	bl	8000a10 <HAL_GetTick>
 8001664:	0003      	movs	r3, r0
 8001666:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800166a:	f7ff f9d1 	bl	8000a10 <HAL_GetTick>
 800166e:	0002      	movs	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e1fe      	b.n	8001a7a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800167c:	4b4b      	ldr	r3, [pc, #300]	; (80017ac <HAL_RCC_OscConfig+0x32c>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	2380      	movs	r3, #128	; 0x80
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	4013      	ands	r3, r2
 8001686:	d0f0      	beq.n	800166a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001688:	4b48      	ldr	r3, [pc, #288]	; (80017ac <HAL_RCC_OscConfig+0x32c>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	4a4a      	ldr	r2, [pc, #296]	; (80017b8 <HAL_RCC_OscConfig+0x338>)
 800168e:	4013      	ands	r3, r2
 8001690:	0019      	movs	r1, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	021a      	lsls	r2, r3, #8
 8001698:	4b44      	ldr	r3, [pc, #272]	; (80017ac <HAL_RCC_OscConfig+0x32c>)
 800169a:	430a      	orrs	r2, r1
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	e01b      	b.n	80016d8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80016a0:	4b42      	ldr	r3, [pc, #264]	; (80017ac <HAL_RCC_OscConfig+0x32c>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4b41      	ldr	r3, [pc, #260]	; (80017ac <HAL_RCC_OscConfig+0x32c>)
 80016a6:	4949      	ldr	r1, [pc, #292]	; (80017cc <HAL_RCC_OscConfig+0x34c>)
 80016a8:	400a      	ands	r2, r1
 80016aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ac:	f7ff f9b0 	bl	8000a10 <HAL_GetTick>
 80016b0:	0003      	movs	r3, r0
 80016b2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016b4:	e008      	b.n	80016c8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016b6:	f7ff f9ab 	bl	8000a10 <HAL_GetTick>
 80016ba:	0002      	movs	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e1d8      	b.n	8001a7a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016c8:	4b38      	ldr	r3, [pc, #224]	; (80017ac <HAL_RCC_OscConfig+0x32c>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	2380      	movs	r3, #128	; 0x80
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	4013      	ands	r3, r2
 80016d2:	d1f0      	bne.n	80016b6 <HAL_RCC_OscConfig+0x236>
 80016d4:	e000      	b.n	80016d8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016d6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2208      	movs	r2, #8
 80016de:	4013      	ands	r3, r2
 80016e0:	d047      	beq.n	8001772 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80016e2:	4b32      	ldr	r3, [pc, #200]	; (80017ac <HAL_RCC_OscConfig+0x32c>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	2238      	movs	r2, #56	; 0x38
 80016e8:	4013      	ands	r3, r2
 80016ea:	2b18      	cmp	r3, #24
 80016ec:	d10a      	bne.n	8001704 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80016ee:	4b2f      	ldr	r3, [pc, #188]	; (80017ac <HAL_RCC_OscConfig+0x32c>)
 80016f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016f2:	2202      	movs	r2, #2
 80016f4:	4013      	ands	r3, r2
 80016f6:	d03c      	beq.n	8001772 <HAL_RCC_OscConfig+0x2f2>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d138      	bne.n	8001772 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e1ba      	b.n	8001a7a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d019      	beq.n	8001740 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800170c:	4b27      	ldr	r3, [pc, #156]	; (80017ac <HAL_RCC_OscConfig+0x32c>)
 800170e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001710:	4b26      	ldr	r3, [pc, #152]	; (80017ac <HAL_RCC_OscConfig+0x32c>)
 8001712:	2101      	movs	r1, #1
 8001714:	430a      	orrs	r2, r1
 8001716:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001718:	f7ff f97a 	bl	8000a10 <HAL_GetTick>
 800171c:	0003      	movs	r3, r0
 800171e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001720:	e008      	b.n	8001734 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001722:	f7ff f975 	bl	8000a10 <HAL_GetTick>
 8001726:	0002      	movs	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e1a2      	b.n	8001a7a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001734:	4b1d      	ldr	r3, [pc, #116]	; (80017ac <HAL_RCC_OscConfig+0x32c>)
 8001736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001738:	2202      	movs	r2, #2
 800173a:	4013      	ands	r3, r2
 800173c:	d0f1      	beq.n	8001722 <HAL_RCC_OscConfig+0x2a2>
 800173e:	e018      	b.n	8001772 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001740:	4b1a      	ldr	r3, [pc, #104]	; (80017ac <HAL_RCC_OscConfig+0x32c>)
 8001742:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001744:	4b19      	ldr	r3, [pc, #100]	; (80017ac <HAL_RCC_OscConfig+0x32c>)
 8001746:	2101      	movs	r1, #1
 8001748:	438a      	bics	r2, r1
 800174a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174c:	f7ff f960 	bl	8000a10 <HAL_GetTick>
 8001750:	0003      	movs	r3, r0
 8001752:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001756:	f7ff f95b 	bl	8000a10 <HAL_GetTick>
 800175a:	0002      	movs	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e188      	b.n	8001a7a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001768:	4b10      	ldr	r3, [pc, #64]	; (80017ac <HAL_RCC_OscConfig+0x32c>)
 800176a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800176c:	2202      	movs	r2, #2
 800176e:	4013      	ands	r3, r2
 8001770:	d1f1      	bne.n	8001756 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2204      	movs	r2, #4
 8001778:	4013      	ands	r3, r2
 800177a:	d100      	bne.n	800177e <HAL_RCC_OscConfig+0x2fe>
 800177c:	e0c6      	b.n	800190c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800177e:	231f      	movs	r3, #31
 8001780:	18fb      	adds	r3, r7, r3
 8001782:	2200      	movs	r2, #0
 8001784:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001786:	4b09      	ldr	r3, [pc, #36]	; (80017ac <HAL_RCC_OscConfig+0x32c>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	2238      	movs	r2, #56	; 0x38
 800178c:	4013      	ands	r3, r2
 800178e:	2b20      	cmp	r3, #32
 8001790:	d11e      	bne.n	80017d0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001792:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_RCC_OscConfig+0x32c>)
 8001794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001796:	2202      	movs	r2, #2
 8001798:	4013      	ands	r3, r2
 800179a:	d100      	bne.n	800179e <HAL_RCC_OscConfig+0x31e>
 800179c:	e0b6      	b.n	800190c <HAL_RCC_OscConfig+0x48c>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d000      	beq.n	80017a8 <HAL_RCC_OscConfig+0x328>
 80017a6:	e0b1      	b.n	800190c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e166      	b.n	8001a7a <HAL_RCC_OscConfig+0x5fa>
 80017ac:	40021000 	.word	0x40021000
 80017b0:	fffeffff 	.word	0xfffeffff
 80017b4:	fffbffff 	.word	0xfffbffff
 80017b8:	ffff80ff 	.word	0xffff80ff
 80017bc:	ffffc7ff 	.word	0xffffc7ff
 80017c0:	00f42400 	.word	0x00f42400
 80017c4:	2000002c 	.word	0x2000002c
 80017c8:	20000030 	.word	0x20000030
 80017cc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80017d0:	4bac      	ldr	r3, [pc, #688]	; (8001a84 <HAL_RCC_OscConfig+0x604>)
 80017d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017d4:	2380      	movs	r3, #128	; 0x80
 80017d6:	055b      	lsls	r3, r3, #21
 80017d8:	4013      	ands	r3, r2
 80017da:	d101      	bne.n	80017e0 <HAL_RCC_OscConfig+0x360>
 80017dc:	2301      	movs	r3, #1
 80017de:	e000      	b.n	80017e2 <HAL_RCC_OscConfig+0x362>
 80017e0:	2300      	movs	r3, #0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d011      	beq.n	800180a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80017e6:	4ba7      	ldr	r3, [pc, #668]	; (8001a84 <HAL_RCC_OscConfig+0x604>)
 80017e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017ea:	4ba6      	ldr	r3, [pc, #664]	; (8001a84 <HAL_RCC_OscConfig+0x604>)
 80017ec:	2180      	movs	r1, #128	; 0x80
 80017ee:	0549      	lsls	r1, r1, #21
 80017f0:	430a      	orrs	r2, r1
 80017f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80017f4:	4ba3      	ldr	r3, [pc, #652]	; (8001a84 <HAL_RCC_OscConfig+0x604>)
 80017f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017f8:	2380      	movs	r3, #128	; 0x80
 80017fa:	055b      	lsls	r3, r3, #21
 80017fc:	4013      	ands	r3, r2
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001802:	231f      	movs	r3, #31
 8001804:	18fb      	adds	r3, r7, r3
 8001806:	2201      	movs	r2, #1
 8001808:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800180a:	4b9f      	ldr	r3, [pc, #636]	; (8001a88 <HAL_RCC_OscConfig+0x608>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	2380      	movs	r3, #128	; 0x80
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	4013      	ands	r3, r2
 8001814:	d11a      	bne.n	800184c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001816:	4b9c      	ldr	r3, [pc, #624]	; (8001a88 <HAL_RCC_OscConfig+0x608>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	4b9b      	ldr	r3, [pc, #620]	; (8001a88 <HAL_RCC_OscConfig+0x608>)
 800181c:	2180      	movs	r1, #128	; 0x80
 800181e:	0049      	lsls	r1, r1, #1
 8001820:	430a      	orrs	r2, r1
 8001822:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001824:	f7ff f8f4 	bl	8000a10 <HAL_GetTick>
 8001828:	0003      	movs	r3, r0
 800182a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800182e:	f7ff f8ef 	bl	8000a10 <HAL_GetTick>
 8001832:	0002      	movs	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e11c      	b.n	8001a7a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001840:	4b91      	ldr	r3, [pc, #580]	; (8001a88 <HAL_RCC_OscConfig+0x608>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	2380      	movs	r3, #128	; 0x80
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	4013      	ands	r3, r2
 800184a:	d0f0      	beq.n	800182e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d106      	bne.n	8001862 <HAL_RCC_OscConfig+0x3e2>
 8001854:	4b8b      	ldr	r3, [pc, #556]	; (8001a84 <HAL_RCC_OscConfig+0x604>)
 8001856:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001858:	4b8a      	ldr	r3, [pc, #552]	; (8001a84 <HAL_RCC_OscConfig+0x604>)
 800185a:	2101      	movs	r1, #1
 800185c:	430a      	orrs	r2, r1
 800185e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001860:	e01c      	b.n	800189c <HAL_RCC_OscConfig+0x41c>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	2b05      	cmp	r3, #5
 8001868:	d10c      	bne.n	8001884 <HAL_RCC_OscConfig+0x404>
 800186a:	4b86      	ldr	r3, [pc, #536]	; (8001a84 <HAL_RCC_OscConfig+0x604>)
 800186c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800186e:	4b85      	ldr	r3, [pc, #532]	; (8001a84 <HAL_RCC_OscConfig+0x604>)
 8001870:	2104      	movs	r1, #4
 8001872:	430a      	orrs	r2, r1
 8001874:	65da      	str	r2, [r3, #92]	; 0x5c
 8001876:	4b83      	ldr	r3, [pc, #524]	; (8001a84 <HAL_RCC_OscConfig+0x604>)
 8001878:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800187a:	4b82      	ldr	r3, [pc, #520]	; (8001a84 <HAL_RCC_OscConfig+0x604>)
 800187c:	2101      	movs	r1, #1
 800187e:	430a      	orrs	r2, r1
 8001880:	65da      	str	r2, [r3, #92]	; 0x5c
 8001882:	e00b      	b.n	800189c <HAL_RCC_OscConfig+0x41c>
 8001884:	4b7f      	ldr	r3, [pc, #508]	; (8001a84 <HAL_RCC_OscConfig+0x604>)
 8001886:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001888:	4b7e      	ldr	r3, [pc, #504]	; (8001a84 <HAL_RCC_OscConfig+0x604>)
 800188a:	2101      	movs	r1, #1
 800188c:	438a      	bics	r2, r1
 800188e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001890:	4b7c      	ldr	r3, [pc, #496]	; (8001a84 <HAL_RCC_OscConfig+0x604>)
 8001892:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001894:	4b7b      	ldr	r3, [pc, #492]	; (8001a84 <HAL_RCC_OscConfig+0x604>)
 8001896:	2104      	movs	r1, #4
 8001898:	438a      	bics	r2, r1
 800189a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d014      	beq.n	80018ce <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a4:	f7ff f8b4 	bl	8000a10 <HAL_GetTick>
 80018a8:	0003      	movs	r3, r0
 80018aa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018ac:	e009      	b.n	80018c2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ae:	f7ff f8af 	bl	8000a10 <HAL_GetTick>
 80018b2:	0002      	movs	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	4a74      	ldr	r2, [pc, #464]	; (8001a8c <HAL_RCC_OscConfig+0x60c>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e0db      	b.n	8001a7a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018c2:	4b70      	ldr	r3, [pc, #448]	; (8001a84 <HAL_RCC_OscConfig+0x604>)
 80018c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c6:	2202      	movs	r2, #2
 80018c8:	4013      	ands	r3, r2
 80018ca:	d0f0      	beq.n	80018ae <HAL_RCC_OscConfig+0x42e>
 80018cc:	e013      	b.n	80018f6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ce:	f7ff f89f 	bl	8000a10 <HAL_GetTick>
 80018d2:	0003      	movs	r3, r0
 80018d4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018d6:	e009      	b.n	80018ec <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018d8:	f7ff f89a 	bl	8000a10 <HAL_GetTick>
 80018dc:	0002      	movs	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	4a6a      	ldr	r2, [pc, #424]	; (8001a8c <HAL_RCC_OscConfig+0x60c>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e0c6      	b.n	8001a7a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018ec:	4b65      	ldr	r3, [pc, #404]	; (8001a84 <HAL_RCC_OscConfig+0x604>)
 80018ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018f0:	2202      	movs	r2, #2
 80018f2:	4013      	ands	r3, r2
 80018f4:	d1f0      	bne.n	80018d8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80018f6:	231f      	movs	r3, #31
 80018f8:	18fb      	adds	r3, r7, r3
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d105      	bne.n	800190c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001900:	4b60      	ldr	r3, [pc, #384]	; (8001a84 <HAL_RCC_OscConfig+0x604>)
 8001902:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001904:	4b5f      	ldr	r3, [pc, #380]	; (8001a84 <HAL_RCC_OscConfig+0x604>)
 8001906:	4962      	ldr	r1, [pc, #392]	; (8001a90 <HAL_RCC_OscConfig+0x610>)
 8001908:	400a      	ands	r2, r1
 800190a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	69db      	ldr	r3, [r3, #28]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d100      	bne.n	8001916 <HAL_RCC_OscConfig+0x496>
 8001914:	e0b0      	b.n	8001a78 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001916:	4b5b      	ldr	r3, [pc, #364]	; (8001a84 <HAL_RCC_OscConfig+0x604>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	2238      	movs	r2, #56	; 0x38
 800191c:	4013      	ands	r3, r2
 800191e:	2b10      	cmp	r3, #16
 8001920:	d100      	bne.n	8001924 <HAL_RCC_OscConfig+0x4a4>
 8001922:	e078      	b.n	8001a16 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	69db      	ldr	r3, [r3, #28]
 8001928:	2b02      	cmp	r3, #2
 800192a:	d153      	bne.n	80019d4 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800192c:	4b55      	ldr	r3, [pc, #340]	; (8001a84 <HAL_RCC_OscConfig+0x604>)
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	4b54      	ldr	r3, [pc, #336]	; (8001a84 <HAL_RCC_OscConfig+0x604>)
 8001932:	4958      	ldr	r1, [pc, #352]	; (8001a94 <HAL_RCC_OscConfig+0x614>)
 8001934:	400a      	ands	r2, r1
 8001936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001938:	f7ff f86a 	bl	8000a10 <HAL_GetTick>
 800193c:	0003      	movs	r3, r0
 800193e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001942:	f7ff f865 	bl	8000a10 <HAL_GetTick>
 8001946:	0002      	movs	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e092      	b.n	8001a7a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001954:	4b4b      	ldr	r3, [pc, #300]	; (8001a84 <HAL_RCC_OscConfig+0x604>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	2380      	movs	r3, #128	; 0x80
 800195a:	049b      	lsls	r3, r3, #18
 800195c:	4013      	ands	r3, r2
 800195e:	d1f0      	bne.n	8001942 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001960:	4b48      	ldr	r3, [pc, #288]	; (8001a84 <HAL_RCC_OscConfig+0x604>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	4a4c      	ldr	r2, [pc, #304]	; (8001a98 <HAL_RCC_OscConfig+0x618>)
 8001966:	4013      	ands	r3, r2
 8001968:	0019      	movs	r1, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a1a      	ldr	r2, [r3, #32]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001972:	431a      	orrs	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001978:	021b      	lsls	r3, r3, #8
 800197a:	431a      	orrs	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001980:	431a      	orrs	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	431a      	orrs	r2, r3
 8001988:	4b3e      	ldr	r3, [pc, #248]	; (8001a84 <HAL_RCC_OscConfig+0x604>)
 800198a:	430a      	orrs	r2, r1
 800198c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800198e:	4b3d      	ldr	r3, [pc, #244]	; (8001a84 <HAL_RCC_OscConfig+0x604>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	4b3c      	ldr	r3, [pc, #240]	; (8001a84 <HAL_RCC_OscConfig+0x604>)
 8001994:	2180      	movs	r1, #128	; 0x80
 8001996:	0449      	lsls	r1, r1, #17
 8001998:	430a      	orrs	r2, r1
 800199a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800199c:	4b39      	ldr	r3, [pc, #228]	; (8001a84 <HAL_RCC_OscConfig+0x604>)
 800199e:	68da      	ldr	r2, [r3, #12]
 80019a0:	4b38      	ldr	r3, [pc, #224]	; (8001a84 <HAL_RCC_OscConfig+0x604>)
 80019a2:	2180      	movs	r1, #128	; 0x80
 80019a4:	0549      	lsls	r1, r1, #21
 80019a6:	430a      	orrs	r2, r1
 80019a8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019aa:	f7ff f831 	bl	8000a10 <HAL_GetTick>
 80019ae:	0003      	movs	r3, r0
 80019b0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b4:	f7ff f82c 	bl	8000a10 <HAL_GetTick>
 80019b8:	0002      	movs	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e059      	b.n	8001a7a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019c6:	4b2f      	ldr	r3, [pc, #188]	; (8001a84 <HAL_RCC_OscConfig+0x604>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	2380      	movs	r3, #128	; 0x80
 80019cc:	049b      	lsls	r3, r3, #18
 80019ce:	4013      	ands	r3, r2
 80019d0:	d0f0      	beq.n	80019b4 <HAL_RCC_OscConfig+0x534>
 80019d2:	e051      	b.n	8001a78 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019d4:	4b2b      	ldr	r3, [pc, #172]	; (8001a84 <HAL_RCC_OscConfig+0x604>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	4b2a      	ldr	r3, [pc, #168]	; (8001a84 <HAL_RCC_OscConfig+0x604>)
 80019da:	492e      	ldr	r1, [pc, #184]	; (8001a94 <HAL_RCC_OscConfig+0x614>)
 80019dc:	400a      	ands	r2, r1
 80019de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e0:	f7ff f816 	bl	8000a10 <HAL_GetTick>
 80019e4:	0003      	movs	r3, r0
 80019e6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019e8:	e008      	b.n	80019fc <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ea:	f7ff f811 	bl	8000a10 <HAL_GetTick>
 80019ee:	0002      	movs	r2, r0
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e03e      	b.n	8001a7a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019fc:	4b21      	ldr	r3, [pc, #132]	; (8001a84 <HAL_RCC_OscConfig+0x604>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	2380      	movs	r3, #128	; 0x80
 8001a02:	049b      	lsls	r3, r3, #18
 8001a04:	4013      	ands	r3, r2
 8001a06:	d1f0      	bne.n	80019ea <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001a08:	4b1e      	ldr	r3, [pc, #120]	; (8001a84 <HAL_RCC_OscConfig+0x604>)
 8001a0a:	68da      	ldr	r2, [r3, #12]
 8001a0c:	4b1d      	ldr	r3, [pc, #116]	; (8001a84 <HAL_RCC_OscConfig+0x604>)
 8001a0e:	4923      	ldr	r1, [pc, #140]	; (8001a9c <HAL_RCC_OscConfig+0x61c>)
 8001a10:	400a      	ands	r2, r1
 8001a12:	60da      	str	r2, [r3, #12]
 8001a14:	e030      	b.n	8001a78 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d101      	bne.n	8001a22 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e02b      	b.n	8001a7a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001a22:	4b18      	ldr	r3, [pc, #96]	; (8001a84 <HAL_RCC_OscConfig+0x604>)
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	2203      	movs	r2, #3
 8001a2c:	401a      	ands	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a1b      	ldr	r3, [r3, #32]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d11e      	bne.n	8001a74 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	2270      	movs	r2, #112	; 0x70
 8001a3a:	401a      	ands	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d117      	bne.n	8001a74 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a44:	697a      	ldr	r2, [r7, #20]
 8001a46:	23fe      	movs	r3, #254	; 0xfe
 8001a48:	01db      	lsls	r3, r3, #7
 8001a4a:	401a      	ands	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a50:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d10e      	bne.n	8001a74 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	23f8      	movs	r3, #248	; 0xf8
 8001a5a:	039b      	lsls	r3, r3, #14
 8001a5c:	401a      	ands	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d106      	bne.n	8001a74 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	0f5b      	lsrs	r3, r3, #29
 8001a6a:	075a      	lsls	r2, r3, #29
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d001      	beq.n	8001a78 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e000      	b.n	8001a7a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	b008      	add	sp, #32
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	46c0      	nop			; (mov r8, r8)
 8001a84:	40021000 	.word	0x40021000
 8001a88:	40007000 	.word	0x40007000
 8001a8c:	00001388 	.word	0x00001388
 8001a90:	efffffff 	.word	0xefffffff
 8001a94:	feffffff 	.word	0xfeffffff
 8001a98:	1fc1808c 	.word	0x1fc1808c
 8001a9c:	effefffc 	.word	0xeffefffc

08001aa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e0e9      	b.n	8001c88 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ab4:	4b76      	ldr	r3, [pc, #472]	; (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2207      	movs	r2, #7
 8001aba:	4013      	ands	r3, r2
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d91e      	bls.n	8001b00 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac2:	4b73      	ldr	r3, [pc, #460]	; (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2207      	movs	r2, #7
 8001ac8:	4393      	bics	r3, r2
 8001aca:	0019      	movs	r1, r3
 8001acc:	4b70      	ldr	r3, [pc, #448]	; (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ad4:	f7fe ff9c 	bl	8000a10 <HAL_GetTick>
 8001ad8:	0003      	movs	r3, r0
 8001ada:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001adc:	e009      	b.n	8001af2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ade:	f7fe ff97 	bl	8000a10 <HAL_GetTick>
 8001ae2:	0002      	movs	r2, r0
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	4a6a      	ldr	r2, [pc, #424]	; (8001c94 <HAL_RCC_ClockConfig+0x1f4>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e0ca      	b.n	8001c88 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001af2:	4b67      	ldr	r3, [pc, #412]	; (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2207      	movs	r2, #7
 8001af8:	4013      	ands	r3, r2
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d1ee      	bne.n	8001ade <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2202      	movs	r2, #2
 8001b06:	4013      	ands	r3, r2
 8001b08:	d015      	beq.n	8001b36 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2204      	movs	r2, #4
 8001b10:	4013      	ands	r3, r2
 8001b12:	d006      	beq.n	8001b22 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001b14:	4b60      	ldr	r3, [pc, #384]	; (8001c98 <HAL_RCC_ClockConfig+0x1f8>)
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	4b5f      	ldr	r3, [pc, #380]	; (8001c98 <HAL_RCC_ClockConfig+0x1f8>)
 8001b1a:	21e0      	movs	r1, #224	; 0xe0
 8001b1c:	01c9      	lsls	r1, r1, #7
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b22:	4b5d      	ldr	r3, [pc, #372]	; (8001c98 <HAL_RCC_ClockConfig+0x1f8>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	4a5d      	ldr	r2, [pc, #372]	; (8001c9c <HAL_RCC_ClockConfig+0x1fc>)
 8001b28:	4013      	ands	r3, r2
 8001b2a:	0019      	movs	r1, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689a      	ldr	r2, [r3, #8]
 8001b30:	4b59      	ldr	r3, [pc, #356]	; (8001c98 <HAL_RCC_ClockConfig+0x1f8>)
 8001b32:	430a      	orrs	r2, r1
 8001b34:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	d057      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d107      	bne.n	8001b58 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b48:	4b53      	ldr	r3, [pc, #332]	; (8001c98 <HAL_RCC_ClockConfig+0x1f8>)
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	2380      	movs	r3, #128	; 0x80
 8001b4e:	029b      	lsls	r3, r3, #10
 8001b50:	4013      	ands	r3, r2
 8001b52:	d12b      	bne.n	8001bac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e097      	b.n	8001c88 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d107      	bne.n	8001b70 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b60:	4b4d      	ldr	r3, [pc, #308]	; (8001c98 <HAL_RCC_ClockConfig+0x1f8>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	2380      	movs	r3, #128	; 0x80
 8001b66:	049b      	lsls	r3, r3, #18
 8001b68:	4013      	ands	r3, r2
 8001b6a:	d11f      	bne.n	8001bac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e08b      	b.n	8001c88 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d107      	bne.n	8001b88 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b78:	4b47      	ldr	r3, [pc, #284]	; (8001c98 <HAL_RCC_ClockConfig+0x1f8>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	2380      	movs	r3, #128	; 0x80
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	4013      	ands	r3, r2
 8001b82:	d113      	bne.n	8001bac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e07f      	b.n	8001c88 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2b03      	cmp	r3, #3
 8001b8e:	d106      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b90:	4b41      	ldr	r3, [pc, #260]	; (8001c98 <HAL_RCC_ClockConfig+0x1f8>)
 8001b92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b94:	2202      	movs	r2, #2
 8001b96:	4013      	ands	r3, r2
 8001b98:	d108      	bne.n	8001bac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e074      	b.n	8001c88 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b9e:	4b3e      	ldr	r3, [pc, #248]	; (8001c98 <HAL_RCC_ClockConfig+0x1f8>)
 8001ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	d101      	bne.n	8001bac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e06d      	b.n	8001c88 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bac:	4b3a      	ldr	r3, [pc, #232]	; (8001c98 <HAL_RCC_ClockConfig+0x1f8>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	2207      	movs	r2, #7
 8001bb2:	4393      	bics	r3, r2
 8001bb4:	0019      	movs	r1, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	4b37      	ldr	r3, [pc, #220]	; (8001c98 <HAL_RCC_ClockConfig+0x1f8>)
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bc0:	f7fe ff26 	bl	8000a10 <HAL_GetTick>
 8001bc4:	0003      	movs	r3, r0
 8001bc6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc8:	e009      	b.n	8001bde <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bca:	f7fe ff21 	bl	8000a10 <HAL_GetTick>
 8001bce:	0002      	movs	r2, r0
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	4a2f      	ldr	r2, [pc, #188]	; (8001c94 <HAL_RCC_ClockConfig+0x1f4>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e054      	b.n	8001c88 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bde:	4b2e      	ldr	r3, [pc, #184]	; (8001c98 <HAL_RCC_ClockConfig+0x1f8>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	2238      	movs	r2, #56	; 0x38
 8001be4:	401a      	ands	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d1ec      	bne.n	8001bca <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bf0:	4b27      	ldr	r3, [pc, #156]	; (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2207      	movs	r2, #7
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d21e      	bcs.n	8001c3c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bfe:	4b24      	ldr	r3, [pc, #144]	; (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2207      	movs	r2, #7
 8001c04:	4393      	bics	r3, r2
 8001c06:	0019      	movs	r1, r3
 8001c08:	4b21      	ldr	r3, [pc, #132]	; (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c10:	f7fe fefe 	bl	8000a10 <HAL_GetTick>
 8001c14:	0003      	movs	r3, r0
 8001c16:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c18:	e009      	b.n	8001c2e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c1a:	f7fe fef9 	bl	8000a10 <HAL_GetTick>
 8001c1e:	0002      	movs	r2, r0
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	4a1b      	ldr	r2, [pc, #108]	; (8001c94 <HAL_RCC_ClockConfig+0x1f4>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e02c      	b.n	8001c88 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c2e:	4b18      	ldr	r3, [pc, #96]	; (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2207      	movs	r2, #7
 8001c34:	4013      	ands	r3, r2
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d1ee      	bne.n	8001c1a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2204      	movs	r2, #4
 8001c42:	4013      	ands	r3, r2
 8001c44:	d009      	beq.n	8001c5a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c46:	4b14      	ldr	r3, [pc, #80]	; (8001c98 <HAL_RCC_ClockConfig+0x1f8>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	4a15      	ldr	r2, [pc, #84]	; (8001ca0 <HAL_RCC_ClockConfig+0x200>)
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	0019      	movs	r1, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	68da      	ldr	r2, [r3, #12]
 8001c54:	4b10      	ldr	r3, [pc, #64]	; (8001c98 <HAL_RCC_ClockConfig+0x1f8>)
 8001c56:	430a      	orrs	r2, r1
 8001c58:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001c5a:	f000 f829 	bl	8001cb0 <HAL_RCC_GetSysClockFreq>
 8001c5e:	0001      	movs	r1, r0
 8001c60:	4b0d      	ldr	r3, [pc, #52]	; (8001c98 <HAL_RCC_ClockConfig+0x1f8>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	0a1b      	lsrs	r3, r3, #8
 8001c66:	220f      	movs	r2, #15
 8001c68:	401a      	ands	r2, r3
 8001c6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ca4 <HAL_RCC_ClockConfig+0x204>)
 8001c6c:	0092      	lsls	r2, r2, #2
 8001c6e:	58d3      	ldr	r3, [r2, r3]
 8001c70:	221f      	movs	r2, #31
 8001c72:	4013      	ands	r3, r2
 8001c74:	000a      	movs	r2, r1
 8001c76:	40da      	lsrs	r2, r3
 8001c78:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <HAL_RCC_ClockConfig+0x208>)
 8001c7a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001c7c:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <HAL_RCC_ClockConfig+0x20c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	0018      	movs	r0, r3
 8001c82:	f7fe fe69 	bl	8000958 <HAL_InitTick>
 8001c86:	0003      	movs	r3, r0
}
 8001c88:	0018      	movs	r0, r3
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	b004      	add	sp, #16
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40022000 	.word	0x40022000
 8001c94:	00001388 	.word	0x00001388
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	fffff0ff 	.word	0xfffff0ff
 8001ca0:	ffff8fff 	.word	0xffff8fff
 8001ca4:	0800336c 	.word	0x0800336c
 8001ca8:	2000002c 	.word	0x2000002c
 8001cac:	20000030 	.word	0x20000030

08001cb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cb6:	4b3c      	ldr	r3, [pc, #240]	; (8001da8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	2238      	movs	r2, #56	; 0x38
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	d10f      	bne.n	8001ce0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001cc0:	4b39      	ldr	r3, [pc, #228]	; (8001da8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	0adb      	lsrs	r3, r3, #11
 8001cc6:	2207      	movs	r2, #7
 8001cc8:	4013      	ands	r3, r2
 8001cca:	2201      	movs	r2, #1
 8001ccc:	409a      	lsls	r2, r3
 8001cce:	0013      	movs	r3, r2
 8001cd0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001cd2:	6839      	ldr	r1, [r7, #0]
 8001cd4:	4835      	ldr	r0, [pc, #212]	; (8001dac <HAL_RCC_GetSysClockFreq+0xfc>)
 8001cd6:	f7fe fa1d 	bl	8000114 <__udivsi3>
 8001cda:	0003      	movs	r3, r0
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	e05d      	b.n	8001d9c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ce0:	4b31      	ldr	r3, [pc, #196]	; (8001da8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	2238      	movs	r2, #56	; 0x38
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	2b08      	cmp	r3, #8
 8001cea:	d102      	bne.n	8001cf2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cec:	4b30      	ldr	r3, [pc, #192]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x100>)
 8001cee:	613b      	str	r3, [r7, #16]
 8001cf0:	e054      	b.n	8001d9c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cf2:	4b2d      	ldr	r3, [pc, #180]	; (8001da8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	2238      	movs	r2, #56	; 0x38
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	2b10      	cmp	r3, #16
 8001cfc:	d138      	bne.n	8001d70 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001cfe:	4b2a      	ldr	r3, [pc, #168]	; (8001da8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	2203      	movs	r2, #3
 8001d04:	4013      	ands	r3, r2
 8001d06:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d08:	4b27      	ldr	r3, [pc, #156]	; (8001da8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	091b      	lsrs	r3, r3, #4
 8001d0e:	2207      	movs	r2, #7
 8001d10:	4013      	ands	r3, r2
 8001d12:	3301      	adds	r3, #1
 8001d14:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2b03      	cmp	r3, #3
 8001d1a:	d10d      	bne.n	8001d38 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d1c:	68b9      	ldr	r1, [r7, #8]
 8001d1e:	4824      	ldr	r0, [pc, #144]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x100>)
 8001d20:	f7fe f9f8 	bl	8000114 <__udivsi3>
 8001d24:	0003      	movs	r3, r0
 8001d26:	0019      	movs	r1, r3
 8001d28:	4b1f      	ldr	r3, [pc, #124]	; (8001da8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	0a1b      	lsrs	r3, r3, #8
 8001d2e:	227f      	movs	r2, #127	; 0x7f
 8001d30:	4013      	ands	r3, r2
 8001d32:	434b      	muls	r3, r1
 8001d34:	617b      	str	r3, [r7, #20]
        break;
 8001d36:	e00d      	b.n	8001d54 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001d38:	68b9      	ldr	r1, [r7, #8]
 8001d3a:	481c      	ldr	r0, [pc, #112]	; (8001dac <HAL_RCC_GetSysClockFreq+0xfc>)
 8001d3c:	f7fe f9ea 	bl	8000114 <__udivsi3>
 8001d40:	0003      	movs	r3, r0
 8001d42:	0019      	movs	r1, r3
 8001d44:	4b18      	ldr	r3, [pc, #96]	; (8001da8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	0a1b      	lsrs	r3, r3, #8
 8001d4a:	227f      	movs	r2, #127	; 0x7f
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	434b      	muls	r3, r1
 8001d50:	617b      	str	r3, [r7, #20]
        break;
 8001d52:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001d54:	4b14      	ldr	r3, [pc, #80]	; (8001da8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	0f5b      	lsrs	r3, r3, #29
 8001d5a:	2207      	movs	r2, #7
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	3301      	adds	r3, #1
 8001d60:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001d62:	6879      	ldr	r1, [r7, #4]
 8001d64:	6978      	ldr	r0, [r7, #20]
 8001d66:	f7fe f9d5 	bl	8000114 <__udivsi3>
 8001d6a:	0003      	movs	r3, r0
 8001d6c:	613b      	str	r3, [r7, #16]
 8001d6e:	e015      	b.n	8001d9c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001d70:	4b0d      	ldr	r3, [pc, #52]	; (8001da8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	2238      	movs	r2, #56	; 0x38
 8001d76:	4013      	ands	r3, r2
 8001d78:	2b20      	cmp	r3, #32
 8001d7a:	d103      	bne.n	8001d84 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001d7c:	2380      	movs	r3, #128	; 0x80
 8001d7e:	021b      	lsls	r3, r3, #8
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	e00b      	b.n	8001d9c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001d84:	4b08      	ldr	r3, [pc, #32]	; (8001da8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	2238      	movs	r2, #56	; 0x38
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	2b18      	cmp	r3, #24
 8001d8e:	d103      	bne.n	8001d98 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001d90:	23fa      	movs	r3, #250	; 0xfa
 8001d92:	01db      	lsls	r3, r3, #7
 8001d94:	613b      	str	r3, [r7, #16]
 8001d96:	e001      	b.n	8001d9c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001d9c:	693b      	ldr	r3, [r7, #16]
}
 8001d9e:	0018      	movs	r0, r3
 8001da0:	46bd      	mov	sp, r7
 8001da2:	b006      	add	sp, #24
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	46c0      	nop			; (mov r8, r8)
 8001da8:	40021000 	.word	0x40021000
 8001dac:	00f42400 	.word	0x00f42400
 8001db0:	007a1200 	.word	0x007a1200

08001db4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001db8:	4b02      	ldr	r3, [pc, #8]	; (8001dc4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001dba:	681b      	ldr	r3, [r3, #0]
}
 8001dbc:	0018      	movs	r0, r3
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	46c0      	nop			; (mov r8, r8)
 8001dc4:	2000002c 	.word	0x2000002c

08001dc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dc8:	b5b0      	push	{r4, r5, r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001dcc:	f7ff fff2 	bl	8001db4 <HAL_RCC_GetHCLKFreq>
 8001dd0:	0004      	movs	r4, r0
 8001dd2:	f7ff fb49 	bl	8001468 <LL_RCC_GetAPB1Prescaler>
 8001dd6:	0003      	movs	r3, r0
 8001dd8:	0b1a      	lsrs	r2, r3, #12
 8001dda:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ddc:	0092      	lsls	r2, r2, #2
 8001dde:	58d3      	ldr	r3, [r2, r3]
 8001de0:	221f      	movs	r2, #31
 8001de2:	4013      	ands	r3, r2
 8001de4:	40dc      	lsrs	r4, r3
 8001de6:	0023      	movs	r3, r4
}
 8001de8:	0018      	movs	r0, r3
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bdb0      	pop	{r4, r5, r7, pc}
 8001dee:	46c0      	nop			; (mov r8, r8)
 8001df0:	080033ac 	.word	0x080033ac

08001df4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001dfc:	2313      	movs	r3, #19
 8001dfe:	18fb      	adds	r3, r7, r3
 8001e00:	2200      	movs	r2, #0
 8001e02:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e04:	2312      	movs	r3, #18
 8001e06:	18fb      	adds	r3, r7, r3
 8001e08:	2200      	movs	r2, #0
 8001e0a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	2380      	movs	r3, #128	; 0x80
 8001e12:	029b      	lsls	r3, r3, #10
 8001e14:	4013      	ands	r3, r2
 8001e16:	d100      	bne.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001e18:	e0a3      	b.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e1a:	2011      	movs	r0, #17
 8001e1c:	183b      	adds	r3, r7, r0
 8001e1e:	2200      	movs	r2, #0
 8001e20:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e22:	4b7f      	ldr	r3, [pc, #508]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001e24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e26:	2380      	movs	r3, #128	; 0x80
 8001e28:	055b      	lsls	r3, r3, #21
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	d110      	bne.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e2e:	4b7c      	ldr	r3, [pc, #496]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001e30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e32:	4b7b      	ldr	r3, [pc, #492]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	0549      	lsls	r1, r1, #21
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e3c:	4b78      	ldr	r3, [pc, #480]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001e3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e40:	2380      	movs	r3, #128	; 0x80
 8001e42:	055b      	lsls	r3, r3, #21
 8001e44:	4013      	ands	r3, r2
 8001e46:	60bb      	str	r3, [r7, #8]
 8001e48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e4a:	183b      	adds	r3, r7, r0
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e50:	4b74      	ldr	r3, [pc, #464]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	4b73      	ldr	r3, [pc, #460]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e56:	2180      	movs	r1, #128	; 0x80
 8001e58:	0049      	lsls	r1, r1, #1
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e5e:	f7fe fdd7 	bl	8000a10 <HAL_GetTick>
 8001e62:	0003      	movs	r3, r0
 8001e64:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e66:	e00b      	b.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e68:	f7fe fdd2 	bl	8000a10 <HAL_GetTick>
 8001e6c:	0002      	movs	r2, r0
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d904      	bls.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001e76:	2313      	movs	r3, #19
 8001e78:	18fb      	adds	r3, r7, r3
 8001e7a:	2203      	movs	r2, #3
 8001e7c:	701a      	strb	r2, [r3, #0]
        break;
 8001e7e:	e005      	b.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e80:	4b68      	ldr	r3, [pc, #416]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	2380      	movs	r3, #128	; 0x80
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	4013      	ands	r3, r2
 8001e8a:	d0ed      	beq.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001e8c:	2313      	movs	r3, #19
 8001e8e:	18fb      	adds	r3, r7, r3
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d154      	bne.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e96:	4b62      	ldr	r3, [pc, #392]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001e98:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e9a:	23c0      	movs	r3, #192	; 0xc0
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d019      	beq.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	697a      	ldr	r2, [r7, #20]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d014      	beq.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001eb2:	4b5b      	ldr	r3, [pc, #364]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb6:	4a5c      	ldr	r2, [pc, #368]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001eb8:	4013      	ands	r3, r2
 8001eba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001ebc:	4b58      	ldr	r3, [pc, #352]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001ebe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ec0:	4b57      	ldr	r3, [pc, #348]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001ec2:	2180      	movs	r1, #128	; 0x80
 8001ec4:	0249      	lsls	r1, r1, #9
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001eca:	4b55      	ldr	r3, [pc, #340]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001ecc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ece:	4b54      	ldr	r3, [pc, #336]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001ed0:	4956      	ldr	r1, [pc, #344]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8001ed2:	400a      	ands	r2, r1
 8001ed4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001ed6:	4b52      	ldr	r3, [pc, #328]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	d016      	beq.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee4:	f7fe fd94 	bl	8000a10 <HAL_GetTick>
 8001ee8:	0003      	movs	r3, r0
 8001eea:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eec:	e00c      	b.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eee:	f7fe fd8f 	bl	8000a10 <HAL_GetTick>
 8001ef2:	0002      	movs	r2, r0
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	4a4d      	ldr	r2, [pc, #308]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d904      	bls.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001efe:	2313      	movs	r3, #19
 8001f00:	18fb      	adds	r3, r7, r3
 8001f02:	2203      	movs	r2, #3
 8001f04:	701a      	strb	r2, [r3, #0]
            break;
 8001f06:	e004      	b.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f08:	4b45      	ldr	r3, [pc, #276]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0c:	2202      	movs	r2, #2
 8001f0e:	4013      	ands	r3, r2
 8001f10:	d0ed      	beq.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001f12:	2313      	movs	r3, #19
 8001f14:	18fb      	adds	r3, r7, r3
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d10a      	bne.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f1c:	4b40      	ldr	r3, [pc, #256]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f20:	4a41      	ldr	r2, [pc, #260]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001f22:	4013      	ands	r3, r2
 8001f24:	0019      	movs	r1, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	695a      	ldr	r2, [r3, #20]
 8001f2a:	4b3d      	ldr	r3, [pc, #244]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f30:	e00c      	b.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f32:	2312      	movs	r3, #18
 8001f34:	18fb      	adds	r3, r7, r3
 8001f36:	2213      	movs	r2, #19
 8001f38:	18ba      	adds	r2, r7, r2
 8001f3a:	7812      	ldrb	r2, [r2, #0]
 8001f3c:	701a      	strb	r2, [r3, #0]
 8001f3e:	e005      	b.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f40:	2312      	movs	r3, #18
 8001f42:	18fb      	adds	r3, r7, r3
 8001f44:	2213      	movs	r2, #19
 8001f46:	18ba      	adds	r2, r7, r2
 8001f48:	7812      	ldrb	r2, [r2, #0]
 8001f4a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f4c:	2311      	movs	r3, #17
 8001f4e:	18fb      	adds	r3, r7, r3
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d105      	bne.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f56:	4b32      	ldr	r3, [pc, #200]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001f58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f5a:	4b31      	ldr	r3, [pc, #196]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001f5c:	4935      	ldr	r1, [pc, #212]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001f5e:	400a      	ands	r2, r1
 8001f60:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2201      	movs	r2, #1
 8001f68:	4013      	ands	r3, r2
 8001f6a:	d009      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f6c:	4b2c      	ldr	r3, [pc, #176]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f70:	2203      	movs	r2, #3
 8001f72:	4393      	bics	r3, r2
 8001f74:	0019      	movs	r1, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	4b29      	ldr	r3, [pc, #164]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2220      	movs	r2, #32
 8001f86:	4013      	ands	r3, r2
 8001f88:	d009      	beq.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f8a:	4b25      	ldr	r3, [pc, #148]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f8e:	4a2a      	ldr	r2, [pc, #168]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001f90:	4013      	ands	r3, r2
 8001f92:	0019      	movs	r1, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	4b21      	ldr	r3, [pc, #132]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	2380      	movs	r3, #128	; 0x80
 8001fa4:	01db      	lsls	r3, r3, #7
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	d015      	beq.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001faa:	4b1d      	ldr	r3, [pc, #116]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	0899      	lsrs	r1, r3, #2
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	691a      	ldr	r2, [r3, #16]
 8001fb6:	4b1a      	ldr	r3, [pc, #104]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	691a      	ldr	r2, [r3, #16]
 8001fc0:	2380      	movs	r3, #128	; 0x80
 8001fc2:	05db      	lsls	r3, r3, #23
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d106      	bne.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001fc8:	4b15      	ldr	r3, [pc, #84]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001fca:	68da      	ldr	r2, [r3, #12]
 8001fcc:	4b14      	ldr	r3, [pc, #80]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001fce:	2180      	movs	r1, #128	; 0x80
 8001fd0:	0249      	lsls	r1, r1, #9
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	2380      	movs	r3, #128	; 0x80
 8001fdc:	011b      	lsls	r3, r3, #4
 8001fde:	4013      	ands	r3, r2
 8001fe0:	d016      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001fe2:	4b0f      	ldr	r3, [pc, #60]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe6:	4a15      	ldr	r2, [pc, #84]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001fe8:	4013      	ands	r3, r2
 8001fea:	0019      	movs	r1, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68da      	ldr	r2, [r3, #12]
 8001ff0:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	2380      	movs	r3, #128	; 0x80
 8001ffc:	01db      	lsls	r3, r3, #7
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d106      	bne.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002002:	4b07      	ldr	r3, [pc, #28]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002004:	68da      	ldr	r2, [r3, #12]
 8002006:	4b06      	ldr	r3, [pc, #24]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002008:	2180      	movs	r1, #128	; 0x80
 800200a:	0249      	lsls	r1, r1, #9
 800200c:	430a      	orrs	r2, r1
 800200e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002010:	2312      	movs	r3, #18
 8002012:	18fb      	adds	r3, r7, r3
 8002014:	781b      	ldrb	r3, [r3, #0]
}
 8002016:	0018      	movs	r0, r3
 8002018:	46bd      	mov	sp, r7
 800201a:	b006      	add	sp, #24
 800201c:	bd80      	pop	{r7, pc}
 800201e:	46c0      	nop			; (mov r8, r8)
 8002020:	40021000 	.word	0x40021000
 8002024:	40007000 	.word	0x40007000
 8002028:	fffffcff 	.word	0xfffffcff
 800202c:	fffeffff 	.word	0xfffeffff
 8002030:	00001388 	.word	0x00001388
 8002034:	efffffff 	.word	0xefffffff
 8002038:	ffffcfff 	.word	0xffffcfff
 800203c:	ffff3fff 	.word	0xffff3fff

08002040 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e0a8      	b.n	80021a4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002056:	2b00      	cmp	r3, #0
 8002058:	d109      	bne.n	800206e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	2382      	movs	r3, #130	; 0x82
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	429a      	cmp	r2, r3
 8002064:	d009      	beq.n	800207a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	61da      	str	r2, [r3, #28]
 800206c:	e005      	b.n	800207a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	225d      	movs	r2, #93	; 0x5d
 8002084:	5c9b      	ldrb	r3, [r3, r2]
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2b00      	cmp	r3, #0
 800208a:	d107      	bne.n	800209c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	225c      	movs	r2, #92	; 0x5c
 8002090:	2100      	movs	r1, #0
 8002092:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	0018      	movs	r0, r3
 8002098:	f7fe fab0 	bl	80005fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	225d      	movs	r2, #93	; 0x5d
 80020a0:	2102      	movs	r1, #2
 80020a2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2140      	movs	r1, #64	; 0x40
 80020b0:	438a      	bics	r2, r1
 80020b2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68da      	ldr	r2, [r3, #12]
 80020b8:	23e0      	movs	r3, #224	; 0xe0
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	429a      	cmp	r2, r3
 80020be:	d902      	bls.n	80020c6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80020c0:	2300      	movs	r3, #0
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	e002      	b.n	80020cc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80020c6:	2380      	movs	r3, #128	; 0x80
 80020c8:	015b      	lsls	r3, r3, #5
 80020ca:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68da      	ldr	r2, [r3, #12]
 80020d0:	23f0      	movs	r3, #240	; 0xf0
 80020d2:	011b      	lsls	r3, r3, #4
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d008      	beq.n	80020ea <HAL_SPI_Init+0xaa>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68da      	ldr	r2, [r3, #12]
 80020dc:	23e0      	movs	r3, #224	; 0xe0
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d002      	beq.n	80020ea <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685a      	ldr	r2, [r3, #4]
 80020ee:	2382      	movs	r3, #130	; 0x82
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	401a      	ands	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6899      	ldr	r1, [r3, #8]
 80020f8:	2384      	movs	r3, #132	; 0x84
 80020fa:	021b      	lsls	r3, r3, #8
 80020fc:	400b      	ands	r3, r1
 80020fe:	431a      	orrs	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	2102      	movs	r1, #2
 8002106:	400b      	ands	r3, r1
 8002108:	431a      	orrs	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	2101      	movs	r1, #1
 8002110:	400b      	ands	r3, r1
 8002112:	431a      	orrs	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6999      	ldr	r1, [r3, #24]
 8002118:	2380      	movs	r3, #128	; 0x80
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	400b      	ands	r3, r1
 800211e:	431a      	orrs	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	69db      	ldr	r3, [r3, #28]
 8002124:	2138      	movs	r1, #56	; 0x38
 8002126:	400b      	ands	r3, r1
 8002128:	431a      	orrs	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	2180      	movs	r1, #128	; 0x80
 8002130:	400b      	ands	r3, r1
 8002132:	431a      	orrs	r2, r3
 8002134:	0011      	movs	r1, r2
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800213a:	2380      	movs	r3, #128	; 0x80
 800213c:	019b      	lsls	r3, r3, #6
 800213e:	401a      	ands	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	430a      	orrs	r2, r1
 8002146:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	0c1b      	lsrs	r3, r3, #16
 800214e:	2204      	movs	r2, #4
 8002150:	401a      	ands	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002156:	2110      	movs	r1, #16
 8002158:	400b      	ands	r3, r1
 800215a:	431a      	orrs	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002160:	2108      	movs	r1, #8
 8002162:	400b      	ands	r3, r1
 8002164:	431a      	orrs	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68d9      	ldr	r1, [r3, #12]
 800216a:	23f0      	movs	r3, #240	; 0xf0
 800216c:	011b      	lsls	r3, r3, #4
 800216e:	400b      	ands	r3, r1
 8002170:	431a      	orrs	r2, r3
 8002172:	0011      	movs	r1, r2
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	2380      	movs	r3, #128	; 0x80
 8002178:	015b      	lsls	r3, r3, #5
 800217a:	401a      	ands	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	430a      	orrs	r2, r1
 8002182:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	69da      	ldr	r2, [r3, #28]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4907      	ldr	r1, [pc, #28]	; (80021ac <HAL_SPI_Init+0x16c>)
 8002190:	400a      	ands	r2, r1
 8002192:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	225d      	movs	r2, #93	; 0x5d
 800219e:	2101      	movs	r1, #1
 80021a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	0018      	movs	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	b004      	add	sp, #16
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	fffff7ff 	.word	0xfffff7ff

080021b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e046      	b.n	8002250 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2284      	movs	r2, #132	; 0x84
 80021c6:	589b      	ldr	r3, [r3, r2]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d107      	bne.n	80021dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2280      	movs	r2, #128	; 0x80
 80021d0:	2100      	movs	r1, #0
 80021d2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	0018      	movs	r0, r3
 80021d8:	f7fe fb2a 	bl	8000830 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2284      	movs	r2, #132	; 0x84
 80021e0:	2124      	movs	r1, #36	; 0x24
 80021e2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2101      	movs	r1, #1
 80021f0:	438a      	bics	r2, r1
 80021f2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	0018      	movs	r0, r3
 80021f8:	f000 f8dc 	bl	80023b4 <UART_SetConfig>
 80021fc:	0003      	movs	r3, r0
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d101      	bne.n	8002206 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e024      	b.n	8002250 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	0018      	movs	r0, r3
 8002212:	f000 fa39 	bl	8002688 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	685a      	ldr	r2, [r3, #4]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	490d      	ldr	r1, [pc, #52]	; (8002258 <HAL_UART_Init+0xa8>)
 8002222:	400a      	ands	r2, r1
 8002224:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	212a      	movs	r1, #42	; 0x2a
 8002232:	438a      	bics	r2, r1
 8002234:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2101      	movs	r1, #1
 8002242:	430a      	orrs	r2, r1
 8002244:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	0018      	movs	r0, r3
 800224a:	f000 fad1 	bl	80027f0 <UART_CheckIdleState>
 800224e:	0003      	movs	r3, r0
}
 8002250:	0018      	movs	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	b002      	add	sp, #8
 8002256:	bd80      	pop	{r7, pc}
 8002258:	ffffb7ff 	.word	0xffffb7ff

0800225c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b08a      	sub	sp, #40	; 0x28
 8002260:	af02      	add	r7, sp, #8
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	603b      	str	r3, [r7, #0]
 8002268:	1dbb      	adds	r3, r7, #6
 800226a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2284      	movs	r2, #132	; 0x84
 8002270:	589b      	ldr	r3, [r3, r2]
 8002272:	2b20      	cmp	r3, #32
 8002274:	d000      	beq.n	8002278 <HAL_UART_Transmit+0x1c>
 8002276:	e097      	b.n	80023a8 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <HAL_UART_Transmit+0x2a>
 800227e:	1dbb      	adds	r3, r7, #6
 8002280:	881b      	ldrh	r3, [r3, #0]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e08f      	b.n	80023aa <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	689a      	ldr	r2, [r3, #8]
 800228e:	2380      	movs	r3, #128	; 0x80
 8002290:	015b      	lsls	r3, r3, #5
 8002292:	429a      	cmp	r2, r3
 8002294:	d109      	bne.n	80022aa <HAL_UART_Transmit+0x4e>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d105      	bne.n	80022aa <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	2201      	movs	r2, #1
 80022a2:	4013      	ands	r3, r2
 80022a4:	d001      	beq.n	80022aa <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e07f      	b.n	80023aa <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2280      	movs	r2, #128	; 0x80
 80022ae:	5c9b      	ldrb	r3, [r3, r2]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d101      	bne.n	80022b8 <HAL_UART_Transmit+0x5c>
 80022b4:	2302      	movs	r3, #2
 80022b6:	e078      	b.n	80023aa <HAL_UART_Transmit+0x14e>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2280      	movs	r2, #128	; 0x80
 80022bc:	2101      	movs	r1, #1
 80022be:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	228c      	movs	r2, #140	; 0x8c
 80022c4:	2100      	movs	r1, #0
 80022c6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2284      	movs	r2, #132	; 0x84
 80022cc:	2121      	movs	r1, #33	; 0x21
 80022ce:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022d0:	f7fe fb9e 	bl	8000a10 <HAL_GetTick>
 80022d4:	0003      	movs	r3, r0
 80022d6:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	1dba      	adds	r2, r7, #6
 80022dc:	2154      	movs	r1, #84	; 0x54
 80022de:	8812      	ldrh	r2, [r2, #0]
 80022e0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	1dba      	adds	r2, r7, #6
 80022e6:	2156      	movs	r1, #86	; 0x56
 80022e8:	8812      	ldrh	r2, [r2, #0]
 80022ea:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	2380      	movs	r3, #128	; 0x80
 80022f2:	015b      	lsls	r3, r3, #5
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d108      	bne.n	800230a <HAL_UART_Transmit+0xae>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d104      	bne.n	800230a <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8002300:	2300      	movs	r3, #0
 8002302:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	61bb      	str	r3, [r7, #24]
 8002308:	e003      	b.n	8002312 <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800230e:	2300      	movs	r3, #0
 8002310:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2280      	movs	r2, #128	; 0x80
 8002316:	2100      	movs	r1, #0
 8002318:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800231a:	e02c      	b.n	8002376 <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800231c:	697a      	ldr	r2, [r7, #20]
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	0013      	movs	r3, r2
 8002326:	2200      	movs	r2, #0
 8002328:	2180      	movs	r1, #128	; 0x80
 800232a:	f000 faab 	bl	8002884 <UART_WaitOnFlagUntilTimeout>
 800232e:	1e03      	subs	r3, r0, #0
 8002330:	d001      	beq.n	8002336 <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e039      	b.n	80023aa <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d10b      	bne.n	8002354 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	881b      	ldrh	r3, [r3, #0]
 8002340:	001a      	movs	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	05d2      	lsls	r2, r2, #23
 8002348:	0dd2      	lsrs	r2, r2, #23
 800234a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	3302      	adds	r3, #2
 8002350:	61bb      	str	r3, [r7, #24]
 8002352:	e007      	b.n	8002364 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	781a      	ldrb	r2, [r3, #0]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	3301      	adds	r3, #1
 8002362:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2256      	movs	r2, #86	; 0x56
 8002368:	5a9b      	ldrh	r3, [r3, r2]
 800236a:	b29b      	uxth	r3, r3
 800236c:	3b01      	subs	r3, #1
 800236e:	b299      	uxth	r1, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2256      	movs	r2, #86	; 0x56
 8002374:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2256      	movs	r2, #86	; 0x56
 800237a:	5a9b      	ldrh	r3, [r3, r2]
 800237c:	b29b      	uxth	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1cc      	bne.n	800231c <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	9300      	str	r3, [sp, #0]
 800238a:	0013      	movs	r3, r2
 800238c:	2200      	movs	r2, #0
 800238e:	2140      	movs	r1, #64	; 0x40
 8002390:	f000 fa78 	bl	8002884 <UART_WaitOnFlagUntilTimeout>
 8002394:	1e03      	subs	r3, r0, #0
 8002396:	d001      	beq.n	800239c <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e006      	b.n	80023aa <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2284      	movs	r2, #132	; 0x84
 80023a0:	2120      	movs	r1, #32
 80023a2:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80023a4:	2300      	movs	r3, #0
 80023a6:	e000      	b.n	80023aa <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 80023a8:	2302      	movs	r3, #2
  }
}
 80023aa:	0018      	movs	r0, r3
 80023ac:	46bd      	mov	sp, r7
 80023ae:	b008      	add	sp, #32
 80023b0:	bd80      	pop	{r7, pc}
	...

080023b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b088      	sub	sp, #32
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80023bc:	231a      	movs	r3, #26
 80023be:	18fb      	adds	r3, r7, r3
 80023c0:	2200      	movs	r2, #0
 80023c2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	431a      	orrs	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	431a      	orrs	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	69db      	ldr	r3, [r3, #28]
 80023d8:	4313      	orrs	r3, r2
 80023da:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4aa1      	ldr	r2, [pc, #644]	; (8002668 <UART_SetConfig+0x2b4>)
 80023e4:	4013      	ands	r3, r2
 80023e6:	0019      	movs	r1, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	69fa      	ldr	r2, [r7, #28]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	4a9c      	ldr	r2, [pc, #624]	; (800266c <UART_SetConfig+0x2b8>)
 80023fa:	4013      	ands	r3, r2
 80023fc:	0019      	movs	r1, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68da      	ldr	r2, [r3, #12]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	430a      	orrs	r2, r1
 8002408:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	69fa      	ldr	r2, [r7, #28]
 8002416:	4313      	orrs	r3, r2
 8002418:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	4a93      	ldr	r2, [pc, #588]	; (8002670 <UART_SetConfig+0x2bc>)
 8002422:	4013      	ands	r3, r2
 8002424:	0019      	movs	r1, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	69fa      	ldr	r2, [r7, #28]
 800242c:	430a      	orrs	r2, r1
 800242e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002436:	220f      	movs	r2, #15
 8002438:	4393      	bics	r3, r2
 800243a:	0019      	movs	r1, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	430a      	orrs	r2, r1
 8002446:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a89      	ldr	r2, [pc, #548]	; (8002674 <UART_SetConfig+0x2c0>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d127      	bne.n	80024a2 <UART_SetConfig+0xee>
 8002452:	4b89      	ldr	r3, [pc, #548]	; (8002678 <UART_SetConfig+0x2c4>)
 8002454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002456:	2203      	movs	r2, #3
 8002458:	4013      	ands	r3, r2
 800245a:	2b03      	cmp	r3, #3
 800245c:	d017      	beq.n	800248e <UART_SetConfig+0xda>
 800245e:	d81b      	bhi.n	8002498 <UART_SetConfig+0xe4>
 8002460:	2b02      	cmp	r3, #2
 8002462:	d00a      	beq.n	800247a <UART_SetConfig+0xc6>
 8002464:	d818      	bhi.n	8002498 <UART_SetConfig+0xe4>
 8002466:	2b00      	cmp	r3, #0
 8002468:	d002      	beq.n	8002470 <UART_SetConfig+0xbc>
 800246a:	2b01      	cmp	r3, #1
 800246c:	d00a      	beq.n	8002484 <UART_SetConfig+0xd0>
 800246e:	e013      	b.n	8002498 <UART_SetConfig+0xe4>
 8002470:	231b      	movs	r3, #27
 8002472:	18fb      	adds	r3, r7, r3
 8002474:	2200      	movs	r2, #0
 8002476:	701a      	strb	r2, [r3, #0]
 8002478:	e021      	b.n	80024be <UART_SetConfig+0x10a>
 800247a:	231b      	movs	r3, #27
 800247c:	18fb      	adds	r3, r7, r3
 800247e:	2202      	movs	r2, #2
 8002480:	701a      	strb	r2, [r3, #0]
 8002482:	e01c      	b.n	80024be <UART_SetConfig+0x10a>
 8002484:	231b      	movs	r3, #27
 8002486:	18fb      	adds	r3, r7, r3
 8002488:	2204      	movs	r2, #4
 800248a:	701a      	strb	r2, [r3, #0]
 800248c:	e017      	b.n	80024be <UART_SetConfig+0x10a>
 800248e:	231b      	movs	r3, #27
 8002490:	18fb      	adds	r3, r7, r3
 8002492:	2208      	movs	r2, #8
 8002494:	701a      	strb	r2, [r3, #0]
 8002496:	e012      	b.n	80024be <UART_SetConfig+0x10a>
 8002498:	231b      	movs	r3, #27
 800249a:	18fb      	adds	r3, r7, r3
 800249c:	2210      	movs	r2, #16
 800249e:	701a      	strb	r2, [r3, #0]
 80024a0:	e00d      	b.n	80024be <UART_SetConfig+0x10a>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a75      	ldr	r2, [pc, #468]	; (800267c <UART_SetConfig+0x2c8>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d104      	bne.n	80024b6 <UART_SetConfig+0x102>
 80024ac:	231b      	movs	r3, #27
 80024ae:	18fb      	adds	r3, r7, r3
 80024b0:	2200      	movs	r2, #0
 80024b2:	701a      	strb	r2, [r3, #0]
 80024b4:	e003      	b.n	80024be <UART_SetConfig+0x10a>
 80024b6:	231b      	movs	r3, #27
 80024b8:	18fb      	adds	r3, r7, r3
 80024ba:	2210      	movs	r2, #16
 80024bc:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	69da      	ldr	r2, [r3, #28]
 80024c2:	2380      	movs	r3, #128	; 0x80
 80024c4:	021b      	lsls	r3, r3, #8
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d000      	beq.n	80024cc <UART_SetConfig+0x118>
 80024ca:	e065      	b.n	8002598 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 80024cc:	231b      	movs	r3, #27
 80024ce:	18fb      	adds	r3, r7, r3
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2b08      	cmp	r3, #8
 80024d4:	d015      	beq.n	8002502 <UART_SetConfig+0x14e>
 80024d6:	dc18      	bgt.n	800250a <UART_SetConfig+0x156>
 80024d8:	2b04      	cmp	r3, #4
 80024da:	d00d      	beq.n	80024f8 <UART_SetConfig+0x144>
 80024dc:	dc15      	bgt.n	800250a <UART_SetConfig+0x156>
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d002      	beq.n	80024e8 <UART_SetConfig+0x134>
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d005      	beq.n	80024f2 <UART_SetConfig+0x13e>
 80024e6:	e010      	b.n	800250a <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80024e8:	f7ff fc6e 	bl	8001dc8 <HAL_RCC_GetPCLK1Freq>
 80024ec:	0003      	movs	r3, r0
 80024ee:	617b      	str	r3, [r7, #20]
        break;
 80024f0:	e012      	b.n	8002518 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80024f2:	4b63      	ldr	r3, [pc, #396]	; (8002680 <UART_SetConfig+0x2cc>)
 80024f4:	617b      	str	r3, [r7, #20]
        break;
 80024f6:	e00f      	b.n	8002518 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80024f8:	f7ff fbda 	bl	8001cb0 <HAL_RCC_GetSysClockFreq>
 80024fc:	0003      	movs	r3, r0
 80024fe:	617b      	str	r3, [r7, #20]
        break;
 8002500:	e00a      	b.n	8002518 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002502:	2380      	movs	r3, #128	; 0x80
 8002504:	021b      	lsls	r3, r3, #8
 8002506:	617b      	str	r3, [r7, #20]
        break;
 8002508:	e006      	b.n	8002518 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 800250a:	2300      	movs	r3, #0
 800250c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800250e:	231a      	movs	r3, #26
 8002510:	18fb      	adds	r3, r7, r3
 8002512:	2201      	movs	r2, #1
 8002514:	701a      	strb	r2, [r3, #0]
        break;
 8002516:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d100      	bne.n	8002520 <UART_SetConfig+0x16c>
 800251e:	e08d      	b.n	800263c <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002524:	4b57      	ldr	r3, [pc, #348]	; (8002684 <UART_SetConfig+0x2d0>)
 8002526:	0052      	lsls	r2, r2, #1
 8002528:	5ad3      	ldrh	r3, [r2, r3]
 800252a:	0019      	movs	r1, r3
 800252c:	6978      	ldr	r0, [r7, #20]
 800252e:	f7fd fdf1 	bl	8000114 <__udivsi3>
 8002532:	0003      	movs	r3, r0
 8002534:	005a      	lsls	r2, r3, #1
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	085b      	lsrs	r3, r3, #1
 800253c:	18d2      	adds	r2, r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	0019      	movs	r1, r3
 8002544:	0010      	movs	r0, r2
 8002546:	f7fd fde5 	bl	8000114 <__udivsi3>
 800254a:	0003      	movs	r3, r0
 800254c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	2b0f      	cmp	r3, #15
 8002552:	d91c      	bls.n	800258e <UART_SetConfig+0x1da>
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	2380      	movs	r3, #128	; 0x80
 8002558:	025b      	lsls	r3, r3, #9
 800255a:	429a      	cmp	r2, r3
 800255c:	d217      	bcs.n	800258e <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	b29a      	uxth	r2, r3
 8002562:	200e      	movs	r0, #14
 8002564:	183b      	adds	r3, r7, r0
 8002566:	210f      	movs	r1, #15
 8002568:	438a      	bics	r2, r1
 800256a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	085b      	lsrs	r3, r3, #1
 8002570:	b29b      	uxth	r3, r3
 8002572:	2207      	movs	r2, #7
 8002574:	4013      	ands	r3, r2
 8002576:	b299      	uxth	r1, r3
 8002578:	183b      	adds	r3, r7, r0
 800257a:	183a      	adds	r2, r7, r0
 800257c:	8812      	ldrh	r2, [r2, #0]
 800257e:	430a      	orrs	r2, r1
 8002580:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	183a      	adds	r2, r7, r0
 8002588:	8812      	ldrh	r2, [r2, #0]
 800258a:	60da      	str	r2, [r3, #12]
 800258c:	e056      	b.n	800263c <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 800258e:	231a      	movs	r3, #26
 8002590:	18fb      	adds	r3, r7, r3
 8002592:	2201      	movs	r2, #1
 8002594:	701a      	strb	r2, [r3, #0]
 8002596:	e051      	b.n	800263c <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002598:	231b      	movs	r3, #27
 800259a:	18fb      	adds	r3, r7, r3
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	2b08      	cmp	r3, #8
 80025a0:	d015      	beq.n	80025ce <UART_SetConfig+0x21a>
 80025a2:	dc18      	bgt.n	80025d6 <UART_SetConfig+0x222>
 80025a4:	2b04      	cmp	r3, #4
 80025a6:	d00d      	beq.n	80025c4 <UART_SetConfig+0x210>
 80025a8:	dc15      	bgt.n	80025d6 <UART_SetConfig+0x222>
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d002      	beq.n	80025b4 <UART_SetConfig+0x200>
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d005      	beq.n	80025be <UART_SetConfig+0x20a>
 80025b2:	e010      	b.n	80025d6 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80025b4:	f7ff fc08 	bl	8001dc8 <HAL_RCC_GetPCLK1Freq>
 80025b8:	0003      	movs	r3, r0
 80025ba:	617b      	str	r3, [r7, #20]
        break;
 80025bc:	e012      	b.n	80025e4 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80025be:	4b30      	ldr	r3, [pc, #192]	; (8002680 <UART_SetConfig+0x2cc>)
 80025c0:	617b      	str	r3, [r7, #20]
        break;
 80025c2:	e00f      	b.n	80025e4 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025c4:	f7ff fb74 	bl	8001cb0 <HAL_RCC_GetSysClockFreq>
 80025c8:	0003      	movs	r3, r0
 80025ca:	617b      	str	r3, [r7, #20]
        break;
 80025cc:	e00a      	b.n	80025e4 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025ce:	2380      	movs	r3, #128	; 0x80
 80025d0:	021b      	lsls	r3, r3, #8
 80025d2:	617b      	str	r3, [r7, #20]
        break;
 80025d4:	e006      	b.n	80025e4 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80025da:	231a      	movs	r3, #26
 80025dc:	18fb      	adds	r3, r7, r3
 80025de:	2201      	movs	r2, #1
 80025e0:	701a      	strb	r2, [r3, #0]
        break;
 80025e2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d028      	beq.n	800263c <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025ee:	4b25      	ldr	r3, [pc, #148]	; (8002684 <UART_SetConfig+0x2d0>)
 80025f0:	0052      	lsls	r2, r2, #1
 80025f2:	5ad3      	ldrh	r3, [r2, r3]
 80025f4:	0019      	movs	r1, r3
 80025f6:	6978      	ldr	r0, [r7, #20]
 80025f8:	f7fd fd8c 	bl	8000114 <__udivsi3>
 80025fc:	0003      	movs	r3, r0
 80025fe:	001a      	movs	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	085b      	lsrs	r3, r3, #1
 8002606:	18d2      	adds	r2, r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	0019      	movs	r1, r3
 800260e:	0010      	movs	r0, r2
 8002610:	f7fd fd80 	bl	8000114 <__udivsi3>
 8002614:	0003      	movs	r3, r0
 8002616:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	2b0f      	cmp	r3, #15
 800261c:	d90a      	bls.n	8002634 <UART_SetConfig+0x280>
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	2380      	movs	r3, #128	; 0x80
 8002622:	025b      	lsls	r3, r3, #9
 8002624:	429a      	cmp	r2, r3
 8002626:	d205      	bcs.n	8002634 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	b29a      	uxth	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	60da      	str	r2, [r3, #12]
 8002632:	e003      	b.n	800263c <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8002634:	231a      	movs	r3, #26
 8002636:	18fb      	adds	r3, r7, r3
 8002638:	2201      	movs	r2, #1
 800263a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	226a      	movs	r2, #106	; 0x6a
 8002640:	2101      	movs	r1, #1
 8002642:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2268      	movs	r2, #104	; 0x68
 8002648:	2101      	movs	r1, #1
 800264a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8002658:	231a      	movs	r3, #26
 800265a:	18fb      	adds	r3, r7, r3
 800265c:	781b      	ldrb	r3, [r3, #0]
}
 800265e:	0018      	movs	r0, r3
 8002660:	46bd      	mov	sp, r7
 8002662:	b008      	add	sp, #32
 8002664:	bd80      	pop	{r7, pc}
 8002666:	46c0      	nop			; (mov r8, r8)
 8002668:	cfff69f3 	.word	0xcfff69f3
 800266c:	ffffcfff 	.word	0xffffcfff
 8002670:	11fff4ff 	.word	0x11fff4ff
 8002674:	40013800 	.word	0x40013800
 8002678:	40021000 	.word	0x40021000
 800267c:	40004400 	.word	0x40004400
 8002680:	00f42400 	.word	0x00f42400
 8002684:	080033cc 	.word	0x080033cc

08002688 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002694:	2201      	movs	r2, #1
 8002696:	4013      	ands	r3, r2
 8002698:	d00b      	beq.n	80026b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	4a4a      	ldr	r2, [pc, #296]	; (80027cc <UART_AdvFeatureConfig+0x144>)
 80026a2:	4013      	ands	r3, r2
 80026a4:	0019      	movs	r1, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	430a      	orrs	r2, r1
 80026b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b6:	2202      	movs	r2, #2
 80026b8:	4013      	ands	r3, r2
 80026ba:	d00b      	beq.n	80026d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	4a43      	ldr	r2, [pc, #268]	; (80027d0 <UART_AdvFeatureConfig+0x148>)
 80026c4:	4013      	ands	r3, r2
 80026c6:	0019      	movs	r1, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	430a      	orrs	r2, r1
 80026d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d8:	2204      	movs	r2, #4
 80026da:	4013      	ands	r3, r2
 80026dc:	d00b      	beq.n	80026f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	4a3b      	ldr	r2, [pc, #236]	; (80027d4 <UART_AdvFeatureConfig+0x14c>)
 80026e6:	4013      	ands	r3, r2
 80026e8:	0019      	movs	r1, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fa:	2208      	movs	r2, #8
 80026fc:	4013      	ands	r3, r2
 80026fe:	d00b      	beq.n	8002718 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	4a34      	ldr	r2, [pc, #208]	; (80027d8 <UART_AdvFeatureConfig+0x150>)
 8002708:	4013      	ands	r3, r2
 800270a:	0019      	movs	r1, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	430a      	orrs	r2, r1
 8002716:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271c:	2210      	movs	r2, #16
 800271e:	4013      	ands	r3, r2
 8002720:	d00b      	beq.n	800273a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	4a2c      	ldr	r2, [pc, #176]	; (80027dc <UART_AdvFeatureConfig+0x154>)
 800272a:	4013      	ands	r3, r2
 800272c:	0019      	movs	r1, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	430a      	orrs	r2, r1
 8002738:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273e:	2220      	movs	r2, #32
 8002740:	4013      	ands	r3, r2
 8002742:	d00b      	beq.n	800275c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	4a25      	ldr	r2, [pc, #148]	; (80027e0 <UART_AdvFeatureConfig+0x158>)
 800274c:	4013      	ands	r3, r2
 800274e:	0019      	movs	r1, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	430a      	orrs	r2, r1
 800275a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002760:	2240      	movs	r2, #64	; 0x40
 8002762:	4013      	ands	r3, r2
 8002764:	d01d      	beq.n	80027a2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	4a1d      	ldr	r2, [pc, #116]	; (80027e4 <UART_AdvFeatureConfig+0x15c>)
 800276e:	4013      	ands	r3, r2
 8002770:	0019      	movs	r1, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	430a      	orrs	r2, r1
 800277c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002782:	2380      	movs	r3, #128	; 0x80
 8002784:	035b      	lsls	r3, r3, #13
 8002786:	429a      	cmp	r2, r3
 8002788:	d10b      	bne.n	80027a2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	4a15      	ldr	r2, [pc, #84]	; (80027e8 <UART_AdvFeatureConfig+0x160>)
 8002792:	4013      	ands	r3, r2
 8002794:	0019      	movs	r1, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	430a      	orrs	r2, r1
 80027a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a6:	2280      	movs	r2, #128	; 0x80
 80027a8:	4013      	ands	r3, r2
 80027aa:	d00b      	beq.n	80027c4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	4a0e      	ldr	r2, [pc, #56]	; (80027ec <UART_AdvFeatureConfig+0x164>)
 80027b4:	4013      	ands	r3, r2
 80027b6:	0019      	movs	r1, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	430a      	orrs	r2, r1
 80027c2:	605a      	str	r2, [r3, #4]
  }
}
 80027c4:	46c0      	nop			; (mov r8, r8)
 80027c6:	46bd      	mov	sp, r7
 80027c8:	b002      	add	sp, #8
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	fffdffff 	.word	0xfffdffff
 80027d0:	fffeffff 	.word	0xfffeffff
 80027d4:	fffbffff 	.word	0xfffbffff
 80027d8:	ffff7fff 	.word	0xffff7fff
 80027dc:	ffffefff 	.word	0xffffefff
 80027e0:	ffffdfff 	.word	0xffffdfff
 80027e4:	ffefffff 	.word	0xffefffff
 80027e8:	ff9fffff 	.word	0xff9fffff
 80027ec:	fff7ffff 	.word	0xfff7ffff

080027f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af02      	add	r7, sp, #8
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	228c      	movs	r2, #140	; 0x8c
 80027fc:	2100      	movs	r1, #0
 80027fe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002800:	f7fe f906 	bl	8000a10 <HAL_GetTick>
 8002804:	0003      	movs	r3, r0
 8002806:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2208      	movs	r2, #8
 8002810:	4013      	ands	r3, r2
 8002812:	2b08      	cmp	r3, #8
 8002814:	d10c      	bne.n	8002830 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2280      	movs	r2, #128	; 0x80
 800281a:	0391      	lsls	r1, r2, #14
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	4a18      	ldr	r2, [pc, #96]	; (8002880 <UART_CheckIdleState+0x90>)
 8002820:	9200      	str	r2, [sp, #0]
 8002822:	2200      	movs	r2, #0
 8002824:	f000 f82e 	bl	8002884 <UART_WaitOnFlagUntilTimeout>
 8002828:	1e03      	subs	r3, r0, #0
 800282a:	d001      	beq.n	8002830 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e023      	b.n	8002878 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2204      	movs	r2, #4
 8002838:	4013      	ands	r3, r2
 800283a:	2b04      	cmp	r3, #4
 800283c:	d10c      	bne.n	8002858 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2280      	movs	r2, #128	; 0x80
 8002842:	03d1      	lsls	r1, r2, #15
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	4a0e      	ldr	r2, [pc, #56]	; (8002880 <UART_CheckIdleState+0x90>)
 8002848:	9200      	str	r2, [sp, #0]
 800284a:	2200      	movs	r2, #0
 800284c:	f000 f81a 	bl	8002884 <UART_WaitOnFlagUntilTimeout>
 8002850:	1e03      	subs	r3, r0, #0
 8002852:	d001      	beq.n	8002858 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e00f      	b.n	8002878 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2284      	movs	r2, #132	; 0x84
 800285c:	2120      	movs	r1, #32
 800285e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2288      	movs	r2, #136	; 0x88
 8002864:	2120      	movs	r1, #32
 8002866:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2280      	movs	r2, #128	; 0x80
 8002872:	2100      	movs	r1, #0
 8002874:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	0018      	movs	r0, r3
 800287a:	46bd      	mov	sp, r7
 800287c:	b004      	add	sp, #16
 800287e:	bd80      	pop	{r7, pc}
 8002880:	01ffffff 	.word	0x01ffffff

08002884 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b094      	sub	sp, #80	; 0x50
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	603b      	str	r3, [r7, #0]
 8002890:	1dfb      	adds	r3, r7, #7
 8002892:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002894:	e0a7      	b.n	80029e6 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002896:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002898:	3301      	adds	r3, #1
 800289a:	d100      	bne.n	800289e <UART_WaitOnFlagUntilTimeout+0x1a>
 800289c:	e0a3      	b.n	80029e6 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800289e:	f7fe f8b7 	bl	8000a10 <HAL_GetTick>
 80028a2:	0002      	movs	r2, r0
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d302      	bcc.n	80028b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80028ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d13f      	bne.n	8002934 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028b4:	f3ef 8310 	mrs	r3, PRIMASK
 80028b8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80028ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80028bc:	647b      	str	r3, [r7, #68]	; 0x44
 80028be:	2301      	movs	r3, #1
 80028c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c4:	f383 8810 	msr	PRIMASK, r3
}
 80028c8:	46c0      	nop			; (mov r8, r8)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	494e      	ldr	r1, [pc, #312]	; (8002a10 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80028d6:	400a      	ands	r2, r1
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028dc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e0:	f383 8810 	msr	PRIMASK, r3
}
 80028e4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028e6:	f3ef 8310 	mrs	r3, PRIMASK
 80028ea:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80028ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028ee:	643b      	str	r3, [r7, #64]	; 0x40
 80028f0:	2301      	movs	r3, #1
 80028f2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f6:	f383 8810 	msr	PRIMASK, r3
}
 80028fa:	46c0      	nop			; (mov r8, r8)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689a      	ldr	r2, [r3, #8]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2101      	movs	r1, #1
 8002908:	438a      	bics	r2, r1
 800290a:	609a      	str	r2, [r3, #8]
 800290c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800290e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002912:	f383 8810 	msr	PRIMASK, r3
}
 8002916:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2284      	movs	r2, #132	; 0x84
 800291c:	2120      	movs	r1, #32
 800291e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2288      	movs	r2, #136	; 0x88
 8002924:	2120      	movs	r1, #32
 8002926:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2280      	movs	r2, #128	; 0x80
 800292c:	2100      	movs	r1, #0
 800292e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e069      	b.n	8002a08 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2204      	movs	r2, #4
 800293c:	4013      	ands	r3, r2
 800293e:	d052      	beq.n	80029e6 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	69da      	ldr	r2, [r3, #28]
 8002946:	2380      	movs	r3, #128	; 0x80
 8002948:	011b      	lsls	r3, r3, #4
 800294a:	401a      	ands	r2, r3
 800294c:	2380      	movs	r3, #128	; 0x80
 800294e:	011b      	lsls	r3, r3, #4
 8002950:	429a      	cmp	r2, r3
 8002952:	d148      	bne.n	80029e6 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2280      	movs	r2, #128	; 0x80
 800295a:	0112      	lsls	r2, r2, #4
 800295c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800295e:	f3ef 8310 	mrs	r3, PRIMASK
 8002962:	613b      	str	r3, [r7, #16]
  return(result);
 8002964:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002966:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002968:	2301      	movs	r3, #1
 800296a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	f383 8810 	msr	PRIMASK, r3
}
 8002972:	46c0      	nop			; (mov r8, r8)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4924      	ldr	r1, [pc, #144]	; (8002a10 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002980:	400a      	ands	r2, r1
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002986:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	f383 8810 	msr	PRIMASK, r3
}
 800298e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002990:	f3ef 8310 	mrs	r3, PRIMASK
 8002994:	61fb      	str	r3, [r7, #28]
  return(result);
 8002996:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002998:	64bb      	str	r3, [r7, #72]	; 0x48
 800299a:	2301      	movs	r3, #1
 800299c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800299e:	6a3b      	ldr	r3, [r7, #32]
 80029a0:	f383 8810 	msr	PRIMASK, r3
}
 80029a4:	46c0      	nop			; (mov r8, r8)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2101      	movs	r1, #1
 80029b2:	438a      	bics	r2, r1
 80029b4:	609a      	str	r2, [r3, #8]
 80029b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029b8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029bc:	f383 8810 	msr	PRIMASK, r3
}
 80029c0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2284      	movs	r2, #132	; 0x84
 80029c6:	2120      	movs	r1, #32
 80029c8:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2288      	movs	r2, #136	; 0x88
 80029ce:	2120      	movs	r1, #32
 80029d0:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	228c      	movs	r2, #140	; 0x8c
 80029d6:	2120      	movs	r1, #32
 80029d8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2280      	movs	r2, #128	; 0x80
 80029de:	2100      	movs	r1, #0
 80029e0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e010      	b.n	8002a08 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	69db      	ldr	r3, [r3, #28]
 80029ec:	68ba      	ldr	r2, [r7, #8]
 80029ee:	4013      	ands	r3, r2
 80029f0:	68ba      	ldr	r2, [r7, #8]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	425a      	negs	r2, r3
 80029f6:	4153      	adcs	r3, r2
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	001a      	movs	r2, r3
 80029fc:	1dfb      	adds	r3, r7, #7
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d100      	bne.n	8002a06 <UART_WaitOnFlagUntilTimeout+0x182>
 8002a04:	e747      	b.n	8002896 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	0018      	movs	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	b014      	add	sp, #80	; 0x50
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	fffffe5f 	.word	0xfffffe5f

08002a14 <__errno>:
 8002a14:	4b01      	ldr	r3, [pc, #4]	; (8002a1c <__errno+0x8>)
 8002a16:	6818      	ldr	r0, [r3, #0]
 8002a18:	4770      	bx	lr
 8002a1a:	46c0      	nop			; (mov r8, r8)
 8002a1c:	20000038 	.word	0x20000038

08002a20 <__libc_init_array>:
 8002a20:	b570      	push	{r4, r5, r6, lr}
 8002a22:	2600      	movs	r6, #0
 8002a24:	4d0c      	ldr	r5, [pc, #48]	; (8002a58 <__libc_init_array+0x38>)
 8002a26:	4c0d      	ldr	r4, [pc, #52]	; (8002a5c <__libc_init_array+0x3c>)
 8002a28:	1b64      	subs	r4, r4, r5
 8002a2a:	10a4      	asrs	r4, r4, #2
 8002a2c:	42a6      	cmp	r6, r4
 8002a2e:	d109      	bne.n	8002a44 <__libc_init_array+0x24>
 8002a30:	2600      	movs	r6, #0
 8002a32:	f000 fc8b 	bl	800334c <_init>
 8002a36:	4d0a      	ldr	r5, [pc, #40]	; (8002a60 <__libc_init_array+0x40>)
 8002a38:	4c0a      	ldr	r4, [pc, #40]	; (8002a64 <__libc_init_array+0x44>)
 8002a3a:	1b64      	subs	r4, r4, r5
 8002a3c:	10a4      	asrs	r4, r4, #2
 8002a3e:	42a6      	cmp	r6, r4
 8002a40:	d105      	bne.n	8002a4e <__libc_init_array+0x2e>
 8002a42:	bd70      	pop	{r4, r5, r6, pc}
 8002a44:	00b3      	lsls	r3, r6, #2
 8002a46:	58eb      	ldr	r3, [r5, r3]
 8002a48:	4798      	blx	r3
 8002a4a:	3601      	adds	r6, #1
 8002a4c:	e7ee      	b.n	8002a2c <__libc_init_array+0xc>
 8002a4e:	00b3      	lsls	r3, r6, #2
 8002a50:	58eb      	ldr	r3, [r5, r3]
 8002a52:	4798      	blx	r3
 8002a54:	3601      	adds	r6, #1
 8002a56:	e7f2      	b.n	8002a3e <__libc_init_array+0x1e>
 8002a58:	08003418 	.word	0x08003418
 8002a5c:	08003418 	.word	0x08003418
 8002a60:	08003418 	.word	0x08003418
 8002a64:	0800341c 	.word	0x0800341c

08002a68 <memset>:
 8002a68:	0003      	movs	r3, r0
 8002a6a:	1882      	adds	r2, r0, r2
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d100      	bne.n	8002a72 <memset+0xa>
 8002a70:	4770      	bx	lr
 8002a72:	7019      	strb	r1, [r3, #0]
 8002a74:	3301      	adds	r3, #1
 8002a76:	e7f9      	b.n	8002a6c <memset+0x4>

08002a78 <siprintf>:
 8002a78:	b40e      	push	{r1, r2, r3}
 8002a7a:	b500      	push	{lr}
 8002a7c:	490b      	ldr	r1, [pc, #44]	; (8002aac <siprintf+0x34>)
 8002a7e:	b09c      	sub	sp, #112	; 0x70
 8002a80:	ab1d      	add	r3, sp, #116	; 0x74
 8002a82:	9002      	str	r0, [sp, #8]
 8002a84:	9006      	str	r0, [sp, #24]
 8002a86:	9107      	str	r1, [sp, #28]
 8002a88:	9104      	str	r1, [sp, #16]
 8002a8a:	4809      	ldr	r0, [pc, #36]	; (8002ab0 <siprintf+0x38>)
 8002a8c:	4909      	ldr	r1, [pc, #36]	; (8002ab4 <siprintf+0x3c>)
 8002a8e:	cb04      	ldmia	r3!, {r2}
 8002a90:	9105      	str	r1, [sp, #20]
 8002a92:	6800      	ldr	r0, [r0, #0]
 8002a94:	a902      	add	r1, sp, #8
 8002a96:	9301      	str	r3, [sp, #4]
 8002a98:	f000 f870 	bl	8002b7c <_svfiprintf_r>
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	9a02      	ldr	r2, [sp, #8]
 8002aa0:	7013      	strb	r3, [r2, #0]
 8002aa2:	b01c      	add	sp, #112	; 0x70
 8002aa4:	bc08      	pop	{r3}
 8002aa6:	b003      	add	sp, #12
 8002aa8:	4718      	bx	r3
 8002aaa:	46c0      	nop			; (mov r8, r8)
 8002aac:	7fffffff 	.word	0x7fffffff
 8002ab0:	20000038 	.word	0x20000038
 8002ab4:	ffff0208 	.word	0xffff0208

08002ab8 <__ssputs_r>:
 8002ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aba:	688e      	ldr	r6, [r1, #8]
 8002abc:	b085      	sub	sp, #20
 8002abe:	0007      	movs	r7, r0
 8002ac0:	000c      	movs	r4, r1
 8002ac2:	9203      	str	r2, [sp, #12]
 8002ac4:	9301      	str	r3, [sp, #4]
 8002ac6:	429e      	cmp	r6, r3
 8002ac8:	d83c      	bhi.n	8002b44 <__ssputs_r+0x8c>
 8002aca:	2390      	movs	r3, #144	; 0x90
 8002acc:	898a      	ldrh	r2, [r1, #12]
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	421a      	tst	r2, r3
 8002ad2:	d034      	beq.n	8002b3e <__ssputs_r+0x86>
 8002ad4:	6909      	ldr	r1, [r1, #16]
 8002ad6:	6823      	ldr	r3, [r4, #0]
 8002ad8:	6960      	ldr	r0, [r4, #20]
 8002ada:	1a5b      	subs	r3, r3, r1
 8002adc:	9302      	str	r3, [sp, #8]
 8002ade:	2303      	movs	r3, #3
 8002ae0:	4343      	muls	r3, r0
 8002ae2:	0fdd      	lsrs	r5, r3, #31
 8002ae4:	18ed      	adds	r5, r5, r3
 8002ae6:	9b01      	ldr	r3, [sp, #4]
 8002ae8:	9802      	ldr	r0, [sp, #8]
 8002aea:	3301      	adds	r3, #1
 8002aec:	181b      	adds	r3, r3, r0
 8002aee:	106d      	asrs	r5, r5, #1
 8002af0:	42ab      	cmp	r3, r5
 8002af2:	d900      	bls.n	8002af6 <__ssputs_r+0x3e>
 8002af4:	001d      	movs	r5, r3
 8002af6:	0553      	lsls	r3, r2, #21
 8002af8:	d532      	bpl.n	8002b60 <__ssputs_r+0xa8>
 8002afa:	0029      	movs	r1, r5
 8002afc:	0038      	movs	r0, r7
 8002afe:	f000 fb53 	bl	80031a8 <_malloc_r>
 8002b02:	1e06      	subs	r6, r0, #0
 8002b04:	d109      	bne.n	8002b1a <__ssputs_r+0x62>
 8002b06:	230c      	movs	r3, #12
 8002b08:	603b      	str	r3, [r7, #0]
 8002b0a:	2340      	movs	r3, #64	; 0x40
 8002b0c:	2001      	movs	r0, #1
 8002b0e:	89a2      	ldrh	r2, [r4, #12]
 8002b10:	4240      	negs	r0, r0
 8002b12:	4313      	orrs	r3, r2
 8002b14:	81a3      	strh	r3, [r4, #12]
 8002b16:	b005      	add	sp, #20
 8002b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b1a:	9a02      	ldr	r2, [sp, #8]
 8002b1c:	6921      	ldr	r1, [r4, #16]
 8002b1e:	f000 faba 	bl	8003096 <memcpy>
 8002b22:	89a3      	ldrh	r3, [r4, #12]
 8002b24:	4a14      	ldr	r2, [pc, #80]	; (8002b78 <__ssputs_r+0xc0>)
 8002b26:	401a      	ands	r2, r3
 8002b28:	2380      	movs	r3, #128	; 0x80
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	81a3      	strh	r3, [r4, #12]
 8002b2e:	9b02      	ldr	r3, [sp, #8]
 8002b30:	6126      	str	r6, [r4, #16]
 8002b32:	18f6      	adds	r6, r6, r3
 8002b34:	6026      	str	r6, [r4, #0]
 8002b36:	6165      	str	r5, [r4, #20]
 8002b38:	9e01      	ldr	r6, [sp, #4]
 8002b3a:	1aed      	subs	r5, r5, r3
 8002b3c:	60a5      	str	r5, [r4, #8]
 8002b3e:	9b01      	ldr	r3, [sp, #4]
 8002b40:	429e      	cmp	r6, r3
 8002b42:	d900      	bls.n	8002b46 <__ssputs_r+0x8e>
 8002b44:	9e01      	ldr	r6, [sp, #4]
 8002b46:	0032      	movs	r2, r6
 8002b48:	9903      	ldr	r1, [sp, #12]
 8002b4a:	6820      	ldr	r0, [r4, #0]
 8002b4c:	f000 faac 	bl	80030a8 <memmove>
 8002b50:	68a3      	ldr	r3, [r4, #8]
 8002b52:	2000      	movs	r0, #0
 8002b54:	1b9b      	subs	r3, r3, r6
 8002b56:	60a3      	str	r3, [r4, #8]
 8002b58:	6823      	ldr	r3, [r4, #0]
 8002b5a:	199e      	adds	r6, r3, r6
 8002b5c:	6026      	str	r6, [r4, #0]
 8002b5e:	e7da      	b.n	8002b16 <__ssputs_r+0x5e>
 8002b60:	002a      	movs	r2, r5
 8002b62:	0038      	movs	r0, r7
 8002b64:	f000 fb96 	bl	8003294 <_realloc_r>
 8002b68:	1e06      	subs	r6, r0, #0
 8002b6a:	d1e0      	bne.n	8002b2e <__ssputs_r+0x76>
 8002b6c:	0038      	movs	r0, r7
 8002b6e:	6921      	ldr	r1, [r4, #16]
 8002b70:	f000 faae 	bl	80030d0 <_free_r>
 8002b74:	e7c7      	b.n	8002b06 <__ssputs_r+0x4e>
 8002b76:	46c0      	nop			; (mov r8, r8)
 8002b78:	fffffb7f 	.word	0xfffffb7f

08002b7c <_svfiprintf_r>:
 8002b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b7e:	b0a1      	sub	sp, #132	; 0x84
 8002b80:	9003      	str	r0, [sp, #12]
 8002b82:	001d      	movs	r5, r3
 8002b84:	898b      	ldrh	r3, [r1, #12]
 8002b86:	000f      	movs	r7, r1
 8002b88:	0016      	movs	r6, r2
 8002b8a:	061b      	lsls	r3, r3, #24
 8002b8c:	d511      	bpl.n	8002bb2 <_svfiprintf_r+0x36>
 8002b8e:	690b      	ldr	r3, [r1, #16]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d10e      	bne.n	8002bb2 <_svfiprintf_r+0x36>
 8002b94:	2140      	movs	r1, #64	; 0x40
 8002b96:	f000 fb07 	bl	80031a8 <_malloc_r>
 8002b9a:	6038      	str	r0, [r7, #0]
 8002b9c:	6138      	str	r0, [r7, #16]
 8002b9e:	2800      	cmp	r0, #0
 8002ba0:	d105      	bne.n	8002bae <_svfiprintf_r+0x32>
 8002ba2:	230c      	movs	r3, #12
 8002ba4:	9a03      	ldr	r2, [sp, #12]
 8002ba6:	3801      	subs	r0, #1
 8002ba8:	6013      	str	r3, [r2, #0]
 8002baa:	b021      	add	sp, #132	; 0x84
 8002bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bae:	2340      	movs	r3, #64	; 0x40
 8002bb0:	617b      	str	r3, [r7, #20]
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	ac08      	add	r4, sp, #32
 8002bb6:	6163      	str	r3, [r4, #20]
 8002bb8:	3320      	adds	r3, #32
 8002bba:	7663      	strb	r3, [r4, #25]
 8002bbc:	3310      	adds	r3, #16
 8002bbe:	76a3      	strb	r3, [r4, #26]
 8002bc0:	9507      	str	r5, [sp, #28]
 8002bc2:	0035      	movs	r5, r6
 8002bc4:	782b      	ldrb	r3, [r5, #0]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <_svfiprintf_r+0x52>
 8002bca:	2b25      	cmp	r3, #37	; 0x25
 8002bcc:	d147      	bne.n	8002c5e <_svfiprintf_r+0xe2>
 8002bce:	1bab      	subs	r3, r5, r6
 8002bd0:	9305      	str	r3, [sp, #20]
 8002bd2:	42b5      	cmp	r5, r6
 8002bd4:	d00c      	beq.n	8002bf0 <_svfiprintf_r+0x74>
 8002bd6:	0032      	movs	r2, r6
 8002bd8:	0039      	movs	r1, r7
 8002bda:	9803      	ldr	r0, [sp, #12]
 8002bdc:	f7ff ff6c 	bl	8002ab8 <__ssputs_r>
 8002be0:	1c43      	adds	r3, r0, #1
 8002be2:	d100      	bne.n	8002be6 <_svfiprintf_r+0x6a>
 8002be4:	e0ae      	b.n	8002d44 <_svfiprintf_r+0x1c8>
 8002be6:	6962      	ldr	r2, [r4, #20]
 8002be8:	9b05      	ldr	r3, [sp, #20]
 8002bea:	4694      	mov	ip, r2
 8002bec:	4463      	add	r3, ip
 8002bee:	6163      	str	r3, [r4, #20]
 8002bf0:	782b      	ldrb	r3, [r5, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d100      	bne.n	8002bf8 <_svfiprintf_r+0x7c>
 8002bf6:	e0a5      	b.n	8002d44 <_svfiprintf_r+0x1c8>
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	4252      	negs	r2, r2
 8002bfe:	6062      	str	r2, [r4, #4]
 8002c00:	a904      	add	r1, sp, #16
 8002c02:	3254      	adds	r2, #84	; 0x54
 8002c04:	1852      	adds	r2, r2, r1
 8002c06:	1c6e      	adds	r6, r5, #1
 8002c08:	6023      	str	r3, [r4, #0]
 8002c0a:	60e3      	str	r3, [r4, #12]
 8002c0c:	60a3      	str	r3, [r4, #8]
 8002c0e:	7013      	strb	r3, [r2, #0]
 8002c10:	65a3      	str	r3, [r4, #88]	; 0x58
 8002c12:	2205      	movs	r2, #5
 8002c14:	7831      	ldrb	r1, [r6, #0]
 8002c16:	4854      	ldr	r0, [pc, #336]	; (8002d68 <_svfiprintf_r+0x1ec>)
 8002c18:	f000 fa32 	bl	8003080 <memchr>
 8002c1c:	1c75      	adds	r5, r6, #1
 8002c1e:	2800      	cmp	r0, #0
 8002c20:	d11f      	bne.n	8002c62 <_svfiprintf_r+0xe6>
 8002c22:	6822      	ldr	r2, [r4, #0]
 8002c24:	06d3      	lsls	r3, r2, #27
 8002c26:	d504      	bpl.n	8002c32 <_svfiprintf_r+0xb6>
 8002c28:	2353      	movs	r3, #83	; 0x53
 8002c2a:	a904      	add	r1, sp, #16
 8002c2c:	185b      	adds	r3, r3, r1
 8002c2e:	2120      	movs	r1, #32
 8002c30:	7019      	strb	r1, [r3, #0]
 8002c32:	0713      	lsls	r3, r2, #28
 8002c34:	d504      	bpl.n	8002c40 <_svfiprintf_r+0xc4>
 8002c36:	2353      	movs	r3, #83	; 0x53
 8002c38:	a904      	add	r1, sp, #16
 8002c3a:	185b      	adds	r3, r3, r1
 8002c3c:	212b      	movs	r1, #43	; 0x2b
 8002c3e:	7019      	strb	r1, [r3, #0]
 8002c40:	7833      	ldrb	r3, [r6, #0]
 8002c42:	2b2a      	cmp	r3, #42	; 0x2a
 8002c44:	d016      	beq.n	8002c74 <_svfiprintf_r+0xf8>
 8002c46:	0035      	movs	r5, r6
 8002c48:	2100      	movs	r1, #0
 8002c4a:	200a      	movs	r0, #10
 8002c4c:	68e3      	ldr	r3, [r4, #12]
 8002c4e:	782a      	ldrb	r2, [r5, #0]
 8002c50:	1c6e      	adds	r6, r5, #1
 8002c52:	3a30      	subs	r2, #48	; 0x30
 8002c54:	2a09      	cmp	r2, #9
 8002c56:	d94e      	bls.n	8002cf6 <_svfiprintf_r+0x17a>
 8002c58:	2900      	cmp	r1, #0
 8002c5a:	d111      	bne.n	8002c80 <_svfiprintf_r+0x104>
 8002c5c:	e017      	b.n	8002c8e <_svfiprintf_r+0x112>
 8002c5e:	3501      	adds	r5, #1
 8002c60:	e7b0      	b.n	8002bc4 <_svfiprintf_r+0x48>
 8002c62:	4b41      	ldr	r3, [pc, #260]	; (8002d68 <_svfiprintf_r+0x1ec>)
 8002c64:	6822      	ldr	r2, [r4, #0]
 8002c66:	1ac0      	subs	r0, r0, r3
 8002c68:	2301      	movs	r3, #1
 8002c6a:	4083      	lsls	r3, r0
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	002e      	movs	r6, r5
 8002c70:	6023      	str	r3, [r4, #0]
 8002c72:	e7ce      	b.n	8002c12 <_svfiprintf_r+0x96>
 8002c74:	9b07      	ldr	r3, [sp, #28]
 8002c76:	1d19      	adds	r1, r3, #4
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	9107      	str	r1, [sp, #28]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	db01      	blt.n	8002c84 <_svfiprintf_r+0x108>
 8002c80:	930b      	str	r3, [sp, #44]	; 0x2c
 8002c82:	e004      	b.n	8002c8e <_svfiprintf_r+0x112>
 8002c84:	425b      	negs	r3, r3
 8002c86:	60e3      	str	r3, [r4, #12]
 8002c88:	2302      	movs	r3, #2
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	6023      	str	r3, [r4, #0]
 8002c8e:	782b      	ldrb	r3, [r5, #0]
 8002c90:	2b2e      	cmp	r3, #46	; 0x2e
 8002c92:	d10a      	bne.n	8002caa <_svfiprintf_r+0x12e>
 8002c94:	786b      	ldrb	r3, [r5, #1]
 8002c96:	2b2a      	cmp	r3, #42	; 0x2a
 8002c98:	d135      	bne.n	8002d06 <_svfiprintf_r+0x18a>
 8002c9a:	9b07      	ldr	r3, [sp, #28]
 8002c9c:	3502      	adds	r5, #2
 8002c9e:	1d1a      	adds	r2, r3, #4
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	9207      	str	r2, [sp, #28]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	db2b      	blt.n	8002d00 <_svfiprintf_r+0x184>
 8002ca8:	9309      	str	r3, [sp, #36]	; 0x24
 8002caa:	4e30      	ldr	r6, [pc, #192]	; (8002d6c <_svfiprintf_r+0x1f0>)
 8002cac:	2203      	movs	r2, #3
 8002cae:	0030      	movs	r0, r6
 8002cb0:	7829      	ldrb	r1, [r5, #0]
 8002cb2:	f000 f9e5 	bl	8003080 <memchr>
 8002cb6:	2800      	cmp	r0, #0
 8002cb8:	d006      	beq.n	8002cc8 <_svfiprintf_r+0x14c>
 8002cba:	2340      	movs	r3, #64	; 0x40
 8002cbc:	1b80      	subs	r0, r0, r6
 8002cbe:	4083      	lsls	r3, r0
 8002cc0:	6822      	ldr	r2, [r4, #0]
 8002cc2:	3501      	adds	r5, #1
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	6023      	str	r3, [r4, #0]
 8002cc8:	7829      	ldrb	r1, [r5, #0]
 8002cca:	2206      	movs	r2, #6
 8002ccc:	4828      	ldr	r0, [pc, #160]	; (8002d70 <_svfiprintf_r+0x1f4>)
 8002cce:	1c6e      	adds	r6, r5, #1
 8002cd0:	7621      	strb	r1, [r4, #24]
 8002cd2:	f000 f9d5 	bl	8003080 <memchr>
 8002cd6:	2800      	cmp	r0, #0
 8002cd8:	d03c      	beq.n	8002d54 <_svfiprintf_r+0x1d8>
 8002cda:	4b26      	ldr	r3, [pc, #152]	; (8002d74 <_svfiprintf_r+0x1f8>)
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d125      	bne.n	8002d2c <_svfiprintf_r+0x1b0>
 8002ce0:	2207      	movs	r2, #7
 8002ce2:	9b07      	ldr	r3, [sp, #28]
 8002ce4:	3307      	adds	r3, #7
 8002ce6:	4393      	bics	r3, r2
 8002ce8:	3308      	adds	r3, #8
 8002cea:	9307      	str	r3, [sp, #28]
 8002cec:	6963      	ldr	r3, [r4, #20]
 8002cee:	9a04      	ldr	r2, [sp, #16]
 8002cf0:	189b      	adds	r3, r3, r2
 8002cf2:	6163      	str	r3, [r4, #20]
 8002cf4:	e765      	b.n	8002bc2 <_svfiprintf_r+0x46>
 8002cf6:	4343      	muls	r3, r0
 8002cf8:	0035      	movs	r5, r6
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	189b      	adds	r3, r3, r2
 8002cfe:	e7a6      	b.n	8002c4e <_svfiprintf_r+0xd2>
 8002d00:	2301      	movs	r3, #1
 8002d02:	425b      	negs	r3, r3
 8002d04:	e7d0      	b.n	8002ca8 <_svfiprintf_r+0x12c>
 8002d06:	2300      	movs	r3, #0
 8002d08:	200a      	movs	r0, #10
 8002d0a:	001a      	movs	r2, r3
 8002d0c:	3501      	adds	r5, #1
 8002d0e:	6063      	str	r3, [r4, #4]
 8002d10:	7829      	ldrb	r1, [r5, #0]
 8002d12:	1c6e      	adds	r6, r5, #1
 8002d14:	3930      	subs	r1, #48	; 0x30
 8002d16:	2909      	cmp	r1, #9
 8002d18:	d903      	bls.n	8002d22 <_svfiprintf_r+0x1a6>
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d0c5      	beq.n	8002caa <_svfiprintf_r+0x12e>
 8002d1e:	9209      	str	r2, [sp, #36]	; 0x24
 8002d20:	e7c3      	b.n	8002caa <_svfiprintf_r+0x12e>
 8002d22:	4342      	muls	r2, r0
 8002d24:	0035      	movs	r5, r6
 8002d26:	2301      	movs	r3, #1
 8002d28:	1852      	adds	r2, r2, r1
 8002d2a:	e7f1      	b.n	8002d10 <_svfiprintf_r+0x194>
 8002d2c:	ab07      	add	r3, sp, #28
 8002d2e:	9300      	str	r3, [sp, #0]
 8002d30:	003a      	movs	r2, r7
 8002d32:	0021      	movs	r1, r4
 8002d34:	4b10      	ldr	r3, [pc, #64]	; (8002d78 <_svfiprintf_r+0x1fc>)
 8002d36:	9803      	ldr	r0, [sp, #12]
 8002d38:	e000      	b.n	8002d3c <_svfiprintf_r+0x1c0>
 8002d3a:	bf00      	nop
 8002d3c:	9004      	str	r0, [sp, #16]
 8002d3e:	9b04      	ldr	r3, [sp, #16]
 8002d40:	3301      	adds	r3, #1
 8002d42:	d1d3      	bne.n	8002cec <_svfiprintf_r+0x170>
 8002d44:	89bb      	ldrh	r3, [r7, #12]
 8002d46:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002d48:	065b      	lsls	r3, r3, #25
 8002d4a:	d400      	bmi.n	8002d4e <_svfiprintf_r+0x1d2>
 8002d4c:	e72d      	b.n	8002baa <_svfiprintf_r+0x2e>
 8002d4e:	2001      	movs	r0, #1
 8002d50:	4240      	negs	r0, r0
 8002d52:	e72a      	b.n	8002baa <_svfiprintf_r+0x2e>
 8002d54:	ab07      	add	r3, sp, #28
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	003a      	movs	r2, r7
 8002d5a:	0021      	movs	r1, r4
 8002d5c:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <_svfiprintf_r+0x1fc>)
 8002d5e:	9803      	ldr	r0, [sp, #12]
 8002d60:	f000 f87c 	bl	8002e5c <_printf_i>
 8002d64:	e7ea      	b.n	8002d3c <_svfiprintf_r+0x1c0>
 8002d66:	46c0      	nop			; (mov r8, r8)
 8002d68:	080033e4 	.word	0x080033e4
 8002d6c:	080033ea 	.word	0x080033ea
 8002d70:	080033ee 	.word	0x080033ee
 8002d74:	00000000 	.word	0x00000000
 8002d78:	08002ab9 	.word	0x08002ab9

08002d7c <_printf_common>:
 8002d7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d7e:	0015      	movs	r5, r2
 8002d80:	9301      	str	r3, [sp, #4]
 8002d82:	688a      	ldr	r2, [r1, #8]
 8002d84:	690b      	ldr	r3, [r1, #16]
 8002d86:	000c      	movs	r4, r1
 8002d88:	9000      	str	r0, [sp, #0]
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	da00      	bge.n	8002d90 <_printf_common+0x14>
 8002d8e:	0013      	movs	r3, r2
 8002d90:	0022      	movs	r2, r4
 8002d92:	602b      	str	r3, [r5, #0]
 8002d94:	3243      	adds	r2, #67	; 0x43
 8002d96:	7812      	ldrb	r2, [r2, #0]
 8002d98:	2a00      	cmp	r2, #0
 8002d9a:	d001      	beq.n	8002da0 <_printf_common+0x24>
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	602b      	str	r3, [r5, #0]
 8002da0:	6823      	ldr	r3, [r4, #0]
 8002da2:	069b      	lsls	r3, r3, #26
 8002da4:	d502      	bpl.n	8002dac <_printf_common+0x30>
 8002da6:	682b      	ldr	r3, [r5, #0]
 8002da8:	3302      	adds	r3, #2
 8002daa:	602b      	str	r3, [r5, #0]
 8002dac:	6822      	ldr	r2, [r4, #0]
 8002dae:	2306      	movs	r3, #6
 8002db0:	0017      	movs	r7, r2
 8002db2:	401f      	ands	r7, r3
 8002db4:	421a      	tst	r2, r3
 8002db6:	d027      	beq.n	8002e08 <_printf_common+0x8c>
 8002db8:	0023      	movs	r3, r4
 8002dba:	3343      	adds	r3, #67	; 0x43
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	1e5a      	subs	r2, r3, #1
 8002dc0:	4193      	sbcs	r3, r2
 8002dc2:	6822      	ldr	r2, [r4, #0]
 8002dc4:	0692      	lsls	r2, r2, #26
 8002dc6:	d430      	bmi.n	8002e2a <_printf_common+0xae>
 8002dc8:	0022      	movs	r2, r4
 8002dca:	9901      	ldr	r1, [sp, #4]
 8002dcc:	9800      	ldr	r0, [sp, #0]
 8002dce:	9e08      	ldr	r6, [sp, #32]
 8002dd0:	3243      	adds	r2, #67	; 0x43
 8002dd2:	47b0      	blx	r6
 8002dd4:	1c43      	adds	r3, r0, #1
 8002dd6:	d025      	beq.n	8002e24 <_printf_common+0xa8>
 8002dd8:	2306      	movs	r3, #6
 8002dda:	6820      	ldr	r0, [r4, #0]
 8002ddc:	682a      	ldr	r2, [r5, #0]
 8002dde:	68e1      	ldr	r1, [r4, #12]
 8002de0:	2500      	movs	r5, #0
 8002de2:	4003      	ands	r3, r0
 8002de4:	2b04      	cmp	r3, #4
 8002de6:	d103      	bne.n	8002df0 <_printf_common+0x74>
 8002de8:	1a8d      	subs	r5, r1, r2
 8002dea:	43eb      	mvns	r3, r5
 8002dec:	17db      	asrs	r3, r3, #31
 8002dee:	401d      	ands	r5, r3
 8002df0:	68a3      	ldr	r3, [r4, #8]
 8002df2:	6922      	ldr	r2, [r4, #16]
 8002df4:	4293      	cmp	r3, r2
 8002df6:	dd01      	ble.n	8002dfc <_printf_common+0x80>
 8002df8:	1a9b      	subs	r3, r3, r2
 8002dfa:	18ed      	adds	r5, r5, r3
 8002dfc:	2700      	movs	r7, #0
 8002dfe:	42bd      	cmp	r5, r7
 8002e00:	d120      	bne.n	8002e44 <_printf_common+0xc8>
 8002e02:	2000      	movs	r0, #0
 8002e04:	e010      	b.n	8002e28 <_printf_common+0xac>
 8002e06:	3701      	adds	r7, #1
 8002e08:	68e3      	ldr	r3, [r4, #12]
 8002e0a:	682a      	ldr	r2, [r5, #0]
 8002e0c:	1a9b      	subs	r3, r3, r2
 8002e0e:	42bb      	cmp	r3, r7
 8002e10:	ddd2      	ble.n	8002db8 <_printf_common+0x3c>
 8002e12:	0022      	movs	r2, r4
 8002e14:	2301      	movs	r3, #1
 8002e16:	9901      	ldr	r1, [sp, #4]
 8002e18:	9800      	ldr	r0, [sp, #0]
 8002e1a:	9e08      	ldr	r6, [sp, #32]
 8002e1c:	3219      	adds	r2, #25
 8002e1e:	47b0      	blx	r6
 8002e20:	1c43      	adds	r3, r0, #1
 8002e22:	d1f0      	bne.n	8002e06 <_printf_common+0x8a>
 8002e24:	2001      	movs	r0, #1
 8002e26:	4240      	negs	r0, r0
 8002e28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002e2a:	2030      	movs	r0, #48	; 0x30
 8002e2c:	18e1      	adds	r1, r4, r3
 8002e2e:	3143      	adds	r1, #67	; 0x43
 8002e30:	7008      	strb	r0, [r1, #0]
 8002e32:	0021      	movs	r1, r4
 8002e34:	1c5a      	adds	r2, r3, #1
 8002e36:	3145      	adds	r1, #69	; 0x45
 8002e38:	7809      	ldrb	r1, [r1, #0]
 8002e3a:	18a2      	adds	r2, r4, r2
 8002e3c:	3243      	adds	r2, #67	; 0x43
 8002e3e:	3302      	adds	r3, #2
 8002e40:	7011      	strb	r1, [r2, #0]
 8002e42:	e7c1      	b.n	8002dc8 <_printf_common+0x4c>
 8002e44:	0022      	movs	r2, r4
 8002e46:	2301      	movs	r3, #1
 8002e48:	9901      	ldr	r1, [sp, #4]
 8002e4a:	9800      	ldr	r0, [sp, #0]
 8002e4c:	9e08      	ldr	r6, [sp, #32]
 8002e4e:	321a      	adds	r2, #26
 8002e50:	47b0      	blx	r6
 8002e52:	1c43      	adds	r3, r0, #1
 8002e54:	d0e6      	beq.n	8002e24 <_printf_common+0xa8>
 8002e56:	3701      	adds	r7, #1
 8002e58:	e7d1      	b.n	8002dfe <_printf_common+0x82>
	...

08002e5c <_printf_i>:
 8002e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e5e:	b08b      	sub	sp, #44	; 0x2c
 8002e60:	9206      	str	r2, [sp, #24]
 8002e62:	000a      	movs	r2, r1
 8002e64:	3243      	adds	r2, #67	; 0x43
 8002e66:	9307      	str	r3, [sp, #28]
 8002e68:	9005      	str	r0, [sp, #20]
 8002e6a:	9204      	str	r2, [sp, #16]
 8002e6c:	7e0a      	ldrb	r2, [r1, #24]
 8002e6e:	000c      	movs	r4, r1
 8002e70:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002e72:	2a78      	cmp	r2, #120	; 0x78
 8002e74:	d807      	bhi.n	8002e86 <_printf_i+0x2a>
 8002e76:	2a62      	cmp	r2, #98	; 0x62
 8002e78:	d809      	bhi.n	8002e8e <_printf_i+0x32>
 8002e7a:	2a00      	cmp	r2, #0
 8002e7c:	d100      	bne.n	8002e80 <_printf_i+0x24>
 8002e7e:	e0c1      	b.n	8003004 <_printf_i+0x1a8>
 8002e80:	2a58      	cmp	r2, #88	; 0x58
 8002e82:	d100      	bne.n	8002e86 <_printf_i+0x2a>
 8002e84:	e08c      	b.n	8002fa0 <_printf_i+0x144>
 8002e86:	0026      	movs	r6, r4
 8002e88:	3642      	adds	r6, #66	; 0x42
 8002e8a:	7032      	strb	r2, [r6, #0]
 8002e8c:	e022      	b.n	8002ed4 <_printf_i+0x78>
 8002e8e:	0010      	movs	r0, r2
 8002e90:	3863      	subs	r0, #99	; 0x63
 8002e92:	2815      	cmp	r0, #21
 8002e94:	d8f7      	bhi.n	8002e86 <_printf_i+0x2a>
 8002e96:	f7fd f933 	bl	8000100 <__gnu_thumb1_case_shi>
 8002e9a:	0016      	.short	0x0016
 8002e9c:	fff6001f 	.word	0xfff6001f
 8002ea0:	fff6fff6 	.word	0xfff6fff6
 8002ea4:	001ffff6 	.word	0x001ffff6
 8002ea8:	fff6fff6 	.word	0xfff6fff6
 8002eac:	fff6fff6 	.word	0xfff6fff6
 8002eb0:	003600a8 	.word	0x003600a8
 8002eb4:	fff6009a 	.word	0xfff6009a
 8002eb8:	00b9fff6 	.word	0x00b9fff6
 8002ebc:	0036fff6 	.word	0x0036fff6
 8002ec0:	fff6fff6 	.word	0xfff6fff6
 8002ec4:	009e      	.short	0x009e
 8002ec6:	0026      	movs	r6, r4
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	3642      	adds	r6, #66	; 0x42
 8002ecc:	1d11      	adds	r1, r2, #4
 8002ece:	6019      	str	r1, [r3, #0]
 8002ed0:	6813      	ldr	r3, [r2, #0]
 8002ed2:	7033      	strb	r3, [r6, #0]
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e0a7      	b.n	8003028 <_printf_i+0x1cc>
 8002ed8:	6808      	ldr	r0, [r1, #0]
 8002eda:	6819      	ldr	r1, [r3, #0]
 8002edc:	1d0a      	adds	r2, r1, #4
 8002ede:	0605      	lsls	r5, r0, #24
 8002ee0:	d50b      	bpl.n	8002efa <_printf_i+0x9e>
 8002ee2:	680d      	ldr	r5, [r1, #0]
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	2d00      	cmp	r5, #0
 8002ee8:	da03      	bge.n	8002ef2 <_printf_i+0x96>
 8002eea:	232d      	movs	r3, #45	; 0x2d
 8002eec:	9a04      	ldr	r2, [sp, #16]
 8002eee:	426d      	negs	r5, r5
 8002ef0:	7013      	strb	r3, [r2, #0]
 8002ef2:	4b61      	ldr	r3, [pc, #388]	; (8003078 <_printf_i+0x21c>)
 8002ef4:	270a      	movs	r7, #10
 8002ef6:	9303      	str	r3, [sp, #12]
 8002ef8:	e01b      	b.n	8002f32 <_printf_i+0xd6>
 8002efa:	680d      	ldr	r5, [r1, #0]
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	0641      	lsls	r1, r0, #25
 8002f00:	d5f1      	bpl.n	8002ee6 <_printf_i+0x8a>
 8002f02:	b22d      	sxth	r5, r5
 8002f04:	e7ef      	b.n	8002ee6 <_printf_i+0x8a>
 8002f06:	680d      	ldr	r5, [r1, #0]
 8002f08:	6819      	ldr	r1, [r3, #0]
 8002f0a:	1d08      	adds	r0, r1, #4
 8002f0c:	6018      	str	r0, [r3, #0]
 8002f0e:	062e      	lsls	r6, r5, #24
 8002f10:	d501      	bpl.n	8002f16 <_printf_i+0xba>
 8002f12:	680d      	ldr	r5, [r1, #0]
 8002f14:	e003      	b.n	8002f1e <_printf_i+0xc2>
 8002f16:	066d      	lsls	r5, r5, #25
 8002f18:	d5fb      	bpl.n	8002f12 <_printf_i+0xb6>
 8002f1a:	680d      	ldr	r5, [r1, #0]
 8002f1c:	b2ad      	uxth	r5, r5
 8002f1e:	4b56      	ldr	r3, [pc, #344]	; (8003078 <_printf_i+0x21c>)
 8002f20:	2708      	movs	r7, #8
 8002f22:	9303      	str	r3, [sp, #12]
 8002f24:	2a6f      	cmp	r2, #111	; 0x6f
 8002f26:	d000      	beq.n	8002f2a <_printf_i+0xce>
 8002f28:	3702      	adds	r7, #2
 8002f2a:	0023      	movs	r3, r4
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	3343      	adds	r3, #67	; 0x43
 8002f30:	701a      	strb	r2, [r3, #0]
 8002f32:	6863      	ldr	r3, [r4, #4]
 8002f34:	60a3      	str	r3, [r4, #8]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	db03      	blt.n	8002f42 <_printf_i+0xe6>
 8002f3a:	2204      	movs	r2, #4
 8002f3c:	6821      	ldr	r1, [r4, #0]
 8002f3e:	4391      	bics	r1, r2
 8002f40:	6021      	str	r1, [r4, #0]
 8002f42:	2d00      	cmp	r5, #0
 8002f44:	d102      	bne.n	8002f4c <_printf_i+0xf0>
 8002f46:	9e04      	ldr	r6, [sp, #16]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00c      	beq.n	8002f66 <_printf_i+0x10a>
 8002f4c:	9e04      	ldr	r6, [sp, #16]
 8002f4e:	0028      	movs	r0, r5
 8002f50:	0039      	movs	r1, r7
 8002f52:	f7fd f965 	bl	8000220 <__aeabi_uidivmod>
 8002f56:	9b03      	ldr	r3, [sp, #12]
 8002f58:	3e01      	subs	r6, #1
 8002f5a:	5c5b      	ldrb	r3, [r3, r1]
 8002f5c:	7033      	strb	r3, [r6, #0]
 8002f5e:	002b      	movs	r3, r5
 8002f60:	0005      	movs	r5, r0
 8002f62:	429f      	cmp	r7, r3
 8002f64:	d9f3      	bls.n	8002f4e <_printf_i+0xf2>
 8002f66:	2f08      	cmp	r7, #8
 8002f68:	d109      	bne.n	8002f7e <_printf_i+0x122>
 8002f6a:	6823      	ldr	r3, [r4, #0]
 8002f6c:	07db      	lsls	r3, r3, #31
 8002f6e:	d506      	bpl.n	8002f7e <_printf_i+0x122>
 8002f70:	6863      	ldr	r3, [r4, #4]
 8002f72:	6922      	ldr	r2, [r4, #16]
 8002f74:	4293      	cmp	r3, r2
 8002f76:	dc02      	bgt.n	8002f7e <_printf_i+0x122>
 8002f78:	2330      	movs	r3, #48	; 0x30
 8002f7a:	3e01      	subs	r6, #1
 8002f7c:	7033      	strb	r3, [r6, #0]
 8002f7e:	9b04      	ldr	r3, [sp, #16]
 8002f80:	1b9b      	subs	r3, r3, r6
 8002f82:	6123      	str	r3, [r4, #16]
 8002f84:	9b07      	ldr	r3, [sp, #28]
 8002f86:	0021      	movs	r1, r4
 8002f88:	9300      	str	r3, [sp, #0]
 8002f8a:	9805      	ldr	r0, [sp, #20]
 8002f8c:	9b06      	ldr	r3, [sp, #24]
 8002f8e:	aa09      	add	r2, sp, #36	; 0x24
 8002f90:	f7ff fef4 	bl	8002d7c <_printf_common>
 8002f94:	1c43      	adds	r3, r0, #1
 8002f96:	d14c      	bne.n	8003032 <_printf_i+0x1d6>
 8002f98:	2001      	movs	r0, #1
 8002f9a:	4240      	negs	r0, r0
 8002f9c:	b00b      	add	sp, #44	; 0x2c
 8002f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fa0:	3145      	adds	r1, #69	; 0x45
 8002fa2:	700a      	strb	r2, [r1, #0]
 8002fa4:	4a34      	ldr	r2, [pc, #208]	; (8003078 <_printf_i+0x21c>)
 8002fa6:	9203      	str	r2, [sp, #12]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	6821      	ldr	r1, [r4, #0]
 8002fac:	ca20      	ldmia	r2!, {r5}
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	0608      	lsls	r0, r1, #24
 8002fb2:	d516      	bpl.n	8002fe2 <_printf_i+0x186>
 8002fb4:	07cb      	lsls	r3, r1, #31
 8002fb6:	d502      	bpl.n	8002fbe <_printf_i+0x162>
 8002fb8:	2320      	movs	r3, #32
 8002fba:	4319      	orrs	r1, r3
 8002fbc:	6021      	str	r1, [r4, #0]
 8002fbe:	2710      	movs	r7, #16
 8002fc0:	2d00      	cmp	r5, #0
 8002fc2:	d1b2      	bne.n	8002f2a <_printf_i+0xce>
 8002fc4:	2320      	movs	r3, #32
 8002fc6:	6822      	ldr	r2, [r4, #0]
 8002fc8:	439a      	bics	r2, r3
 8002fca:	6022      	str	r2, [r4, #0]
 8002fcc:	e7ad      	b.n	8002f2a <_printf_i+0xce>
 8002fce:	2220      	movs	r2, #32
 8002fd0:	6809      	ldr	r1, [r1, #0]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	6022      	str	r2, [r4, #0]
 8002fd6:	0022      	movs	r2, r4
 8002fd8:	2178      	movs	r1, #120	; 0x78
 8002fda:	3245      	adds	r2, #69	; 0x45
 8002fdc:	7011      	strb	r1, [r2, #0]
 8002fde:	4a27      	ldr	r2, [pc, #156]	; (800307c <_printf_i+0x220>)
 8002fe0:	e7e1      	b.n	8002fa6 <_printf_i+0x14a>
 8002fe2:	0648      	lsls	r0, r1, #25
 8002fe4:	d5e6      	bpl.n	8002fb4 <_printf_i+0x158>
 8002fe6:	b2ad      	uxth	r5, r5
 8002fe8:	e7e4      	b.n	8002fb4 <_printf_i+0x158>
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	680d      	ldr	r5, [r1, #0]
 8002fee:	1d10      	adds	r0, r2, #4
 8002ff0:	6949      	ldr	r1, [r1, #20]
 8002ff2:	6018      	str	r0, [r3, #0]
 8002ff4:	6813      	ldr	r3, [r2, #0]
 8002ff6:	062e      	lsls	r6, r5, #24
 8002ff8:	d501      	bpl.n	8002ffe <_printf_i+0x1a2>
 8002ffa:	6019      	str	r1, [r3, #0]
 8002ffc:	e002      	b.n	8003004 <_printf_i+0x1a8>
 8002ffe:	066d      	lsls	r5, r5, #25
 8003000:	d5fb      	bpl.n	8002ffa <_printf_i+0x19e>
 8003002:	8019      	strh	r1, [r3, #0]
 8003004:	2300      	movs	r3, #0
 8003006:	9e04      	ldr	r6, [sp, #16]
 8003008:	6123      	str	r3, [r4, #16]
 800300a:	e7bb      	b.n	8002f84 <_printf_i+0x128>
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	1d11      	adds	r1, r2, #4
 8003010:	6019      	str	r1, [r3, #0]
 8003012:	6816      	ldr	r6, [r2, #0]
 8003014:	2100      	movs	r1, #0
 8003016:	0030      	movs	r0, r6
 8003018:	6862      	ldr	r2, [r4, #4]
 800301a:	f000 f831 	bl	8003080 <memchr>
 800301e:	2800      	cmp	r0, #0
 8003020:	d001      	beq.n	8003026 <_printf_i+0x1ca>
 8003022:	1b80      	subs	r0, r0, r6
 8003024:	6060      	str	r0, [r4, #4]
 8003026:	6863      	ldr	r3, [r4, #4]
 8003028:	6123      	str	r3, [r4, #16]
 800302a:	2300      	movs	r3, #0
 800302c:	9a04      	ldr	r2, [sp, #16]
 800302e:	7013      	strb	r3, [r2, #0]
 8003030:	e7a8      	b.n	8002f84 <_printf_i+0x128>
 8003032:	6923      	ldr	r3, [r4, #16]
 8003034:	0032      	movs	r2, r6
 8003036:	9906      	ldr	r1, [sp, #24]
 8003038:	9805      	ldr	r0, [sp, #20]
 800303a:	9d07      	ldr	r5, [sp, #28]
 800303c:	47a8      	blx	r5
 800303e:	1c43      	adds	r3, r0, #1
 8003040:	d0aa      	beq.n	8002f98 <_printf_i+0x13c>
 8003042:	6823      	ldr	r3, [r4, #0]
 8003044:	079b      	lsls	r3, r3, #30
 8003046:	d415      	bmi.n	8003074 <_printf_i+0x218>
 8003048:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800304a:	68e0      	ldr	r0, [r4, #12]
 800304c:	4298      	cmp	r0, r3
 800304e:	daa5      	bge.n	8002f9c <_printf_i+0x140>
 8003050:	0018      	movs	r0, r3
 8003052:	e7a3      	b.n	8002f9c <_printf_i+0x140>
 8003054:	0022      	movs	r2, r4
 8003056:	2301      	movs	r3, #1
 8003058:	9906      	ldr	r1, [sp, #24]
 800305a:	9805      	ldr	r0, [sp, #20]
 800305c:	9e07      	ldr	r6, [sp, #28]
 800305e:	3219      	adds	r2, #25
 8003060:	47b0      	blx	r6
 8003062:	1c43      	adds	r3, r0, #1
 8003064:	d098      	beq.n	8002f98 <_printf_i+0x13c>
 8003066:	3501      	adds	r5, #1
 8003068:	68e3      	ldr	r3, [r4, #12]
 800306a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800306c:	1a9b      	subs	r3, r3, r2
 800306e:	42ab      	cmp	r3, r5
 8003070:	dcf0      	bgt.n	8003054 <_printf_i+0x1f8>
 8003072:	e7e9      	b.n	8003048 <_printf_i+0x1ec>
 8003074:	2500      	movs	r5, #0
 8003076:	e7f7      	b.n	8003068 <_printf_i+0x20c>
 8003078:	080033f5 	.word	0x080033f5
 800307c:	08003406 	.word	0x08003406

08003080 <memchr>:
 8003080:	b2c9      	uxtb	r1, r1
 8003082:	1882      	adds	r2, r0, r2
 8003084:	4290      	cmp	r0, r2
 8003086:	d101      	bne.n	800308c <memchr+0xc>
 8003088:	2000      	movs	r0, #0
 800308a:	4770      	bx	lr
 800308c:	7803      	ldrb	r3, [r0, #0]
 800308e:	428b      	cmp	r3, r1
 8003090:	d0fb      	beq.n	800308a <memchr+0xa>
 8003092:	3001      	adds	r0, #1
 8003094:	e7f6      	b.n	8003084 <memchr+0x4>

08003096 <memcpy>:
 8003096:	2300      	movs	r3, #0
 8003098:	b510      	push	{r4, lr}
 800309a:	429a      	cmp	r2, r3
 800309c:	d100      	bne.n	80030a0 <memcpy+0xa>
 800309e:	bd10      	pop	{r4, pc}
 80030a0:	5ccc      	ldrb	r4, [r1, r3]
 80030a2:	54c4      	strb	r4, [r0, r3]
 80030a4:	3301      	adds	r3, #1
 80030a6:	e7f8      	b.n	800309a <memcpy+0x4>

080030a8 <memmove>:
 80030a8:	b510      	push	{r4, lr}
 80030aa:	4288      	cmp	r0, r1
 80030ac:	d902      	bls.n	80030b4 <memmove+0xc>
 80030ae:	188b      	adds	r3, r1, r2
 80030b0:	4298      	cmp	r0, r3
 80030b2:	d303      	bcc.n	80030bc <memmove+0x14>
 80030b4:	2300      	movs	r3, #0
 80030b6:	e007      	b.n	80030c8 <memmove+0x20>
 80030b8:	5c8b      	ldrb	r3, [r1, r2]
 80030ba:	5483      	strb	r3, [r0, r2]
 80030bc:	3a01      	subs	r2, #1
 80030be:	d2fb      	bcs.n	80030b8 <memmove+0x10>
 80030c0:	bd10      	pop	{r4, pc}
 80030c2:	5ccc      	ldrb	r4, [r1, r3]
 80030c4:	54c4      	strb	r4, [r0, r3]
 80030c6:	3301      	adds	r3, #1
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d1fa      	bne.n	80030c2 <memmove+0x1a>
 80030cc:	e7f8      	b.n	80030c0 <memmove+0x18>
	...

080030d0 <_free_r>:
 80030d0:	b570      	push	{r4, r5, r6, lr}
 80030d2:	0005      	movs	r5, r0
 80030d4:	2900      	cmp	r1, #0
 80030d6:	d010      	beq.n	80030fa <_free_r+0x2a>
 80030d8:	1f0c      	subs	r4, r1, #4
 80030da:	6823      	ldr	r3, [r4, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	da00      	bge.n	80030e2 <_free_r+0x12>
 80030e0:	18e4      	adds	r4, r4, r3
 80030e2:	0028      	movs	r0, r5
 80030e4:	f000 f918 	bl	8003318 <__malloc_lock>
 80030e8:	4a1d      	ldr	r2, [pc, #116]	; (8003160 <_free_r+0x90>)
 80030ea:	6813      	ldr	r3, [r2, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d105      	bne.n	80030fc <_free_r+0x2c>
 80030f0:	6063      	str	r3, [r4, #4]
 80030f2:	6014      	str	r4, [r2, #0]
 80030f4:	0028      	movs	r0, r5
 80030f6:	f000 f917 	bl	8003328 <__malloc_unlock>
 80030fa:	bd70      	pop	{r4, r5, r6, pc}
 80030fc:	42a3      	cmp	r3, r4
 80030fe:	d908      	bls.n	8003112 <_free_r+0x42>
 8003100:	6821      	ldr	r1, [r4, #0]
 8003102:	1860      	adds	r0, r4, r1
 8003104:	4283      	cmp	r3, r0
 8003106:	d1f3      	bne.n	80030f0 <_free_r+0x20>
 8003108:	6818      	ldr	r0, [r3, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	1841      	adds	r1, r0, r1
 800310e:	6021      	str	r1, [r4, #0]
 8003110:	e7ee      	b.n	80030f0 <_free_r+0x20>
 8003112:	001a      	movs	r2, r3
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <_free_r+0x4e>
 800311a:	42a3      	cmp	r3, r4
 800311c:	d9f9      	bls.n	8003112 <_free_r+0x42>
 800311e:	6811      	ldr	r1, [r2, #0]
 8003120:	1850      	adds	r0, r2, r1
 8003122:	42a0      	cmp	r0, r4
 8003124:	d10b      	bne.n	800313e <_free_r+0x6e>
 8003126:	6820      	ldr	r0, [r4, #0]
 8003128:	1809      	adds	r1, r1, r0
 800312a:	1850      	adds	r0, r2, r1
 800312c:	6011      	str	r1, [r2, #0]
 800312e:	4283      	cmp	r3, r0
 8003130:	d1e0      	bne.n	80030f4 <_free_r+0x24>
 8003132:	6818      	ldr	r0, [r3, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	1841      	adds	r1, r0, r1
 8003138:	6011      	str	r1, [r2, #0]
 800313a:	6053      	str	r3, [r2, #4]
 800313c:	e7da      	b.n	80030f4 <_free_r+0x24>
 800313e:	42a0      	cmp	r0, r4
 8003140:	d902      	bls.n	8003148 <_free_r+0x78>
 8003142:	230c      	movs	r3, #12
 8003144:	602b      	str	r3, [r5, #0]
 8003146:	e7d5      	b.n	80030f4 <_free_r+0x24>
 8003148:	6821      	ldr	r1, [r4, #0]
 800314a:	1860      	adds	r0, r4, r1
 800314c:	4283      	cmp	r3, r0
 800314e:	d103      	bne.n	8003158 <_free_r+0x88>
 8003150:	6818      	ldr	r0, [r3, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	1841      	adds	r1, r0, r1
 8003156:	6021      	str	r1, [r4, #0]
 8003158:	6063      	str	r3, [r4, #4]
 800315a:	6054      	str	r4, [r2, #4]
 800315c:	e7ca      	b.n	80030f4 <_free_r+0x24>
 800315e:	46c0      	nop			; (mov r8, r8)
 8003160:	2000021c 	.word	0x2000021c

08003164 <sbrk_aligned>:
 8003164:	b570      	push	{r4, r5, r6, lr}
 8003166:	4e0f      	ldr	r6, [pc, #60]	; (80031a4 <sbrk_aligned+0x40>)
 8003168:	000d      	movs	r5, r1
 800316a:	6831      	ldr	r1, [r6, #0]
 800316c:	0004      	movs	r4, r0
 800316e:	2900      	cmp	r1, #0
 8003170:	d102      	bne.n	8003178 <sbrk_aligned+0x14>
 8003172:	f000 f8bf 	bl	80032f4 <_sbrk_r>
 8003176:	6030      	str	r0, [r6, #0]
 8003178:	0029      	movs	r1, r5
 800317a:	0020      	movs	r0, r4
 800317c:	f000 f8ba 	bl	80032f4 <_sbrk_r>
 8003180:	1c43      	adds	r3, r0, #1
 8003182:	d00a      	beq.n	800319a <sbrk_aligned+0x36>
 8003184:	2303      	movs	r3, #3
 8003186:	1cc5      	adds	r5, r0, #3
 8003188:	439d      	bics	r5, r3
 800318a:	42a8      	cmp	r0, r5
 800318c:	d007      	beq.n	800319e <sbrk_aligned+0x3a>
 800318e:	1a29      	subs	r1, r5, r0
 8003190:	0020      	movs	r0, r4
 8003192:	f000 f8af 	bl	80032f4 <_sbrk_r>
 8003196:	1c43      	adds	r3, r0, #1
 8003198:	d101      	bne.n	800319e <sbrk_aligned+0x3a>
 800319a:	2501      	movs	r5, #1
 800319c:	426d      	negs	r5, r5
 800319e:	0028      	movs	r0, r5
 80031a0:	bd70      	pop	{r4, r5, r6, pc}
 80031a2:	46c0      	nop			; (mov r8, r8)
 80031a4:	20000220 	.word	0x20000220

080031a8 <_malloc_r>:
 80031a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80031aa:	2203      	movs	r2, #3
 80031ac:	1ccb      	adds	r3, r1, #3
 80031ae:	4393      	bics	r3, r2
 80031b0:	3308      	adds	r3, #8
 80031b2:	0006      	movs	r6, r0
 80031b4:	001f      	movs	r7, r3
 80031b6:	2b0c      	cmp	r3, #12
 80031b8:	d232      	bcs.n	8003220 <_malloc_r+0x78>
 80031ba:	270c      	movs	r7, #12
 80031bc:	42b9      	cmp	r1, r7
 80031be:	d831      	bhi.n	8003224 <_malloc_r+0x7c>
 80031c0:	0030      	movs	r0, r6
 80031c2:	f000 f8a9 	bl	8003318 <__malloc_lock>
 80031c6:	4d32      	ldr	r5, [pc, #200]	; (8003290 <_malloc_r+0xe8>)
 80031c8:	682b      	ldr	r3, [r5, #0]
 80031ca:	001c      	movs	r4, r3
 80031cc:	2c00      	cmp	r4, #0
 80031ce:	d12e      	bne.n	800322e <_malloc_r+0x86>
 80031d0:	0039      	movs	r1, r7
 80031d2:	0030      	movs	r0, r6
 80031d4:	f7ff ffc6 	bl	8003164 <sbrk_aligned>
 80031d8:	0004      	movs	r4, r0
 80031da:	1c43      	adds	r3, r0, #1
 80031dc:	d11e      	bne.n	800321c <_malloc_r+0x74>
 80031de:	682c      	ldr	r4, [r5, #0]
 80031e0:	0025      	movs	r5, r4
 80031e2:	2d00      	cmp	r5, #0
 80031e4:	d14a      	bne.n	800327c <_malloc_r+0xd4>
 80031e6:	6823      	ldr	r3, [r4, #0]
 80031e8:	0029      	movs	r1, r5
 80031ea:	18e3      	adds	r3, r4, r3
 80031ec:	0030      	movs	r0, r6
 80031ee:	9301      	str	r3, [sp, #4]
 80031f0:	f000 f880 	bl	80032f4 <_sbrk_r>
 80031f4:	9b01      	ldr	r3, [sp, #4]
 80031f6:	4283      	cmp	r3, r0
 80031f8:	d143      	bne.n	8003282 <_malloc_r+0xda>
 80031fa:	6823      	ldr	r3, [r4, #0]
 80031fc:	3703      	adds	r7, #3
 80031fe:	1aff      	subs	r7, r7, r3
 8003200:	2303      	movs	r3, #3
 8003202:	439f      	bics	r7, r3
 8003204:	3708      	adds	r7, #8
 8003206:	2f0c      	cmp	r7, #12
 8003208:	d200      	bcs.n	800320c <_malloc_r+0x64>
 800320a:	270c      	movs	r7, #12
 800320c:	0039      	movs	r1, r7
 800320e:	0030      	movs	r0, r6
 8003210:	f7ff ffa8 	bl	8003164 <sbrk_aligned>
 8003214:	1c43      	adds	r3, r0, #1
 8003216:	d034      	beq.n	8003282 <_malloc_r+0xda>
 8003218:	6823      	ldr	r3, [r4, #0]
 800321a:	19df      	adds	r7, r3, r7
 800321c:	6027      	str	r7, [r4, #0]
 800321e:	e013      	b.n	8003248 <_malloc_r+0xa0>
 8003220:	2b00      	cmp	r3, #0
 8003222:	dacb      	bge.n	80031bc <_malloc_r+0x14>
 8003224:	230c      	movs	r3, #12
 8003226:	2500      	movs	r5, #0
 8003228:	6033      	str	r3, [r6, #0]
 800322a:	0028      	movs	r0, r5
 800322c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800322e:	6822      	ldr	r2, [r4, #0]
 8003230:	1bd1      	subs	r1, r2, r7
 8003232:	d420      	bmi.n	8003276 <_malloc_r+0xce>
 8003234:	290b      	cmp	r1, #11
 8003236:	d917      	bls.n	8003268 <_malloc_r+0xc0>
 8003238:	19e2      	adds	r2, r4, r7
 800323a:	6027      	str	r7, [r4, #0]
 800323c:	42a3      	cmp	r3, r4
 800323e:	d111      	bne.n	8003264 <_malloc_r+0xbc>
 8003240:	602a      	str	r2, [r5, #0]
 8003242:	6863      	ldr	r3, [r4, #4]
 8003244:	6011      	str	r1, [r2, #0]
 8003246:	6053      	str	r3, [r2, #4]
 8003248:	0030      	movs	r0, r6
 800324a:	0025      	movs	r5, r4
 800324c:	f000 f86c 	bl	8003328 <__malloc_unlock>
 8003250:	2207      	movs	r2, #7
 8003252:	350b      	adds	r5, #11
 8003254:	1d23      	adds	r3, r4, #4
 8003256:	4395      	bics	r5, r2
 8003258:	1aea      	subs	r2, r5, r3
 800325a:	429d      	cmp	r5, r3
 800325c:	d0e5      	beq.n	800322a <_malloc_r+0x82>
 800325e:	1b5b      	subs	r3, r3, r5
 8003260:	50a3      	str	r3, [r4, r2]
 8003262:	e7e2      	b.n	800322a <_malloc_r+0x82>
 8003264:	605a      	str	r2, [r3, #4]
 8003266:	e7ec      	b.n	8003242 <_malloc_r+0x9a>
 8003268:	6862      	ldr	r2, [r4, #4]
 800326a:	42a3      	cmp	r3, r4
 800326c:	d101      	bne.n	8003272 <_malloc_r+0xca>
 800326e:	602a      	str	r2, [r5, #0]
 8003270:	e7ea      	b.n	8003248 <_malloc_r+0xa0>
 8003272:	605a      	str	r2, [r3, #4]
 8003274:	e7e8      	b.n	8003248 <_malloc_r+0xa0>
 8003276:	0023      	movs	r3, r4
 8003278:	6864      	ldr	r4, [r4, #4]
 800327a:	e7a7      	b.n	80031cc <_malloc_r+0x24>
 800327c:	002c      	movs	r4, r5
 800327e:	686d      	ldr	r5, [r5, #4]
 8003280:	e7af      	b.n	80031e2 <_malloc_r+0x3a>
 8003282:	230c      	movs	r3, #12
 8003284:	0030      	movs	r0, r6
 8003286:	6033      	str	r3, [r6, #0]
 8003288:	f000 f84e 	bl	8003328 <__malloc_unlock>
 800328c:	e7cd      	b.n	800322a <_malloc_r+0x82>
 800328e:	46c0      	nop			; (mov r8, r8)
 8003290:	2000021c 	.word	0x2000021c

08003294 <_realloc_r>:
 8003294:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003296:	0007      	movs	r7, r0
 8003298:	000e      	movs	r6, r1
 800329a:	0014      	movs	r4, r2
 800329c:	2900      	cmp	r1, #0
 800329e:	d105      	bne.n	80032ac <_realloc_r+0x18>
 80032a0:	0011      	movs	r1, r2
 80032a2:	f7ff ff81 	bl	80031a8 <_malloc_r>
 80032a6:	0005      	movs	r5, r0
 80032a8:	0028      	movs	r0, r5
 80032aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80032ac:	2a00      	cmp	r2, #0
 80032ae:	d103      	bne.n	80032b8 <_realloc_r+0x24>
 80032b0:	f7ff ff0e 	bl	80030d0 <_free_r>
 80032b4:	0025      	movs	r5, r4
 80032b6:	e7f7      	b.n	80032a8 <_realloc_r+0x14>
 80032b8:	f000 f83e 	bl	8003338 <_malloc_usable_size_r>
 80032bc:	9001      	str	r0, [sp, #4]
 80032be:	4284      	cmp	r4, r0
 80032c0:	d803      	bhi.n	80032ca <_realloc_r+0x36>
 80032c2:	0035      	movs	r5, r6
 80032c4:	0843      	lsrs	r3, r0, #1
 80032c6:	42a3      	cmp	r3, r4
 80032c8:	d3ee      	bcc.n	80032a8 <_realloc_r+0x14>
 80032ca:	0021      	movs	r1, r4
 80032cc:	0038      	movs	r0, r7
 80032ce:	f7ff ff6b 	bl	80031a8 <_malloc_r>
 80032d2:	1e05      	subs	r5, r0, #0
 80032d4:	d0e8      	beq.n	80032a8 <_realloc_r+0x14>
 80032d6:	9b01      	ldr	r3, [sp, #4]
 80032d8:	0022      	movs	r2, r4
 80032da:	429c      	cmp	r4, r3
 80032dc:	d900      	bls.n	80032e0 <_realloc_r+0x4c>
 80032de:	001a      	movs	r2, r3
 80032e0:	0031      	movs	r1, r6
 80032e2:	0028      	movs	r0, r5
 80032e4:	f7ff fed7 	bl	8003096 <memcpy>
 80032e8:	0031      	movs	r1, r6
 80032ea:	0038      	movs	r0, r7
 80032ec:	f7ff fef0 	bl	80030d0 <_free_r>
 80032f0:	e7da      	b.n	80032a8 <_realloc_r+0x14>
	...

080032f4 <_sbrk_r>:
 80032f4:	2300      	movs	r3, #0
 80032f6:	b570      	push	{r4, r5, r6, lr}
 80032f8:	4d06      	ldr	r5, [pc, #24]	; (8003314 <_sbrk_r+0x20>)
 80032fa:	0004      	movs	r4, r0
 80032fc:	0008      	movs	r0, r1
 80032fe:	602b      	str	r3, [r5, #0]
 8003300:	f7fd fa26 	bl	8000750 <_sbrk>
 8003304:	1c43      	adds	r3, r0, #1
 8003306:	d103      	bne.n	8003310 <_sbrk_r+0x1c>
 8003308:	682b      	ldr	r3, [r5, #0]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d000      	beq.n	8003310 <_sbrk_r+0x1c>
 800330e:	6023      	str	r3, [r4, #0]
 8003310:	bd70      	pop	{r4, r5, r6, pc}
 8003312:	46c0      	nop			; (mov r8, r8)
 8003314:	20000224 	.word	0x20000224

08003318 <__malloc_lock>:
 8003318:	b510      	push	{r4, lr}
 800331a:	4802      	ldr	r0, [pc, #8]	; (8003324 <__malloc_lock+0xc>)
 800331c:	f000 f814 	bl	8003348 <__retarget_lock_acquire_recursive>
 8003320:	bd10      	pop	{r4, pc}
 8003322:	46c0      	nop			; (mov r8, r8)
 8003324:	20000228 	.word	0x20000228

08003328 <__malloc_unlock>:
 8003328:	b510      	push	{r4, lr}
 800332a:	4802      	ldr	r0, [pc, #8]	; (8003334 <__malloc_unlock+0xc>)
 800332c:	f000 f80d 	bl	800334a <__retarget_lock_release_recursive>
 8003330:	bd10      	pop	{r4, pc}
 8003332:	46c0      	nop			; (mov r8, r8)
 8003334:	20000228 	.word	0x20000228

08003338 <_malloc_usable_size_r>:
 8003338:	1f0b      	subs	r3, r1, #4
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	1f18      	subs	r0, r3, #4
 800333e:	2b00      	cmp	r3, #0
 8003340:	da01      	bge.n	8003346 <_malloc_usable_size_r+0xe>
 8003342:	580b      	ldr	r3, [r1, r0]
 8003344:	18c0      	adds	r0, r0, r3
 8003346:	4770      	bx	lr

08003348 <__retarget_lock_acquire_recursive>:
 8003348:	4770      	bx	lr

0800334a <__retarget_lock_release_recursive>:
 800334a:	4770      	bx	lr

0800334c <_init>:
 800334c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800334e:	46c0      	nop			; (mov r8, r8)
 8003350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003352:	bc08      	pop	{r3}
 8003354:	469e      	mov	lr, r3
 8003356:	4770      	bx	lr

08003358 <_fini>:
 8003358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800335a:	46c0      	nop			; (mov r8, r8)
 800335c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800335e:	bc08      	pop	{r3}
 8003360:	469e      	mov	lr, r3
 8003362:	4770      	bx	lr
